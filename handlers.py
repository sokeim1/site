from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo, InputMediaDocument, BufferedInputFile, LabeledPrice, PreCheckoutQuery, WebAppInfo
from aiogram import Router, Bot
from aiogram.exceptions import TelegramBadRequest
from db import save_user
import time
import asyncio
import datetime
from datetime import timezone, timedelta

# –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_save_cache = {}

def optimized_save_user(user_id, username, first_name, last_name, language_code, is_bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if user_id in user_save_cache:
        if current_time - user_save_cache[user_id] < 300:  # 5 –º–∏–Ω—É—Ç
            return
    
    try:
        save_user(user_id, username, first_name, last_name, language_code, is_bot)
        user_save_cache[user_id] = current_time
    except Exception:
        pass

async def safe_send_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback"""
    if callback.message and callback.message.chat:
        await bot.send_message(
            callback.message.chat.id,
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)

from config import API_TOKEN, BOT_USERNAME, ADMIN_IDS, CHANNEL_ID, CHANNEL_USERNAME, MINIAPP_BASE_URL, DAILY_CONTENT_LIMIT
from storage import MOVIES, SERIES_POSTERS
from db import save_user, add_referral, get_referrals_count, get_premium_users, is_premium_user, load_all_users, activate_premium, get_episode_qualities, add_episode_quality, episode_exists, get_episode_quality_file_id, get_user_stats, get_user_daily_content_count
from miniapp_security import generate_secure_miniapp_url, validate_miniapp_signature, get_user_limits_info
from keyboards import (get_seasons_keyboard, get_episodes_keyboard, get_back_to_episodes_keyboard, 
                      get_episode_share_keyboard, get_main_menu_keyboard, get_back_to_main_menu_keyboard, 
                      get_movies_menu_keyboard, get_phf_seasons_keyboard, get_lbsc_seasons_keyboard, 
                      get_lbsc_episodes_keyboard, get_irh_seasons_keyboard, get_irh_episodes_keyboard, 
                      get_wnd_seasons_keyboard, get_wnd_episodes_keyboard, get_loki_seasons_keyboard, 
                      get_loki_episodes_keyboard, get_broadcast_menu_keyboard, get_broadcast_confirm_keyboard,
                      get_broadcast_buttons_keyboard, get_broadcast_custom_button_keyboard)
import json
import os
import random
import logging
import datetime
import re
import aiohttp

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("bot_actions.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

STATS_FILE = 'stats.json'
# ADMIN_ID –±–µ—Ä—ë–º –∏–∑ config.py (–∏–ª–∏ ENV ADMIN_ID)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
waiting_for_playlist_name = set()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞
# user_id: { 'name': str, 'episodes': set((season, episode)) }
temp_playlist_selections = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è —ç–ø–∏–∑–æ–¥–æ–≤
# user_id: { 'series_season_episode': 'quality' }
user_episode_qualities = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ---
waiting_for_admin_message = {}
# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
waiting_admin_reply = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        return False

def get_subscription_message(user_id: int = None) -> tuple[str, InlineKeyboardMarkup]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = (
        "<b>–ü–û–î–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –ù–ê–® –†–ï–°–£–†–°, –ü–†–ï–ñ–î–ï –ß–ï–ú –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –ë–û–¢–û–ú</b>\n\n"
        "–û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. "
        "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã: /ref"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    channel_url = f"https://t.me/{CHANNEL_USERNAME}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton(text="üö´ –£–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="ref_system")]
    ])
    
    return text, keyboard
# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
broadcast_state = {}

# --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
async def create_broadcast_preview(callback, state):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    content = state.get("content", {})
    content_type = state.get("type")
    button_configs = state.get("button_configs", [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    buttons = None
    if button_configs:
        keyboard_rows = []
        current_row = []
        
        for config in button_configs:
            if "url" in config:
                btn = InlineKeyboardButton(text=config["text"], url=config["url"])
                current_row.append(btn)
                
                # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(current_row) == 2:
                    keyboard_rows.append(current_row)
                    current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            keyboard_rows.append(current_row)
        
        if keyboard_rows:
            buttons = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type == "text":
            await callback.message.edit_text(
                f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content['text']}",
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "photo":
            await callback.message.delete()
            caption = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content.get('caption', '')}"
            await bot.send_photo(
                callback.from_user.id,
                content["photo"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "video":
            await callback.message.delete()
            caption = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content.get('caption', '')}"
            await bot.send_video(
                callback.from_user.id,
                content["video"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "document":
            await callback.message.delete()
            caption = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content.get('caption', '')}"
            await bot.send_document(
                callback.from_user.id,
                content["document"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "audio":
            await callback.message.delete()
            caption = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content.get('caption', '')}"
            await bot.send_audio(
                callback.from_user.id,
                content["audio"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "voice":
            await callback.message.delete()
            await bot.send_voice(
                callback.from_user.id,
                content["voice"],
                reply_markup=buttons
            )
        elif content_type == "video_note":
            await callback.message.delete()
            await bot.send_video_note(
                callback.from_user.id,
                content["video_note"],
                reply_markup=buttons
            )
        elif content_type == "sticker":
            await callback.message.delete()
            await bot.send_sticker(
                callback.from_user.id,
                content["sticker"],
                reply_markup=buttons
            )
        elif content_type == "animation":
            await callback.message.delete()
            caption = f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{content.get('caption', '')}"
            await bot.send_animation(
                callback.from_user.id,
                content["animation"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=buttons
            )
        elif content_type == "location":
            await callback.message.delete()
            await bot.send_location(
                callback.from_user.id,
                content["latitude"],
                content["longitude"],
                reply_markup=buttons
            )
        elif content_type == "contact":
            await callback.message.delete()
            await bot.send_contact(
                callback.from_user.id,
                content["phone_number"],
                content["first_name"],
                last_name=content.get("last_name"),
                reply_markup=buttons
            )
        elif content_type == "media_group":
            await callback.message.delete()
            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            media_list = []
            for i, media_item in enumerate(state["media_group"]):
                if media_item["type"] == "photo":
                    from aiogram.types import InputMediaPhoto
                    media = InputMediaPhoto(
                        media=media_item["media"],
                        caption=f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª—å–±–æ–º–∞ ({i+1}/{len(state['media_group'])})</b>\n\n{media_item.get('caption', '')}" if i == 0 else media_item.get('caption', ''),
                        parse_mode="HTML" if i == 0 else None
                    )
                elif media_item["type"] == "video":
                    from aiogram.types import InputMediaVideo
                    media = InputMediaVideo(
                        media=media_item["media"],
                        caption=f"üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª—å–±–æ–º–∞ ({i+1}/{len(state['media_group'])})</b>\n\n{media_item.get('caption', '')}" if i == 0 else media_item.get('caption', ''),
                        parse_mode="HTML" if i == 0 else None
                    )
                media_list.append(media)
            
            await bot.send_media_group(callback.from_user.id, media_list)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            if buttons:
                await bot.send_message(
                    callback.from_user.id,
                    "üëÜ <i>–ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É –≤ –∞–ª—å–±–æ–º–µ</i>",
                    parse_mode="HTML",
                    reply_markup=buttons
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_send")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data="broadcast_buttons")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ])
        
        await bot.send_message(
            callback.from_user.id,
            "üéØ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤!</b>\n\n"
            "‚òùÔ∏è –í—ã—à–µ –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "üîò –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n"
            "üì§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>",
            parse_mode="HTML",
            reply_markup=confirm_keyboard
        )
        
    except Exception as e:
        logging.error(f"Error creating broadcast preview: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
            ])
        )

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
async def finish_media_group_after_delay(user_id, media_group_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    await asyncio.sleep(3)
    
    if user_id not in broadcast_state:
        return
        
    state = broadcast_state[user_id]
    if state.get("media_group_id") != media_group_id:
        return
        
    if state.get("type") == "media_group" and len(state.get("media_group", [])) > 0:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        state["step"] = "buttons"
        
        try:
            await bot.send_message(
                user_id,
                f"üì∏ <b>–ê–ª—å–±–æ–º –≥–æ—Ç–æ–≤!</b>\n\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(state['media_group'])}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –∞–ª—å–±–æ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                parse_mode="HTML",
                reply_markup=get_broadcast_buttons_keyboard(state.get("selected_buttons", set()))
            )
        except Exception as e:
            logging.error(f"Error finishing media group: {e}")

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ ---
# addfilm_state[user_id] = { 'step': 'key'|'file_id'|'title'|'aliases'|'poster', 'data': {...} }
addfilm_state = {}
addserial_state = {}
tech_support_state = {}  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ

# --- –†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞ ---
TTSAVE_BOT_SPAM = ''

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã ---
# ad_waiting_state[user_id] = { 'movie_key': str, 'timestamp': float }
ad_waiting_state = {}

# –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–ø—Ä—è–º–∞—è - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ—Ç –∫–ª–∏–∫–æ–≤)
AD_LINK = "https://zmgig.com/g/zm0bbusas0a5d14b5688f9ed9c6b58/"

# –°–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–æ–≤ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–æ–º–µ–Ω:
# AD_TRACKER_URL = "https://your-server.com/track/"
AD_TRACKER_URL = None  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–ø–æ–∏—Å–∫ + —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º) ===
def get_gratitude_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat=""),
            InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin_start"),
        ]
    ])

# === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ===
async def periodic_gratitude_broadcast(bot: Bot, interval_hours: int = 5):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ stats['users']."""
    while True:
        users = list(set(stats.get("users", []) or []))
        if users:
            text = (
                "üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É."
            )
            for uid in users:
                try:
                    await bot.send_message(int(uid), text, reply_markup=get_gratitude_keyboard())
                    await asyncio.sleep(0.05)  # –ª—ë–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
                except Exception:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–ø–Ω—É–ª–∏ –±–æ—Ç–∞)
                    continue
        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await asyncio.sleep(max(1, int(interval_hours * 3600)))

# === –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å–º–æ–≤ ===
WATCH_HINTS = [
    "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.",
    "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä.",
    "–¢–∞–ø–Ω–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å ‚Äî –Ω–∞—á–Ω—ë–º!",
    "–ñ–º–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏!",
    "–í—ã–±–µ—Ä–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å.",
    "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å."
]

def get_watch_hint() -> str:
    try:
        return random.choice(WATCH_HINTS)
    except Exception:
        return WATCH_HINTS[0]

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤ ===
def format_time_remaining(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"

def get_movie_limit_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ —Ñ–∏–ª—å–º–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="refresh_movie_limit")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_system")]
    ])

def get_episode_limit_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ —Å–µ—Ä–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="refresh_episode_limit")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_system")]
    ])

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ ===
def get_all_available_series() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"""
    series_list = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã
    hardcoded_series = [
        {"key": "rm", "title": "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏", "description": "—Å–µ—Ä–∏–∞–ª"},
        {"key": "phf", "title": "–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±", "description": "—Å–µ—Ä–∏–∞–ª"},
        {"key": "lbsc", "title": "–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä‚Äë–ö–æ—Ç", "description": "—Å–µ—Ä–∏–∞–ª"},
        {"key": "irh", "title": "–ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ", "description": "—Å–µ—Ä–∏–∞–ª"},
        {"key": "wnd", "title": "–£—ç–Ω—Å–¥—ç–π (2022)", "description": "—Å–µ—Ä–∏–∞–ª"},
        {"key": "loki", "title": "–õ–æ–∫–∏ (2021)", "description": "—Å–µ—Ä–∏–∞–ª"}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        from db import load_all_series
        db_series = load_all_series()
        for series in db_series:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–∏–∞–ª –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            if not any(s["key"] == series["key"] for s in hardcoded_series):
                series_list.append({
                    "key": series["key"],
                    "title": series["title"],
                    "description": "—Å–µ—Ä–∏–∞–ª"
                })
    except Exception as e:
        logging.exception(f"[get_all_available_series] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –ë–î: {e}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ—Ä–∏–∞–ª—ã
    all_series = hardcoded_series + series_list
    return all_series


async def send_episode_to_user(callback, series_key: str, season: int, episode: int, is_auto_first_episode: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    try:
        from storage import get_cached_episode
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        user_id = callback.from_user.id
        episode_key = f"{series_key}_{season}_{episode}"
        selected_quality = "1080p"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if user_id in user_episode_qualities and episode_key in user_episode_qualities[user_id]:
            selected_quality = user_episode_qualities[user_id][episode_key]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if selected_quality == "1080p":
            # –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            episode_data = get_cached_episode(series_key, season, episode)
            if not episode_data:
                logging.warning(f"[send_episode_to_user] –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {series_key} S{season}E{episode}")
                return
            file_id = episode_data['file_id']
            file_type = episode_data['type']
        else:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã episode_qualities
            file_id = get_episode_quality_file_id(series_key, season, episode, selected_quality)
            if not file_id:
                # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ
                episode_data = get_cached_episode(series_key, season, episode)
                if not episode_data:
                    logging.warning(f"[send_episode_to_user] –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {series_key} S{season}E{episode}")
                    return
                file_id = episode_data['file_id']
                file_type = episode_data['type']
                selected_quality = "1080p"
            else:
                file_type = "video"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
        series_titles = {
            "rm": "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏",
            "lbsc": "–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä –ö–æ—Ç", 
            "phf": "–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±",
            "wnd": "–£—ç–Ω—Å–¥—ç–π (2022)",
            "irh": "–ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ",
            "loki": "–õ–æ–∫–∏ (2021)"
        }
        
        series_title = series_titles.get(series_key, series_key.upper())
        caption = f"<b>üé¨ –°–µ—Ä–∏—è {episode}</b>\n<b>–°–µ–∑–æ–Ω {season}</b>\n{series_title}\n<b>–ö–∞—á–µ—Å—Ç–≤–æ: {selected_quality}</b>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–µ—Ä–∏–∏
        share_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data=f"dynamic_episode_{series_key}_{season}_{episode}")],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é
        if file_type == 'video':
            await callback.message.answer_video(
                video=file_id,
                caption=caption,
                parse_mode="HTML",
                reply_markup=share_keyboard
            )
        else:
            await callback.message.answer_document(
                document=file_id,
                caption=caption,
                parse_mode="HTML",
                reply_markup=share_keyboard
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–µ —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é)
        if not is_auto_first_episode:
            try:
                from db import add_content_view
                episode_key = f"{series_key}_{season}_{episode}"
                add_content_view(callback.from_user.id, 'episode', episode_key)
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤ —Ü–µ–ª–æ–º
                add_content_view(callback.from_user.id, 'series', series_key)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–∏–∏ {series_key} S{season}E{episode}: {e}")
        
        logging.info(f"[send_episode_to_user] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ—Ä–∏—è: {series_key} S{season}E{episode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        
    except Exception as e:
        logging.exception(f"[send_episode_to_user] –û—à–∏–±–∫–∞: {e}")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–µ—Ä–∏–∞–ª–æ–≤ ===
async def show_series_navigation(callback: CallbackQuery, series_key: str, season: int = None, episode: int = None) -> bool:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–µ—Ä–∏–∞–ª—É, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ."""
    try:
        user_id = callback.from_user.id
        is_action = season is not None or episode is not None
        logging.info(f"[NAV_START] user={user_id}, series={series_key}, season={season}, episode={episode}, is_action={is_action}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        from storage import get_cached_series_data, get_cached_episode
        from db import load_all_series

        # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∞
        cache_data = get_cached_series_data(series_key)
        series_episodes = cache_data['episodes']
        available_seasons = cache_data['available_seasons']

        if not series_episodes:
            await callback.answer("–î–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç–ø–∏–∑–æ–¥—ã.", show_alert=True)
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ (–º–æ–∂–Ω–æ —Ç–æ–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º)
        all_db_series = load_all_series()
        series_info = next((s for s in all_db_series if s['key'] == series_key), None)
        title = series_info['title'] if series_info else series_key.upper()
        callback_prefix = f"dynamic_episode_{series_key}"

        target_season = season if season in available_seasons else available_seasons[0]
        target_episode = episode if episode is not None else 1
        
        logging.info(f"[NAV_TARGET] –¶–µ–ª—å: S{target_season}E{target_episode}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏
        episode_data = get_cached_episode(series_key, target_season, target_episode)

        if not episode_data:
            available_in_season = [ep for ep in series_episodes if ep['season'] == target_season]
            if available_in_season:
                episode_data = sorted(available_in_season, key=lambda x: x['episode'])[0]
                target_episode = episode_data['episode']
                logging.warning(f"[NAV_FALLBACK] –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–∑—è–ª–∏ –ø–µ—Ä–≤—É—é –≤ —Å–µ–∑–æ–Ω–µ: S{target_season}E{target_episode}")
            else:
                episode_data = sorted(series_episodes, key=lambda x: (x['season'], x['episode']))[0]
                target_season = episode_data['season']
                target_episode = episode_data['episode']
                logging.error(f"[NAV_FALLBACK] –í —Å–µ–∑–æ–Ω–µ –Ω–µ—Ç —Å–µ—Ä–∏–π. –í–∑—è–ª–∏ –ø–µ—Ä–≤—É—é –≤ —Å–µ—Ä–∏–∞–ª–µ: S{target_season}E{target_episode}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º episode_data –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        episode_key = f"{series_key}_{target_season}_{target_episode}"
        if user_id not in user_episode_qualities:
            user_episode_qualities[user_id] = {}
        
        selected_quality = user_episode_qualities[user_id].get(episode_key, "1080p")
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ 1080p, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π file_id
        if selected_quality != "1080p":
            quality_file_id = get_episode_quality_file_id(series_key, target_season, target_episode, selected_quality)
            if quality_file_id:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é episode_data —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º file_id
                episode_data = episode_data.copy()
                episode_data['file_id'] = quality_file_id
                episode_data['type'] = 'video'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ - —ç—Ç–æ –≤–∏–¥–µ–æ
                logging.info(f"[NAV_QUALITY] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ {selected_quality} –¥–ª—è S{target_season}E{target_episode}")
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –±–∞–∑–æ–≤–æ–µ
                user_episode_qualities[user_id][episode_key] = "1080p"
                selected_quality = "1080p"
                logging.warning(f"[NAV_QUALITY] –ö–∞—á–µ—Å—Ç–≤–æ {selected_quality} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ 1080p")

        season_buttons = []
        if len(available_seasons) > 1:
            current_season_index = available_seasons.index(target_season)
            prev_season = available_seasons[current_season_index - 1]
            next_season = available_seasons[(current_season_index + 1) % len(available_seasons)]
            season_buttons.extend([
                InlineKeyboardButton(text="‚óÄ", callback_data=f"series_nav_{series_key}_{prev_season}"),
                InlineKeyboardButton(text=f"–°–µ–∑–æ–Ω {target_season}", callback_data="noop"),
                InlineKeyboardButton(text="‚ñ∂", callback_data=f"series_nav_{series_key}_{next_season}")
            ])
        else:
            season_buttons.append(InlineKeyboardButton(text=f"–°–µ–∑–æ–Ω {target_season}", callback_data="noop"))
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–∏–π –≤ —Å–µ–∑–æ–Ω–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        episodes_in_season = sorted([ep['episode'] for ep in series_episodes if ep['season'] == target_season])
        episode_buttons = []
        row = []
        for ep_num in episodes_in_season:
            text = f"[ {ep_num} ]" if ep_num == target_episode else str(ep_num)
            row.append(InlineKeyboardButton(text=text, callback_data=f"{callback_prefix}_{target_season}_{ep_num}"))
            if len(row) == 5:
                episode_buttons.append(row)
                row = []
        if row: episode_buttons.append(row)

        from keyboards import BACK_TO_MAIN_MENU_BUTTON
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å–µ—Ä–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        from db import is_in_favorites
        user_id = callback.from_user.id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if series_key == "lbsc":
            check_key = f"lbsc_{target_season}_{target_episode}"
            content_type = "lbsc_series"
        else:
            check_key = f"{series_key}_{target_season}_{target_episode}"
            content_type = "series"
        
        is_favorited = is_in_favorites(user_id, content_type, check_key)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if is_favorited:
            favorite_button = [InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{check_key}")]
        else:
            favorite_button = [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{series_key}_fav_{target_season}_{target_episode}")]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        quality_text = f"–ö–∞—á–µ—Å—Ç–≤–æ: {selected_quality}"
        
        quality_button = [InlineKeyboardButton(text=quality_text, callback_data=f"quality_{series_key}_{target_season}_{target_episode}")]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è" –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        random_episode_button = [InlineKeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è", callback_data=f"random_episode_{series_key}")]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[season_buttons] + episode_buttons + [favorite_button] + [quality_button] + [random_episode_button] + [BACK_TO_MAIN_MENU_BUTTON])

        caption = f"<b>{title}</b>\n–°–µ–∑–æ–Ω {target_season} ‚Ä¢ –°–µ—Ä–∏—è {target_episode}\n\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"

        # –ü–†–û–í–ï–†–ö–ê –ï–î–ò–ù–û–ì–û –õ–ò–ú–ò–¢–ê –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–∏–∏, –Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏)
        is_admin = user_id in ADMIN_IDS
        is_premium = is_premium_user(user_id)
        logging.info(f"[NAV_LIMIT_CHECK] user_id={user_id}, is_action={is_action}, is_admin={is_admin}, is_premium={is_premium}")
        
        if is_action and not is_admin and not is_premium:
            daily_content = get_user_daily_content_count(user_id)
            logging.info(f"[NAV] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª {daily_content} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞")
            
            if daily_content > DAILY_CONTENT_LIMIT:
                from db import get_time_until_limit_reset
                reset_time = get_time_until_limit_reset(user_id, 'episode')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π —Ç–∏–ø –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                hours = reset_time // 3600
                minutes = (reset_time % 3600) // 60
                
                time_text = ""
                if hours > 0:
                    time_text += f"{hours} —á. "
                if minutes > 0:
                    time_text += f"{minutes} –º–∏–Ω."
                if not time_text:
                    time_text = "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
                
                limit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_content_limit")],
                    [InlineKeyboardButton(text="üíé –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="ref_system")],
                    [BACK_TO_MAIN_MENU_BUTTON]
                ])
                
                await callback.edit_message_text(
                    f"üö´ <b>–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–≤—ã—à–µ–Ω</b>\n\n"
                    f"üé¨ –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ <b>{daily_content}/{DAILY_CONTENT_LIMIT}</b> –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n\n"
                    f"‚è∞ –õ–∏–º–∏—Ç —Å–±—Ä–æ—Å–∏—Ç—Å—è —á–µ—Ä–µ–∑: <b>{time_text}</b>\n\n"
                    f"üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!",
                    parse_mode="HTML",
                    reply_markup=limit_keyboard
                )
                return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if is_action:
            current_media_id = None
            if callback.message.video:
                current_media_id = callback.message.video.file_id
            elif callback.message.document:
                current_media_id = callback.message.document.file_id

            # –ï—Å–ª–∏ file_id –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –º–µ–Ω—è–µ–º –º–µ–¥–∏–∞
            if episode_data and episode_data['file_id'] != current_media_id:
                try:
                    media_type = 'video' if episode_data['type'] == 'video' else 'document'
                    media = InputMediaVideo(media=episode_data['file_id'], caption=caption, parse_mode="HTML") if media_type == 'video' else InputMediaDocument(media=episode_data['file_id'], caption=caption, parse_mode="HTML")
                    await callback.message.edit_media(media=media, reply_markup=keyboard)
                    logging.info(f"[NAV_EDIT_MEDIA] –ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è S{target_season}E{target_episode}")
                except TelegramBadRequest as e:
                    if "message is not modified" in e.message:
                        logging.warning("[NAV_EDIT_MEDIA] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫.")
                    else:
                        logging.exception(f"[NAV_EDIT_MEDIA] –û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
                except Exception as e:
                    logging.exception(f"[NAV_EDIT_MEDIA] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
            # –ï—Å–ª–∏ file_id —Ç–æ—Ç –∂–µ, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            else:
                try:
                    await callback.message.edit_caption(caption=caption, reply_markup=keyboard, parse_mode="HTML")
                    logging.info(f"[NAV_EDIT_CAPTION] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è S{target_season}E{target_episode}")
                except TelegramBadRequest as e:
                    if "message is not modified" in e.message:
                        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        try:
                            await callback.message.edit_reply_markup(reply_markup=keyboard)
                            logging.info(f"[NAV_EDIT_KEYBOARD] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è S{target_season}E{target_episode}")
                        except Exception as keyboard_error:
                            logging.exception(f"[NAV_EDIT_KEYBOARD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_error}")
                    else:
                        logging.exception(f"[NAV_EDIT_CAPTION] –û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
                except Exception as e:
                    logging.exception(f"[NAV_EDIT_CAPTION] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            if episode_data['type'] == 'video':
                await bot.send_video(callback.message.chat.id, video=episode_data['file_id'], caption=caption, reply_markup=keyboard, parse_mode="HTML")
            else:
                await bot.send_document(callback.message.chat.id, document=episode_data['file_id'], caption=caption, reply_markup=keyboard, parse_mode="HTML")
            logging.info(f"[NAV_SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ S{target_season}E{target_episode}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è)
            # –ü–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Å—á–∏—Ç–∞–µ–º
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–µ—Ä–∏–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–µ—Ä–≤–∞—è —Å–µ—Ä–∏—è
        if is_action:
            try:
                from db import add_content_view
                episode_key = f"{series_key}_{target_season}_{target_episode}"
                add_content_view(user_id, 'episode', episode_key)
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤ —Ü–µ–ª–æ–º
                add_content_view(user_id, 'series', series_key)
                logging.info(f"[NAV] –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∏ {episode_key} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–∏–∏ {series_key} S{target_season}E{target_episode}: {e}")
        
        return True

    except Exception as e:
        logging.exception(f"[NAV_ERROR] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
        return False

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ===
async def handle_addserial_state(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞"""
    user_id = message.from_user.id
    state = addserial_state[user_id]
    step = state['step']
    data = state['data']
    
    if step == 'key':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
        key = message.text.strip()
        import re
        if not re.match(r'^[a-zA-Z0-9_]+$', key):
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
            ])
            await message.reply("‚ùå –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['key'] = key
        state['step'] = 'title'
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
        ])
        await message.reply(
            "üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–æ–∫–∏ (2021), –ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤, –í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ</i>",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
    
    elif step == 'title':
        title = message.text.strip()
        if not title:
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
            ])
            await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['title'] = title
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        data['aliases'] = generate_keywords_from_title(title)
        state['step'] = 'poster'
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
        ])
        await message.reply(
            "üñº <b>–ü–æ—Å—Ç–µ—Ä —Å–µ—Ä–∏–∞–ª–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –ø–æ—Å—Ç–µ—Ä–∞ —Å–µ—Ä–∏–∞–ª–∞:\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com/poster.jpg</i>",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
    
    elif step == 'poster':
        poster_url = message.text.strip()
        if not poster_url.startswith(('http://', 'https://')):
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
            ])
            await message.reply("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['poster_url'] = poster_url
        state['step'] = 'confirm'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        keywords_text = ", ".join(data['aliases'][:5]) + ("..." if len(data['aliases']) > 5 else "")
        
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="addserial_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel")]
        ])
        
        await message.reply(
            f"üì∫ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞</b>\n\n"
            f"üîë <b>–ö–ª—é—á:</b> <code>{data['key']}</code>\n"
            f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"üñº <b>–ü–æ—Å—Ç–µ—Ä:</b> {poster_url}\n"
            f"üè∑ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {keywords_text}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
            parse_mode="HTML",
            reply_markup=keyboard
        )

async def handle_addfilm_state(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    user_id = message.from_user.id
    state = addfilm_state[user_id]
    step = state['step']
    data = state['data']
    
    if step == 'key':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
        key = message.text.strip()
        import re
        if not re.match(r'^[a-zA-Z0-9_]+$', key):
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
            ])
            await message.reply("‚ùå –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['key'] = key
        state['step'] = 'title'
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
        ])
        await message.reply(
            "üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–≤–∞—Ç–∞—Ä: –ü—É—Ç—å –≤–æ–¥—ã, –ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª</i>",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
    
    elif step == 'title':
        title = message.text.strip()
        if not title:
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
            ])
            await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['title'] = title
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        data['aliases'] = generate_keywords_from_title(title)
        state['step'] = 'file_id'
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
        ])
        await message.reply(
            "üì± <b>File ID –≤–∏–¥–µ–æ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /fileid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id:",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
    
    elif step == 'file_id':
        file_id = None
        if message.video:
            file_id = message.video.file_id
        elif message.document:
            file_id = message.document.file_id
        elif message.text:
            file_id = message.text.strip()
        
        if not file_id:
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
            ])
            await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ file_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['file_id'] = file_id
        state['step'] = 'poster'
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
        ])
        await message.reply(
            "üñº <b>–ü–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞:\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com/poster.jpg</i>",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )
    
    elif step == 'poster':
        poster_url = message.text.strip()
        if not poster_url.startswith(('http://', 'https://')):
            from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
            ])
            await message.reply("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=cancel_keyboard)
            return
        
        data['poster_url'] = poster_url
        state['step'] = 'confirm'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        keywords_text = ", ".join(data['aliases'][:5]) + ("..." if len(data['aliases']) > 5 else "")
        
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="addfilm_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel")]
        ])
        
        await message.reply(
            f"üé¨ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞</b>\n\n"
            f"üîë <b>–ö–ª—é—á:</b> <code>{data['key']}</code>\n"
            f"üì∫ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"üì± <b>File ID:</b> <code>{data['file_id']}</code>\n"
            f"üñº <b>–ü–æ—Å—Ç–µ—Ä:</b> {poster_url}\n"
            f"üè∑ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {keywords_text}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_media_file_id –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞


def _build_stats_text():
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞"""
    stats = get_user_stats()
    
    text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['active_users']}</code>

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{stats['total_messages']}</code>

üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.datetime.now(timezone(timedelta(hours=3))).strftime('%d.%m.%Y %H:%M')} (–ö–∏–µ–≤)"""
    
    return text


def _stats_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh")]])


@router.message(Command("test"))
async def test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

@router.message(Command("stats"))
async def show_stats(message: Message):
    user_id = message.from_user.id
    print(f"DEBUG: User {user_id} trying to use /stats command")
    print(f"DEBUG: ADMIN_IDS = {ADMIN_IDS}")
    print(f"DEBUG: User in admins: {user_id in ADMIN_IDS}")
    
    if user_id not in ADMIN_IDS:
        await message.reply(f"‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n–í–∞—à ID: {user_id}\n–ê–¥–º–∏–Ω IDs: {ADMIN_IDS}")
        return
    
    try:
        text = _build_stats_text()
        stats_keyboard = _stats_keyboard()
        await message.reply(text, parse_mode="HTML", reply_markup=stats_keyboard)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        print(f"ERROR in stats command: {e}")

# === –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID ===
@router.message(Command("myid"))
async def cmd_myid(message: Message):
    try:
        await message.reply(f"–í–∞—à Telegram ID: <code>{message.from_user.id}</code>", parse_mode="HTML")
    except Exception:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID")

# === –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ===
@router.message(Command("ref"))
async def referral_system(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referrals_count = get_referrals_count(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = BOT_USERNAME.replace("@", "")
    referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"<b><i>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.</i></b>\n\n"
        f"–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π <b>–ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Åü§ë</b>\n\n"
        f"<b><i>–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –¥–∞—ë—Ç:</i></b>\n"
        f"<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ;\n"
        f"–î–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ \"–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º\" –∏ \"–°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è\" –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞;\n"
        f"–ê —Ç–∞–∫–∂–µ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–Ω–∏–∫ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –∫–Ω–æ–ø–∫–µ \"–ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\"</b>\n\n"
        f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{referral_link}</code>\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π: {referrals_count}/2\n\n"
        f"<b><i>–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–≥—É!</i></b>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# === –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@router.message(Command("puser"))
async def cmd_premium_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    premium_users = get_premium_users()
    
    if not premium_users:
        text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–æ–º.\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º!"
    else:
        text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
        for i, user in enumerate(premium_users, 1):
            name = user['first_name'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if user['last_name']:
                name += f" {user['last_name']}"
            text += f"{i}. {name} ({user['referrals_count']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@router.message(Command("saved"))
async def cmd_saved(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
    if user_id not in ADMIN_IDS and not is_premium_user(user_id):
        await message.answer(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
            "üí∞ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å.",
            parse_mode="HTML"
        )
        return
    
    from db import get_favorites_count
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–π
    movies_count = get_favorites_count(user_id, 'movie')
    lbsc_series_count = get_favorites_count(user_id, 'lbsc_series')
    other_series_count = get_favorites_count(user_id, 'series')
    series_count = lbsc_series_count + other_series_count
    
    text = (
        "<b><i>‚≠êÔ∏è–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏:</i></b>\n\n"
        f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–ª—å–º–æ–≤: {movies_count}\n"
        f"<b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–∏–π: {series_count}</b>\n\n"
        "<b><i>–ù–∞–∂–º–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏:</i></b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã", callback_data="favorites_movies"),
            InlineKeyboardButton(text="üì∫ –°–µ—Ä–∏–∏", callback_data="favorites_series")
        ],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.message(Command("reffull"))
async def cmd_reffull(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 2 —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å)"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = 2 –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
    from db import get_conn
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(
                "UPDATE users SET referrals_count = 2 WHERE user_id = %s",
                (user_id,)
            )
            conn.commit()
        conn.close()
        
        await message.answer(
            "‚úÖ <b>–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "ü§ë –í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 2 —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n"
            "‚≠êÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /saved\n"
            "üé¨ –î–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        logging.error(f"Error setting referrals for admin {user_id}: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ===
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language_code=message.from_user.language_code
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if user_id not in ADMIN_IDS and not is_premium_user(user_id):
        if not await check_subscription(user_id):
            text, keyboard = get_subscription_message(user_id)
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        
        if start_param.startswith("ref_"):
            try:
                referrer_id = int(start_param.replace("ref_", ""))
                logging.info(f"Processing referral: user {user_id} from referrer {referrer_id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                referral_result = add_referral(referrer_id, user_id)
                logging.info(f"Referral result for {user_id} from {referrer_id}: {referral_result}")
                
                if referral_result:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    is_premium = is_premium_user(user_id)
                    premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
                    
                    await message.answer(
                        "üéâ –ü—Ä–∏–≤–µ—Ç!üëã\n\n"
                        "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
                        f"{premium_status}\n\n"
                        "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
                        "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>",
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        referrals_count = get_referrals_count(referrer_id)
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 2 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                        if referrals_count >= 2:
                            activate_premium(referrer_id, 7, f"referral_{referrer_id}")
                            await bot.send_message(
                                referrer_id,
                                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
                                f"ü§ë <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ 7 –¥–Ω–µ–π!</b>\n\n"
                                f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                                f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
                                f"‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                                f"‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏",
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_message(
                                referrer_id,
                                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å: {2 - referrals_count} —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 7 –¥–Ω–µ–π",
                                parse_mode="HTML"
                            )
                    except Exception as e:
                        logging.error(f"Error notifying referrer {referrer_id}: {e}")
                    
                    return
                else:
                    # –†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    logging.info(f"Referral failed for {user_id} from {referrer_id} - already exists or error")
                    
                    is_premium = is_premium_user(user_id)
                    premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
                    
                    await message.answer(
                        "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
                        "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
                        f"{premium_status}\n\n"
                        "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
                        "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>\n\n"
                        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ.</i>",
                        parse_mode="HTML",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                    
            except ValueError:
                # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                pass
    
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    is_premium = is_premium_user(user_id)
    premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
        "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
        f"{premium_status}\n\n"
        "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )

# === –ö–æ–º–∞–Ω–¥–∞ /clearreferrals ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
@router.message(Command("clearreferrals"))
async def cmd_clear_referrals(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    from db import clear_all_referrals
    
    try:
        result = clear_all_referrals()
        if result:
            await message.reply("‚úÖ –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"Error in clearreferrals command: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /clearlimit ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–π –ª–∏–º–∏—Ç –∑–∞ 24 —á–∞—Å–∞ ===
@router.message(Command("clearlimit"))
async def cmd_clear_limit(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–π –∑–∞ 24 —á–∞—Å–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    from db import clear_user_daily_limits, get_user_daily_movies_count, get_user_daily_episodes_count
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –æ—á–∏—Å—Ç–∫–∏
    movies_before = get_user_daily_movies_count(user_id)
    episodes_before = get_user_daily_episodes_count(user_id)
    
    try:
        result = clear_user_daily_limits(user_id)
        if result:
            text = (
                "‚úÖ <b>–õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>\n\n"
                f"üé¨ –§–∏–ª—å–º–æ–≤ –±—ã–ª–æ: {movies_before}/2\n"
                f"üì∫ –°–µ—Ä–∏–π –±—ã–ª–æ: {episodes_before}/4\n\n"
                "üÜï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏!"
            )
            await message.reply(text, parse_mode="HTML")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–∏–º–∏—Ç–∞.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"Error in clearlimit command: {e}")

# === –£—Ç–∏–ª–∏—Ç–∞: /fileid ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å file_id –ª—é–±–æ–≥–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ ===
@router.message(Command("fileid"))
async def cmd_fileid(message: Message):
    if not (message.video or message.document or message.photo):
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ ‚Äî –≤–æ–∑—å–º—ë–º –∏–∑ reply_to_message
        m = message.reply_to_message
    else:
        m = message
    fid = None
    media_type = None
    try:
        if m and getattr(m, 'video', None):
            fid = m.video.file_id
            media_type = 'video'
        elif m and getattr(m, 'document', None):
            fid = m.document.file_id
            media_type = 'document'
        elif m and getattr(m, 'photo', None):
            fid = m.photo[-1].file_id
            media_type = 'photo'
    except Exception:
        fid = None
    if fid:
        await message.reply(f"–¢–∏–ø: <b>{media_type}</b>\nfile_id:\n<code>{fid}</code>", parse_mode="HTML")
    else:
        await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–¥–∏–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–æ–π /fileid")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ===
def generate_keywords_from_title(title: str) -> list:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    import re
    
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', title.lower())
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–æ–±', 'the', 'and', 'or', 'of', 'to', 'in', 'a', 'an'}
    keywords = [word for word in words if len(word) >= 3 and word not in stop_words]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    keywords.append(title.lower())
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    return list(set(keywords))[:10]

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é (/addfilm) ===
@router.message(Command("addfilm"))
async def addfilm_start(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ –ø–æ—à–∞–≥–æ–≤–æ–µ –º–µ–Ω—é"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    addfilm_state[message.from_user.id] = {
        'step': 'key',
        'data': {}
    }
    
    from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addfilm_cancel_step")]
    ])
    
    await message.reply(
        "üé¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞</b>\n\n"
        "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Ñ–∏–ª—å–º–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: avatar, avengers_endgame, matrix</i>",
        parse_mode="HTML",
        reply_markup=cancel_keyboard
    )

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é (/addserial) ===
@router.message(Command("addserial"))
async def addserial_start(message: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ –ø–æ—à–∞–≥–æ–≤–æ–µ –º–µ–Ω—é"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    addserial_state[message.from_user.id] = {
        'step': 'key',
        'data': {}
    }
    
    from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="addserial_cancel_step")]
    ])
    
    await message.reply(
        "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞</b>\n\n"
        "üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: loki, breaking_bad, game_of_thrones</i>",
        parse_mode="HTML",
        reply_markup=cancel_keyboard
    )

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —Ñ–∏–ª—å–º—É (/addka) ===
@router.message(Command("addka"))
async def addka_command(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∏–ª—å–º—É.
    –§–æ—Ä–º–∞—Ç: /addka <movie_key> <file_id> <quality>
    –ü—Ä–∏–º–µ—Ä: /addka avatar BAADBAADqwADBREAAR4W9wABHg 720p
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 3:
        help_text = (
            "<b>üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —Ñ–∏–ª—å–º—É</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addka &lt;movie_key&gt; &lt;file_id&gt; &lt;quality&gt;</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>movie_key</code> - –∫–ª—é—á —Ñ–∏–ª—å–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ <code>file_id</code> - Telegram file_id –≤–∏–¥–µ–æ\n"
            "‚Ä¢ <code>quality</code> - –∫–∞—á–µ—Å—Ç–≤–æ (720p, 480p, 4K –∏ —Ç.–¥.)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addka avatar BAADBAADqwADBREAAR4W9wABHg 720p</code>\n\n"
            "<i>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∏–ª—å–º—É.</i>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    movie_key = args[0].strip()
    file_id = args[1].strip()
    quality = args[2].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    from db import movie_exists, add_movie_quality
    if not movie_exists(movie_key):
        await message.reply(f"‚ùå –§–∏–ª—å–º —Å –∫–ª—é—á–æ–º <code>{movie_key}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode="HTML")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)
    file_type = "video"
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = add_movie_quality(movie_key, quality, file_id, file_type)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            from storage import _load_to_memory
            _load_to_memory()
            
            await message.reply(
                f"‚úÖ <b>–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üé¨ –§–∏–ª—å–º: <code>{movie_key}</code>\n"
                f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: <code>{quality}</code>\n"
                f"üÜî File ID: <code>{file_id[:20]}...</code>\n\n"
                f"üîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω",
                parse_mode="HTML"
            )
            logging.info(f"[ADDKA] –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ {quality} –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie_key}, –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            
    except Exception as e:
        logging.error(f"[ADDKA] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —ç–ø–∏–∑–æ–¥—É (/addkaepisode) ===
@router.message(Command("addkaepisode"))
async def addkaepisode_command(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É.
    –§–æ—Ä–º–∞—Ç: /addkaepisode <series_key> <season> <episode> <file_id> <quality>
    –ü—Ä–∏–º–µ—Ä: /addkaepisode loki 1 5 BAADBAADqwADBREAAR4W9wABHg 720p
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 5:
        help_text = (
            "<b>üì∫ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —ç–ø–∏–∑–æ–¥—É</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addkaepisode &lt;series_key&gt; &lt;season&gt; &lt;episode&gt; &lt;file_id&gt; &lt;quality&gt;</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>series_key</code> - –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ <code>season</code> - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n"
            "‚Ä¢ <code>episode</code> - –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞\n"
            "‚Ä¢ <code>file_id</code> - Telegram file_id –≤–∏–¥–µ–æ\n"
            "‚Ä¢ <code>quality</code> - –∫–∞—á–µ—Å—Ç–≤–æ (720p, 480p, 4K –∏ —Ç.–¥.)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addkaepisode loki 1 5 BAADBAADqwADBREAAR4W9wABHg 720p</code>\n\n"
            "<i>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ø–∏–∑–æ–¥—É.</i>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    series_key = args[0].strip()
    try:
        season = int(args[1].strip())
        episode = int(args[2].strip())
    except ValueError:
        await message.reply("‚ùå –ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ –∏ —ç–ø–∏–∑–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    file_id = args[3].strip()
    quality = args[4].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not episode_exists(series_key, season, episode):
        await message.reply(
            f"‚ùå –≠–ø–∏–∑–æ–¥ <code>{series_key}</code> S{season}E{episode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", 
            parse_mode="HTML"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)
    file_type = "video"
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = add_episode_quality(series_key, season, episode, quality, file_id, file_type)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            from storage import _load_to_memory
            _load_to_memory()
            
            await message.reply(
                f"‚úÖ <b>–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üì∫ –°–µ—Ä–∏–∞–ª: <code>{series_key}</code>\n"
                f"üé¨ –≠–ø–∏–∑–æ–¥: S{season}E{episode}\n"
                f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: <code>{quality}</code>\n"
                f"üÜî File ID: <code>{file_id[:20]}...</code>\n\n"
                f"üîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω",
                parse_mode="HTML"
            )
            logging.info(f"[ADDKAEPISODE] –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ {quality} –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ {series_key} S{season}E{episode}, –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            
    except Exception as e:
        logging.error(f"[ADDKAEPISODE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (/reload_cache) ===
@router.message(Command("reload_cache"))
async def reload_cache_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    try:
        from storage import _load_to_memory
        _load_to_memory()
        await message.reply("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        logging.info("[RELOAD_CACHE] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
        logging.error(f"[RELOAD_CACHE] –û—à–∏–±–∫–∞: {e}")

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ ===

@router.message(Command("addadmin"))
async def add_admin_command(message: Message):
    """–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –§–æ—Ä–º–∞—Ç: /addadmin <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        return
    
    target_user_id = None
    target_user = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id
    else:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text or ""
        parts = text.split()
        
        if len(parts) < 2:
            await message.reply(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "‚Ä¢ <code>/addadmin &lt;user_id&gt;</code>\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π <code>/addadmin</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/addadmin 123456789</code>",
                parse_mode="HTML"
            )
            return
        
        try:
            target_user_id = int(parts[1])
        except ValueError:
            await message.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    
    if target_user_id == message.from_user.id:
        await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    from db import is_admin_in_db, add_admin
    if is_admin_in_db(target_user_id):
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    username = target_user.username if target_user else None
    first_name = target_user.first_name if target_user else None
    last_name = target_user.last_name if target_user else None
    
    success = add_admin(
        user_id=target_user_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        granted_by=message.from_user.id
    )
    
    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ ADMIN_IDS –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        ADMIN_IDS.add(target_user_id)
        
        user_info = f"@{username}" if username else f"ID: {target_user_id}"
        if first_name:
            user_info += f" ({first_name}"
            if last_name:
                user_info += f" {last_name}"
            user_info += ")"
        
        await message.reply(
            f"‚úÖ <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
            f"üÜî <b>User ID:</b> <code>{target_user_id}</code>\n"
            f"üëë <b>–í—ã–¥–∞–ª:</b> @{message.from_user.username or 'admin'}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîÑ –ü—Ä–∞–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await bot.send_message(
                target_user_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í–∞–º –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ –±–æ—Ç–µ!\n"
                f"üëë –í—ã–¥–∞–ª: @{message.from_user.username or 'admin'}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã.",
                parse_mode="HTML"
            )
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
        
        logging.info(f"[ADD_ADMIN] {message.from_user.id} –≤—ã–¥–∞–ª –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤")


@router.message(Command("removeadmin"))
async def remove_admin_command(message: Message):
    """–ó–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –§–æ—Ä–º–∞—Ç: /removeadmin <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        return
    
    target_user_id = None
    target_user = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id
    else:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        text = message.text or ""
        parts = text.split()
        
        if len(parts) < 2:
            await message.reply(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "‚Ä¢ <code>/removeadmin &lt;user_id&gt;</code>\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π <code>/removeadmin</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/removeadmin 123456789</code>",
                parse_mode="HTML"
            )
            return
        
        try:
            target_user_id = int(parts[1])
        except ValueError:
            await message.reply("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    
    if target_user_id == message.from_user.id:
        await message.reply("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É —É —Å–∞–º–æ–≥–æ —Å–µ–±—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    from db import is_admin_in_db, remove_admin
    if not is_admin_in_db(target_user_id):
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        return
    
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = remove_admin(target_user_id)
    
    if success:
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ ADMIN_IDS –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        ADMIN_IDS.discard(target_user_id)
        
        user_info = f"@{target_user.username}" if target_user and target_user.username else f"ID: {target_user_id}"
        if target_user and target_user.first_name:
            user_info += f" ({target_user.first_name}"
            if target_user.last_name:
                user_info += f" {target_user.last_name}"
            user_info += ")"
        
        await message.reply(
            f"‚úÖ <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã!</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
            f"üÜî <b>User ID:</b> <code>{target_user_id}</code>\n"
            f"üëë <b>–û—Ç–æ–∑–≤–∞–ª:</b> @{message.from_user.username or 'admin'}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîÑ –ü—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            await bot.send_message(
                target_user_id,
                f"‚ö†Ô∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                f"–í–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ –±–æ—Ç–µ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.\n"
                f"üëë –û—Ç–æ–∑–≤–∞–ª: @{message.from_user.username or 'admin'}",
                parse_mode="HTML"
            )
        except Exception:
            pass
        
        logging.info(f"[REMOVE_ADMIN] {message.from_user.id} –æ—Ç–æ–∑–≤–∞–ª –∞–¥–º–∏–Ω–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤")


@router.message(Command("admins"))
async def list_admins_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    from db import get_all_admins
    admins = get_all_admins()
    
    if not admins:
        await message.reply("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
        return
    
    text = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤</b>\n\n"
    
    for i, admin in enumerate(admins, 1):
        user_info = f"@{admin['username']}" if admin['username'] else f"ID: {admin['user_id']}"
        if admin['first_name']:
            user_info += f" ({admin['first_name']}"
            if admin['last_name']:
                user_info += f" {admin['last_name']}"
            user_info += ")"
        
        granted_date = admin['granted_at'].strftime('%d.%m.%Y %H:%M') if admin['granted_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        text += f"{i}. {user_info}\n"
        text += f"   üÜî <code>{admin['user_id']}</code>\n"
        text += f"   üìÖ {granted_date}\n"
        if admin['granted_by']:
            text += f"   üëë –í—ã–¥–∞–ª: <code>{admin['granted_by']}</code>\n"
        text += "\n"
    
    text += f"üìä <b>–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤:</b> {len(admins)}"
    
    await message.reply(text, parse_mode="HTML")

# === –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ (/addepisode) ===
@router.message(Command("addepisode"))
async def addepisode_quick(message: Message):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
    –§–æ—Ä–º–∞—Ç: /addepisode <show> <season> <episode> <file_id> [type]
    –ü—Ä–∏–º–µ—Ä: /addepisode rm 8 11 BAADBAADqwADBREAAR4W9wABHg video
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 4:
        help_text = (
            "<b>üì∫ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addepisode &lt;show&gt; &lt;season&gt; &lt;episode&gt; &lt;file_id&gt; [type]</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>show</code> - –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ (rm, phf, lbsc, irh, wnd, loki)\n"
            "‚Ä¢ <code>season</code> - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n"
            "‚Ä¢ <code>episode</code> - –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞\n"
            "‚Ä¢ <code>file_id</code> - Telegram file_id –≤–∏–¥–µ–æ\n"
            "‚Ä¢ <code>type</code> - —Ç–∏–ø —Ñ–∞–π–ª–∞ (video/document, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addepisode rm 8 11 BAADBAADqwADBREAAR4W9wABHg video</code>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    show = args[0].lower()
    try:
        season = int(args[1])
        episode = int(args[2])
    except ValueError:
        await message.reply("‚ùå –°–µ–∑–æ–Ω –∏ —ç–ø–∏–∑–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    file_id = args[3]
    file_type = args[4] if len(args) > 4 else "video"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from db import load_all_series
    try:
        all_series = load_all_series()
        valid_shows = {series['key'] for series in all_series}
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        valid_shows.update({"rm", "phf", "lbsc", "irh", "wnd", "loki"})
        
        if show not in valid_shows:
            available_shows = ', '.join(sorted(valid_shows))
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª '{show}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_shows}")
            return
    except Exception as e:
        logging.exception(f"[addepisode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–∏–∞–ª–æ–≤: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä—ã–º —Å–µ—Ä–∏–∞–ª–∞–º
        valid_shows = {"rm", "phf", "lbsc", "irh", "wnd", "loki"}
        if show not in valid_shows:
            await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_shows)}")
            return
    
    try:
        from db import bulk_upsert_episodes
        from storage import _load_to_memory
        
        logging.info(f"[addepisode] –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥: show={show}, season={season}, episode={episode}, file_id={file_id}, type={file_type}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥ –≤ –ë–î
        bulk_upsert_episodes([(show, season, episode, file_id, file_type)])
        logging.info(f"[addepisode] –≠–ø–∏–∑–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ
        from db import load_all_episodes, upsert_season_counts
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
        all_episodes = load_all_episodes()
        episodes_in_season = []
        for ep in all_episodes:
            if ep['show'] == show and ep['season'] == season:
                episodes_in_season.append(ep['episode'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ–∑–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤)
        episodes_count = len(episodes_in_season)
        if episodes_count > 0:
            upsert_season_counts([(show, season, episodes_count)])
            logging.info(f"[addepisode] –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Å–µ–∑–æ–Ω–∞: {show} —Å–µ–∑–æ–Ω {season} = {episodes_count} —ç–ø–∏–∑–æ–¥–æ–≤ (—ç–ø–∏–∑–æ–¥—ã: {sorted(episodes_in_season)})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _load_to_memory()
        logging.info(f"[addepisode] –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ø–∏–∑–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        # –í—Å–µ —Å–µ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ show_series_navigation
        
        episode_found = False
        season_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from db import load_all_episodes, load_all_seasons
        try:
            episodes = load_all_episodes(show)
            seasons = load_all_seasons(show)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
            episode_found = any(ep['season'] == season and ep['episode'] == episode for ep in episodes)
            season_count = len([s for s in seasons if s['season'] == season])
            if season_count == 0 and episodes:
                # –ï—Å–ª–∏ —Å–µ–∑–æ–Ω–æ–≤ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ seasons, —Å—á–∏—Ç–∞–µ–º –ø–æ —ç–ø–∏–∑–æ–¥–∞–º
                season_episodes = [ep for ep in episodes if ep['season'] == season]
                season_count = len(season_episodes)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–∏–∏ {show} {season}x{episode}: {e}")
            episode_found = False
            season_count = 0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–ª—è {show}: {e}")
            await query.answer([], cache_time=1, is_personal=True)
            return
        else:
            # –î–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                from db import get_conn
                import psycopg2
                conn = get_conn()
                try:
                    with conn.cursor() as cur:
                        cur.execute(
                            "SELECT COUNT(*) FROM episodes WHERE show = %s AND season = %s AND episode = %s",
                            (show, season, episode)
                        )
                        if cur.fetchone()[0] > 0:
                            episode_found = True
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ
                            cur.execute(
                                "SELECT episodes_count FROM seasons WHERE show = %s AND season = %s",
                                (show, season)
                            )
                            result = cur.fetchone()
                            season_count = result[0] if result else episodes_count
                finally:
                    conn.close()
            except Exception as db_e:
                logging.exception(f"[addepisode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ø–∏–∑–æ–¥–∞ –≤ –ë–î: {db_e}")
                episode_found = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        series_title = show.upper()
        try:
            all_series = load_all_series()
            for series in all_series:
                if series['key'] == show:
                    series_title = series['title']
                    break
        except Exception:
            pass
        
        if episode_found:
            await message.reply(
                f"‚úÖ –≠–ø–∏–∑–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"üì∫ –°–µ—Ä–∏–∞–ª: <b>{series_title}</b> ({show})\n"
                f"üìÖ –°–µ–∑–æ–Ω: <b>{season}</b> (–≤—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: <b>{season_count}</b>)\n"
                f"üé¨ –≠–ø–∏–∑–æ–¥: <b>{episode}</b>\n"
                f"üìÅ –¢–∏–ø: <b>{file_type}</b>\n\n"
                f"üîç –≠–ø–∏–∑–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n"
                f"üìä –°—á–µ—Ç—á–∏–∫ —Å–µ–∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:\n"
                f"üì∫ –°–µ—Ä–∏–∞–ª: <b>{series_title}</b> ({show})\n"
                f"üìÖ –°–µ–∑–æ–Ω: <b>{season}</b>\n"
                f"üé¨ –≠–ø–∏–∑–æ–¥: <b>{episode}</b>\n"
                f"üìÅ –¢–∏–ø: <b>{file_type}</b>\n\n"
                f"‚ú® –î–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ —ç–ø–∏–∑–æ–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logging.exception(f"[addepisode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞: {e}")

# === –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ (/addseason) ===
@router.message(Command("addseason"))
async def addseason_quick(message: Message):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.
    –§–æ—Ä–º–∞—Ç: /addseason <show> <season> <episodes_count>
    –ü—Ä–∏–º–µ—Ä: /addseason rm 8 10
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 3:
        help_text = (
            "<b>üì∫ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addseason &lt;show&gt; &lt;season&gt; &lt;episodes_count&gt;</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>show</code> - –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ (rm, phf, lbsc, irh, wnd, loki)\n"
            "‚Ä¢ <code>season</code> - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n"
            "‚Ä¢ <code>episodes_count</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addseason rm 8 10</code>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    show = args[0].lower()
    try:
        season = int(args[1])
        episodes_count = int(args[2])
    except ValueError:
        await message.reply("‚ùå –°–µ–∑–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å show
    valid_shows = {"rm", "phf", "lbsc", "irh", "wnd", "loki"}
    if show not in valid_shows:
        await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_shows)}")
        return
    
    try:
        from db import upsert_season_counts
        from storage import _load_to_memory
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ –≤ –ë–î
        upsert_season_counts([(show, season, episodes_count)])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _load_to_memory()
        
        await message.reply(
            f"‚úÖ –°–µ–∑–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üì∫ –°–µ—Ä–∏–∞–ª: <b>{show}</b>\n"
            f"üìÖ –°–µ–∑–æ–Ω: <b>{season}</b>\n"
            f"üé¨ –≠–ø–∏–∑–æ–¥–æ–≤: <b>{episodes_count}</b>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞: {e}")

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ (/addizm) ===
@router.message(Command("addizm"))
async def edit_episode(message: Message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ file_id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞.
    –§–æ—Ä–º–∞—Ç: /addizm <show> <season> <episode> <new_file_id> [type]
    –ü—Ä–∏–º–µ—Ä: /addizm phf 5 9 BAADBAADqwADBREAAR4W9wABHg video
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 4:
        help_text = (
            "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addizm &lt;show&gt; &lt;season&gt; &lt;episode&gt; &lt;new_file_id&gt; [type]</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>show</code> - –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ (rm, phf, lbsc, irh, wnd, loki)\n"
            "‚Ä¢ <code>season</code> - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n"
            "‚Ä¢ <code>episode</code> - –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞\n"
            "‚Ä¢ <code>new_file_id</code> - –Ω–æ–≤—ã–π Telegram file_id\n"
            "‚Ä¢ <code>type</code> - —Ç–∏–ø —Ñ–∞–π–ª–∞ (video/document, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addizm phf 5 9 BAADBAADqwADBREAAR4W9wABHg video</code>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    show = args[0].lower()
    try:
        season = int(args[1])
        episode = int(args[2])
    except ValueError:
        await message.reply("‚ùå –°–µ–∑–æ–Ω –∏ —ç–ø–∏–∑–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    new_file_id = args[3]
    file_type = args[4] if len(args) > 4 else "video"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å show
    valid_shows = {"rm", "phf", "lbsc", "irh", "wnd", "loki"}
    if show not in valid_shows:
        await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_shows)}")
        return
    
    try:
        from db import bulk_upsert_episodes
        from storage import _load_to_memory
        import psycopg2
        from config import DATABASE_URL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ø–∏–∑–æ–¥
        conn = psycopg2.connect(DATABASE_URL)
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT file_id FROM episodes WHERE show = %s AND season = %s AND episode = %s",
                    (show, season, episode)
                )
                existing = cur.fetchone()
                
                if not existing:
                    await message.reply(
                        f"‚ùå –≠–ø–∏–∑–æ–¥ {show.upper()} S{season}E{episode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addepisode –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞."
                    )
                    return
                
                old_file_id = existing[0]
        finally:
            conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥ –≤ –ë–î
        bulk_upsert_episodes([(show, season, episode, new_file_id, file_type)])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _load_to_memory()
        
        await message.reply(
            f"‚úÖ –≠–ø–∏–∑–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
            f"üì∫ –°–µ—Ä–∏–∞–ª: <b>{show.upper()}</b>\n"
            f"üìÖ –°–µ–∑–æ–Ω: <b>{season}</b>\n"
            f"üé¨ –≠–ø–∏–∑–æ–¥: <b>{episode}</b>\n"
            f"üìÅ –¢–∏–ø: <b>{file_type}</b>\n\n"
            f"üîÑ –°—Ç–∞—Ä—ã–π file_id: <code>{old_file_id[:30]}...</code>\n"
            f"üÜï –ù–æ–≤—ã–π file_id: <code>{new_file_id[:30]}...</code>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞: {e}")

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (/addizmfilm) ===
@router.message(Command("addizmfilm"))
async def edit_movie(message: Message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ file_id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∏–ª—å–º–∞.
    –§–æ—Ä–º–∞—Ç: /addizmfilm <movie_key> <new_file_id> [type]
    –ü—Ä–∏–º–µ—Ä: /addizmfilm avatar_2009 BAADBAADqwADBREAAR4W9wABHg video
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 2:
        help_text = (
            "<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addizmfilm &lt;movie_key&gt; &lt;new_file_id&gt; [type]</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>movie_key</code> - –∫–ª—é—á —Ñ–∏–ª—å–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ <code>new_file_id</code> - –Ω–æ–≤—ã–π Telegram file_id\n"
            "‚Ä¢ <code>type</code> - —Ç–∏–ø —Ñ–∞–π–ª–∞ (video/document, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addizmfilm avatar_2009 BAADBAADqwADBREAAR4W9wABHg video</code>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    movie_key = args[0]
    new_file_id = args[1]
    file_type = args[2] if len(args) > 2 else "video"
    
    try:
        import psycopg2
        from config import DATABASE_URL
        from storage import _load_to_memory
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª—å–º
        conn = psycopg2.connect(DATABASE_URL)
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "SELECT file_id FROM movies WHERE key = %s",
                    (movie_key,)
                )
                existing = cur.fetchone()
                
                if not existing:
                    await message.reply(
                        f"‚ùå –§–∏–ª—å–º —Å –∫–ª—é—á–æ–º '{movie_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addmovie –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞."
                    )
                    return
                
                old_file_id = existing[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º file_id –∏ type —Ñ–∏–ª—å–º–∞
                cur.execute(
                    "UPDATE movies SET file_id = %s, type = %s WHERE key = %s",
                    (new_file_id, file_type, movie_key)
                )
                conn.commit()
                
        finally:
            conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _load_to_memory()
        
        await message.reply(
            f"‚úÖ –§–∏–ª—å–º –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
            f"üé¨ –ö–ª—é—á: <b>{movie_key}</b>\n"
            f"üìÅ –¢–∏–ø: <b>{file_type}</b>\n\n"
            f"üîÑ –°—Ç–∞—Ä—ã–π file_id: <code>{old_file_id[:30]}...</code>\n"
            f"üÜï –ù–æ–≤—ã–π file_id: <code>{new_file_id[:30]}...</code>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

# === –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤ (/addepisodes) ===
@router.message(Command("addepisodes"))
async def addepisodes_bulk(message: Message):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
    –§–æ—Ä–º–∞—Ç: /addepisodes <show> <season> <start_episode>-<end_episode> <file_id1,file_id2,...> [type]
    –ü—Ä–∏–º–µ—Ä: /addepisodes rm 8 1-3 file1,file2,file3 video
    """
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text else []
    if len(args) < 4:
        help_text = (
            "<b>üì∫ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b>\n"
            "<code>/addepisodes &lt;show&gt; &lt;season&gt; &lt;start&gt;-&lt;end&gt; &lt;file_ids&gt; [type]</code>\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <code>show</code> - –∫–ª—é—á —Å–µ—Ä–∏–∞–ª–∞ (rm, phf, lbsc, irh, wnd, loki)\n"
            "‚Ä¢ <code>season</code> - –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞\n"
            "‚Ä¢ <code>start-end</code> - –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ø–∏–∑–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5)\n"
            "‚Ä¢ <code>file_ids</code> - file_id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "‚Ä¢ <code>type</code> - —Ç–∏–ø —Ñ–∞–π–ª–∞ (video/document, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é video)\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/addepisodes rm 8 1-3 file1,file2,file3 video</code>"
        )
        await message.reply(help_text, parse_mode="HTML")
        return
    
    show = args[0].lower()
    try:
        season = int(args[1])
    except ValueError:
        await message.reply("‚ùå –°–µ–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ø–∏–∑–æ–¥–æ–≤
    episode_range = args[2]
    if '-' not in episode_range:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start-end (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-5)")
        return
    
    try:
        start_ep, end_ep = map(int, episode_range.split('-'))
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤")
        return
    
    # –ü–∞—Ä—Å–∏–º file_id
    file_ids = args[3].split(',')
    file_type = args[4] if len(args) > 4 else "video"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    expected_count = end_ep - start_ep + 1
    if len(file_ids) != expected_count:
        await message.reply(
            f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ file_id ({len(file_ids)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "
            f"–∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ø–∏–∑–æ–¥–æ–≤ ({expected_count})"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å show
    valid_shows = {"rm", "phf", "lbsc", "irh", "wnd", "loki"}
    if show not in valid_shows:
        await message.reply(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_shows)}")
        return
    
    try:
        from db import bulk_upsert_episodes, upsert_season_counts
        from storage import _load_to_memory
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        episodes_data = []
        for i, file_id in enumerate(file_ids):
            episode_num = start_ep + i
            episodes_data.append((show, season, episode_num, file_id.strip(), file_type))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥—ã –≤ –ë–î
        bulk_upsert_episodes(episodes_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
        upsert_season_counts([(show, season, end_ep)])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        _load_to_memory()
        
        await message.reply(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(episodes_data)} —ç–ø–∏–∑–æ–¥–æ–≤:\n"
            f"üì∫ –°–µ—Ä–∏–∞–ª: <b>{show}</b>\n"
            f"üìÖ –°–µ–∑–æ–Ω: <b>{season}</b>\n"
            f"üé¨ –≠–ø–∏–∑–æ–¥—ã: <b>{start_ep}-{end_ep}</b>\n"
            f"üìÅ –¢–∏–ø: <b>{file_type}</b>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–æ–≤: {e}")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ–±—â–µ–º callback-—Ö–µ–Ω–¥–ª–µ—Ä–µ) ===

@router.message(Command("broadcast"))
async def broadcast(message: Message):
    logging.info(f"User {message.from_user.id} tried to use /broadcast command.")
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_state[message.from_user.id] = {
        "step": "content",
        "media_group": [],
        "selected_buttons": set(),
        "button_configs": []
    }
    
    text = (
        "<b>üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "üìù ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üñº ‚Ä¢ –§–æ—Ç–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
        "üé• ‚Ä¢ –í–∏–¥–µ–æ (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n"
        "üìÑ ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "üéµ ‚Ä¢ –ê—É–¥–∏–æ\n"
        "üé§ ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "üìç ‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è\n"
        "üìû ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "üé≤ ‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã\n"
        "üéÆ ‚Ä¢ GIF –∞–Ω–∏–º–∞—Ü–∏–∏\n\n"
        "üí° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–¥–∏–∞ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –∞–ª—å–±–æ–º–æ–º\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ URL –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
        "<i>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.</i>"
    )
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
    ])
    await message.reply(text, parse_mode="HTML", reply_markup=cancel_keyboard)

# –î–æ–±–∞–≤–ª—è—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_id –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Message, CallbackQuery

class SaveUserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        user_id = None
        if isinstance(event, Message) and event.from_user:
            user_id = str(event.from_user.id)
        elif isinstance(event, CallbackQuery) and event.from_user:
            user_id = str(event.from_user.id)
        if user_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from db import save_user
            try:
                if isinstance(event, Message):
                    save_user(
                        user_id=int(user_id),
                        username=event.from_user.username,
                        first_name=event.from_user.first_name,
                        last_name=event.from_user.last_name,
                        language_code=event.from_user.language_code,
                        is_bot=event.from_user.is_bot
                    )
                elif isinstance(event, CallbackQuery):
                    optimized_save_user(
                        int(user_id),
                        event.from_user.username,
                        event.from_user.first_name,
                        event.from_user.last_name,
                        event.from_user.language_code,
                        event.from_user.is_bot
                    )
            except Exception:
                pass
        return await handler(event, data)

@router.callback_query()
async def handle_callback(callback: CallbackQuery):
    data = callback.data
    user_id = str(callback.from_user.id)
    user_id_int = int(user_id)
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç)
    try:
        optimized_save_user(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.last_name,
            callback.from_user.language_code,
            callback.from_user.is_bot
        )
    except Exception:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∫—Ä–æ–º–µ —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–Ω–æ–ø–∫–∏ "–£–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º—É", –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if data not in ["check_subscription", "ref_system"] and user_id_int not in ADMIN_IDS and not is_premium_user(user_id_int):
        if not await check_subscription(user_id_int):
            text, keyboard = get_subscription_message(user_id_int)
            try:
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            except Exception:
                await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            await callback.answer("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    if data == "check_subscription":
        if await check_subscription(user_id_int):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            save_user(
                user_id=user_id_int,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                language_code=callback.from_user.language_code
            )
            
            await callback.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", show_alert=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
            is_premium = is_premium_user(user_id_int)
            premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            text = (
                "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
                "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
                f"{premium_status}\n\n"
                "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
                "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>"
            )
            try:
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())
            except Exception:
                await callback.message.answer(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())
        else:
            await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    if data == "refresh_movie_limit":
        from db import get_user_daily_content_count, get_time_until_limit_reset
        user_id_int = int(user_id)
        
        daily_content = get_user_daily_content_count(user_id_int)
        
        # –ê–¥–º–∏–Ω—ã –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
        if user_id_int in ADMIN_IDS or is_premium_user(user_id_int) or daily_content <= DAILY_CONTENT_LIMIT:
            await callback.answer("‚úÖ –õ–∏–º–∏—Ç —Å–Ω—è—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä.", show_alert=True)
            try:
                await callback.message.delete()
            except Exception:
                pass
        else:
            time_remaining = get_time_until_limit_reset(user_id_int, 'movie')
            time_str = format_time_remaining(time_remaining)
            
            limit_text = (
                "–õ–ò–ú–ò–¢ –ù–ê –ö–û–ù–¢–ï–ù–¢ –í –î–ï–ù–¨!\n\n"
                f"‚è∞ –õ–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑ {time_str}\n\n"
                f"–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∏—à—å {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞.\n\n"
                "–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ–≥–æ 2 –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: /ref"
            )
            
            keyboard = get_movie_limit_keyboard(user_id_int)
            
            try:
                await callback.message.edit_text(
                    text=limit_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            await callback.answer(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {time_str}")
        return
    
    if data == "refresh_episode_limit":
        from db import get_user_daily_content_count, get_time_until_limit_reset
        user_id_int = int(user_id)
        
        daily_content = get_user_daily_content_count(user_id_int)
        
        # –ê–¥–º–∏–Ω—ã –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
        if user_id_int in ADMIN_IDS or is_premium_user(user_id_int) or daily_content <= DAILY_CONTENT_LIMIT:
            await callback.answer("‚úÖ –õ–∏–º–∏—Ç —Å–Ω—è—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä.", show_alert=True)
            try:
                await callback.message.delete()
            except Exception:
                pass
        else:
            time_remaining = get_time_until_limit_reset(user_id_int, 'movie')
            time_str = format_time_remaining(time_remaining)
            
            limit_text = (
                f"–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –≤ {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞.\n\n"
                f"‚è∞ –õ–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑: {time_str}\n\n"
                f"–£ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç –Ω–∞ {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞. "
                "–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π –≤ –±–æ—Ç –ø–æ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: /ref"
            )
            
            keyboard = get_episode_limit_keyboard(user_id_int)
            
            try:
                await callback.message.edit_text(
                    text=limit_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            await callback.answer(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {time_str}")
        return
    
    if data == "refresh_content_limit":
        from db import get_user_daily_content_count, get_time_until_limit_reset
        user_id_int = int(user_id)
        
        daily_content = get_user_daily_content_count(user_id_int)
        
        # –ê–¥–º–∏–Ω—ã –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
        if user_id_int in ADMIN_IDS or is_premium_user(user_id_int) or daily_content <= DAILY_CONTENT_LIMIT:
            await callback.answer("‚úÖ –õ–∏–º–∏—Ç —Å–Ω—è—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä.", show_alert=True)
            try:
                await callback.message.delete()
            except Exception:
                pass
        else:
            time_remaining = get_time_until_limit_reset(user_id_int, 'movie')
            time_str = format_time_remaining(time_remaining)
            
            limit_text = (
                f"–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç –≤ {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞.\n\n"
                f"‚è∞ –õ–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑: {time_str}\n\n"
                f"–£ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç –Ω–∞ {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞. "
                "–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π –≤ –±–æ—Ç –ø–æ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: /ref"
            )
            
            keyboard = get_episode_limit_keyboard(user_id_int)
            
            try:
                await callback.message.edit_text(
                    text=limit_text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            await callback.answer(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {time_str}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –≤ –±–æ—Ç–µ" –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
    if data.startswith("movie_play_"):
        movie_key = data.replace("movie_play_", "")
        from storage import MOVIES
        from db import should_show_ad, increment_movie_view, get_user_daily_movies_count, get_time_until_limit_reset
        import time
        
        meta = MOVIES.get(movie_key)
        user_id_int = int(user_id)
        
        logging.info(f"[MOVIE_PLAY] –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å–º–∞: {movie_key}, user: {user_id}")
        
        if not meta:
            logging.warning(f"[MOVIE_PLAY] –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {movie_key}")
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–†–û–í–ï–†–ö–ê –ï–î–ò–ù–û–ì–û –õ–ò–ú–ò–¢–ê –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        if user_id_int not in ADMIN_IDS and not is_premium_user(user_id_int):
            daily_content = get_user_daily_content_count(user_id_int)
            logging.info(f"[MOVIE_PLAY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª {daily_content} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞")
            
            if daily_content > DAILY_CONTENT_LIMIT:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞
                time_remaining = get_time_until_limit_reset(user_id_int, 'movie')
                time_str = format_time_remaining(time_remaining)
                
                limit_text = (
                    "–õ–ò–ú–ò–¢ –ù–ê –ö–û–ù–¢–ï–ù–¢ –í –î–ï–ù–¨!\n\n"
                    f"‚è∞ –õ–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑ {time_str}\n\n"
                    f"–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∏—à—å {DAILY_CONTENT_LIMIT} –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ 24 —á–∞—Å–∞.\n\n"
                    "–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ–≥–æ 2 –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: /ref"
                )
                
                keyboard = get_movie_limit_keyboard(user_id_int)
                
                try:
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=limit_text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: {e}")
                
                await callback.answer("‚õîÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ 24 —á–∞—Å–∞!", show_alert=True)
                return
        
        try:
            file_id = meta.get('file_id')
            if not file_id:
                logging.error(f"[MOVIE_PLAY] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_key}")
                await callback.answer("‚ùå –§–∞–π–ª —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å file_id
            if not _is_valid_file_id(file_id):
                logging.error(f"[MOVIE_PLAY] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π file_id –¥–ª—è —Ñ–∏–ª—å–º–∞: {movie_key}")
                await callback.answer("‚ùå –§–∞–π–ª —Ñ–∏–ª—å–º–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return
            
            # –†–ï–ö–õ–ê–ú–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê
            # if should_show_ad(user_id_int, ad_frequency=2):
            #     # –ö–æ–¥ —Ä–µ–∫–ª–∞–º—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
            #     pass
            
            logging.info(f"[MOVIE_PLAY] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–∞ {movie_key}, type: {meta.get('type')}, file_id: {file_id[:20]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            from db import is_in_favorites
            is_favorited = is_in_favorites(user_id, 'movie', movie_key)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            if is_favorited:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}")
            else:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_key}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å–º–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            caption = f"<b>{meta['title']}</b>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞
            from db import get_movie_qualities
            qualities = get_movie_qualities(movie_key)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = []
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
            current_quality = meta.get('quality', '1080p')
            if len(qualities) > 1:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤ - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                keyboard_buttons.append([InlineKeyboardButton(text=f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: {current_quality}", callback_data=f"quality_select_{movie_key}")])
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                keyboard_buttons.append([InlineKeyboardButton(text=f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: {current_quality}", callback_data=f"quality_info_{movie_key}")])
            
            keyboard_buttons.append([fav_button])
            keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            if meta.get('type') == 'video':
                try:
                    await bot.send_video(
                        chat_id=callback.message.chat.id,
                        video=file_id,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                except Exception as video_error:
                    logging.error(f"[MOVIE_PLAY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {movie_key}: {video_error}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å –≤–∏–¥–µ–æ
                    try:
                        await bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=file_id,
                            caption=caption,
                            parse_mode="HTML",
                            reply_markup=keyboard
                        )
                    except Exception as doc_error:
                        logging.error(f"[MOVIE_PLAY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {movie_key}: {doc_error}")
                        await callback.answer("‚ùå –§–∞–π–ª —Ñ–∏–ª—å–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                        return
            else:
                await bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=file_id,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            logging.info(f"[MOVIE_PLAY] –§–∏–ª—å–º {movie_key} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!)
            try:
                from db import add_content_view
                add_content_view(user_id_int, 'movie', movie_key)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞ {movie_key}: {e}")
            
            await callback.answer("üé¨ –§–∏–ª—å–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            logging.error(f"[MOVIE_PLAY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å–º–∞ {movie_key}: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞", show_alert=True)
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–∞
    if data.startswith("quality_select_"):
        movie_key = data.replace("quality_select_", "")
        logging.info(f"[QUALITY_SELECT] movie_key='{movie_key}'")
        
        from storage import MOVIES
        from db import get_movie_qualities
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user_id not in ADMIN_IDS:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
            pass
        
        meta = MOVIES.get(movie_key)
        if not meta:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            try:
                from storage import _load_to_memory
                _load_to_memory()
                meta = MOVIES.get(movie_key)
            except Exception as e:
                logging.error(f"[QUALITY_SELECT] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        if not meta:
            logging.error(f"[QUALITY_SELECT] –§–∏–ª—å–º '{movie_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(MOVIES.keys())[:10]}")
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
        qualities = get_movie_qualities(movie_key)
        logging.info(f"[QUALITY_SELECT] –ù–∞–π–¥–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è '{movie_key}': {len(qualities)} - {[q['quality'] for q in qualities]}")
        
        if len(qualities) <= 1:
            await callback.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
        quality_buttons = []
        for quality_info in qualities:
            quality = quality_info['quality']
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            current_quality = meta.get('quality', '1080p')
            if quality == current_quality:
                button_text = f"‚úÖ {quality}"
            else:
                button_text = f"üì± {quality}"
            
            quality_buttons.append([InlineKeyboardButton(
                text=button_text, 
                callback_data=f"quality_change_{movie_key}_{quality}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        quality_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"movie_play_{movie_key}")])
        
        quality_keyboard = InlineKeyboardMarkup(inline_keyboard=quality_buttons)
        
        try:
            await callback.message.edit_reply_markup(reply_markup=quality_keyboard)
            await callback.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        except Exception as e:
            logging.error(f"Error updating quality menu: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é")
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–∞
    if data.startswith("quality_change_"):
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É _
        data_without_prefix = data.replace("quality_change_", "")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (—ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–ª—é—á–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º)
        last_underscore = data_without_prefix.rfind("_")
        if last_underscore == -1:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        movie_key = data_without_prefix[:last_underscore]
        selected_quality = data_without_prefix[last_underscore + 1:]
        
        logging.info(f"[QUALITY_CHANGE] movie_key='{movie_key}', quality='{selected_quality}'")
        
        from storage import MOVIES
        from db import get_movie_quality_file_id
        
        meta = MOVIES.get(movie_key)
        if not meta:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            try:
                from storage import _load_to_memory
                _load_to_memory()
                meta = MOVIES.get(movie_key)
            except Exception as e:
                logging.error(f"[QUALITY_CHANGE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        if not meta:
            logging.error(f"[QUALITY_CHANGE] –§–∏–ª—å–º '{movie_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(MOVIES.keys())[:10]}")
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_file_id = get_movie_quality_file_id(movie_key, selected_quality)
        if not quality_file_id:
            logging.error(f"[QUALITY_CHANGE] –§–∞–π–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ '{selected_quality}' —Ñ–∏–ª—å–º–∞ '{movie_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –§–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫—ç—à–µ
        MOVIES[movie_key]['quality'] = selected_quality
        MOVIES[movie_key]['file_id'] = quality_file_id
        
        logging.info(f"[QUALITY_CHANGE] –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –¥–ª—è '{movie_key}': –∫–∞—á–µ—Å—Ç–≤–æ={selected_quality}, file_id={quality_file_id[:20]}...")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–ª—å–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: {selected_quality}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        try:
            from db import is_in_favorites
            is_favorited = is_in_favorites(user_id, 'movie', movie_key)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            if is_favorited:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}")
            else:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_key}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            caption = f"<b>{meta['title']}</b>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞
            from db import get_movie_qualities
            qualities = get_movie_qualities(movie_key)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = []
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            current_quality = selected_quality
            if len(qualities) > 1:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤ - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                keyboard_buttons.append([InlineKeyboardButton(text=f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: {current_quality}", callback_data=f"quality_select_{movie_key}")])
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                keyboard_buttons.append([InlineKeyboardButton(text=f"üì± –ö–∞—á–µ—Å—Ç–≤–æ: {current_quality}", callback_data=f"quality_info_{movie_key}")])
            
            keyboard_buttons.append([fav_button])
            keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if meta.get('type') == 'video':
                await callback.message.edit_media(
                    media=InputMediaVideo(
                        media=quality_file_id,
                        caption=caption,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_media(
                    media=InputMediaDocument(
                        media=quality_file_id,
                        caption=caption,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            
            logging.info(f"[QUALITY_CHANGE] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å–º–æ–º {movie_key}, –∫–∞—á–µ—Å—Ç–≤–æ {selected_quality}")
            
        except Exception as e:
            logging.error(f"[QUALITY_CHANGE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ fallback
            try:
                if meta.get('type') == 'video':
                    await bot.send_video(
                        chat_id=callback.message.chat.id,
                        video=quality_file_id,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await bot.send_document(
                        chat_id=callback.message.chat.id,
                        document=quality_file_id,
                        caption=caption,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                logging.info(f"[QUALITY_CHANGE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ fallback")
            except Exception as e2:
                logging.error(f"[QUALITY_CHANGE] –û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞", show_alert=True)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ)
    if data.startswith("quality_info_"):
        movie_key = data.replace("quality_info_", "")
        from storage import MOVIES
        
        meta = MOVIES.get(movie_key)
        if not meta:
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_quality = meta.get('quality', '1080p')
        await callback.answer(f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–æ: {current_quality}", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —ç–ø–∏–∑–æ–¥–æ–≤
    if data.startswith("quality_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: quality_series_season_episode
        parts = data.split("_")
        if len(parts) >= 4 and parts[0] == "quality":
            series_key = parts[1]
            try:
                season = int(parts[2])
                episode = int(parts[3])
            except ValueError:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return
            
            logging.info(f"[EPISODE_QUALITY] series={series_key}, season={season}, episode={episode}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
            qualities = get_episode_qualities(series_key, season, episode)
            
            # –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 1080p –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã episodes
            base_quality = "1080p"
            
            if not qualities:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
                await callback.answer(f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–æ: {base_quality}", show_alert=True)
                return
            
            # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            quality_buttons = []
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—á–µ—Å—Ç–≤ –≤–∫–ª—é—á–∞—è –±–∞–∑–æ–≤–æ–µ
            all_qualities = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 1080p
            all_qualities.append({'quality': base_quality, 'is_base': True})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
            for quality_info in qualities:
                all_qualities.append({'quality': quality_info['quality'], 'is_base': False})
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            quality_order = {'4K': 1, '1080p': 2, '720p': 3, '480p': 4, '360p': 5}
            all_qualities.sort(key=lambda x: quality_order.get(x['quality'], 99))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_int = callback.from_user.id
            episode_key = f"{series_key}_{season}_{episode}"
            current_selected_quality = "1080p"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if user_id_int in user_episode_qualities and episode_key in user_episode_qualities[user_id_int]:
                current_selected_quality = user_episode_qualities[user_id_int][episode_key]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for quality_item in all_qualities:
                quality = quality_item['quality']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                if quality == current_selected_quality:
                    if quality_item['is_base']:
                        button_text = f"‚úÖ {quality} (–æ—Å–Ω–æ–≤–Ω–æ–µ)"
                    else:
                        button_text = f"‚úÖ {quality}"
                else:
                    if quality_item['is_base']:
                        button_text = f"{quality} (–æ—Å–Ω–æ–≤–Ω–æ–µ)"
                    else:
                        button_text = f"{quality}"
                
                quality_buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"episode_quality_change_{series_key}_{season}_{episode}_{quality}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            quality_buttons.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", 
                callback_data=f"dynamic_episode_{series_key}_{season}_{episode}"
            )])
            
            quality_keyboard = InlineKeyboardMarkup(inline_keyboard=quality_buttons)
            
            try:
                await callback.message.edit_reply_markup(reply_markup=quality_keyboard)
                await callback.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ")
            except Exception as e:
                logging.error(f"Error updating episode quality menu: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é", show_alert=True)
            
            return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —ç–ø–∏–∑–æ–¥–∞
    if data.startswith("episode_quality_change_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: episode_quality_change_series_season_episode_quality
        data_without_prefix = data.replace("episode_quality_change_", "")
        parts = data_without_prefix.split("_")
        
        if len(parts) >= 4:
            series_key = parts[0]
            try:
                season = int(parts[1])
                episode = int(parts[2])
                selected_quality = "_".join(parts[3:])  # –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _
            except ValueError:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
                return
            
            logging.info(f"[EPISODE_QUALITY_CHANGE] series={series_key}, season={season}, episode={episode}, quality={selected_quality}")
            
            # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            if selected_quality == "1080p":
                # –ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã episodes
                from storage import get_cached_episode
                episode_data = get_cached_episode(series_key, season, episode)
                if not episode_data:
                    await callback.answer("‚ùå –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                quality_file_id = episode_data['file_id']
                file_type = episode_data['type']
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã episode_qualities
                quality_file_id = get_episode_quality_file_id(series_key, season, episode, selected_quality)
                if not quality_file_id:
                    await callback.answer("‚ùå –§–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                file_type = "video"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
            series_titles = {
                'loki': '–õ–æ–∫–∏',
                'wnd': '–£—ç–Ω—Å–¥—ç–π',
                'irh': '–î–æ–º –î—Ä–∞–∫–æ–Ω–∞',
                'lbsc': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑ –Ω–∞—Å'
            }
            series_title = series_titles.get(series_key, series_key.upper())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id_int = callback.from_user.id
            episode_key = f"{series_key}_{season}_{episode}"
            
            if user_id_int not in user_episode_qualities:
                user_episode_qualities[user_id_int] = {}
            
            user_episode_qualities[user_id_int][episode_key] = selected_quality
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
                series_titles = {
                    'loki': '–õ–æ–∫–∏',
                    'wnd': '–£—ç–Ω—Å–¥—ç–π',
                    'irh': '–î–æ–º –î—Ä–∞–∫–æ–Ω–∞',
                    'lbsc': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑ –Ω–∞—Å'
                }
                series_title = series_titles.get(series_key, series_key.upper())
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º caption
                caption = f"<b>{series_title}</b>\n–°–µ–∑–æ–Ω {season} ‚Ä¢ –°–µ—Ä–∏—è {episode}\n\n‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ show_series_navigation)
                from storage import get_cached_series_data
                cache_data = get_cached_series_data(series_key)
                available_seasons = cache_data['available_seasons']
                series_episodes = cache_data['episodes']
                
                # –ö–Ω–æ–ø–∫–∏ —Å–µ–∑–æ–Ω–æ–≤
                season_buttons = []
                if len(available_seasons) > 1:
                    current_season_index = available_seasons.index(season)
                    prev_season = available_seasons[current_season_index - 1]
                    next_season = available_seasons[(current_season_index + 1) % len(available_seasons)]
                    season_buttons.extend([
                        InlineKeyboardButton(text="‚óÄ", callback_data=f"series_nav_{series_key}_{prev_season}"),
                        InlineKeyboardButton(text=f"–°–µ–∑–æ–Ω {season}", callback_data="noop"),
                        InlineKeyboardButton(text="‚ñ∂", callback_data=f"series_nav_{series_key}_{next_season}")
                    ])
                else:
                    season_buttons.append(InlineKeyboardButton(text=f"–°–µ–∑–æ–Ω {season}", callback_data="noop"))
                
                # –ö–Ω–æ–ø–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤
                episodes_in_season = sorted([ep['episode'] for ep in series_episodes if ep['season'] == season])
                episode_buttons = []
                row = []
                callback_prefix = f"dynamic_episode_{series_key}"
                for ep_num in episodes_in_season:
                    text = f"[ {ep_num} ]" if ep_num == episode else str(ep_num)
                    row.append(InlineKeyboardButton(text=text, callback_data=f"{callback_prefix}_{season}_{ep_num}"))
                    if len(row) == 5:
                        episode_buttons.append(row)
                        row = []
                if row: episode_buttons.append(row)
                
                # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                from db import is_in_favorites
                if series_key == "lbsc":
                    check_key = f"lbsc_{season}_{episode}"
                    content_type = "lbsc_series"
                else:
                    check_key = f"{series_key}_{season}_{episode}"
                    content_type = "series"
                
                is_favorited = is_in_favorites(user_id_int, content_type, check_key)
                if is_favorited:
                    favorite_button = [InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{check_key}")]
                else:
                    favorite_button = [InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{series_key}_fav_{season}_{episode}")]
                
                # –ö–Ω–æ–ø–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                quality_text = f"–ö–∞—á–µ—Å—Ç–≤–æ: {selected_quality}"
                quality_button = [InlineKeyboardButton(text=quality_text, callback_data=f"quality_{series_key}_{season}_{episode}")]
                
                # –ö–Ω–æ–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Ä–∏–∏
                random_episode_button = [InlineKeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è", callback_data=f"random_episode_{series_key}")]
                
                # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                from keyboards import BACK_TO_MAIN_MENU_BUTTON
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[season_buttons] + episode_buttons + [favorite_button] + [quality_button] + [random_episode_button] + [BACK_TO_MAIN_MENU_BUTTON])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                if file_type == 'video':
                    media = InputMediaVideo(media=quality_file_id, caption=caption, parse_mode="HTML")
                else:
                    media = InputMediaDocument(media=quality_file_id, caption=caption, parse_mode="HTML")
                
                await callback.message.edit_media(media=media, reply_markup=keyboard)
                await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: {selected_quality}")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—á–µ—Å—Ç–≤–∞", show_alert=True)
            
            return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ" (–í–ê–†–ò–ê–ù–¢ –ë - callback)
    if data.startswith("ad_click_"):
        import time
        movie_key = data.replace("ad_click_", "")
        user_id_int = int(user_id)
        
        logging.info(f"[AD_CLICK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Å—ã–ª–∫—É")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª
        try:
            from db import mark_ad_clicked
            mark_ad_clicked(user_id_int)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–ª–∏–∫–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        if user_id_int in ad_waiting_state:
            ad_waiting_state[user_id_int]['clicked'] = True
            ad_waiting_state[user_id_int]['click_time'] = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–∫–ª–∞–º—É
        ad_message = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∫–ª–∞–º—É:"
        )
        
        ad_link_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∫–ª–∞–º—É", url=AD_LINK)],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"ad_continue_{movie_key}")]
        ])
        
        try:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=ad_message,
                parse_mode="HTML",
                reply_markup=ad_link_keyboard
            )
            await callback.answer("‚úÖ –ö–ª–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∫–ª–∞–º–æ–π: {e}")
            await callback.answer("‚úÖ –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä'")
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä" –ø–æ—Å–ª–µ —Ä–µ–∫–ª–∞–º—ã
    if data.startswith("ad_continue_"):
        import time
        movie_key = data.replace("ad_continue_", "")
        from storage import MOVIES
        from db import increment_movie_view, mark_ad_clicked
        
        user_id_int = int(user_id)
        
        logging.info(f"[AD_CONTINUE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞ {movie_key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id_int not in ad_waiting_state:
            await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ'", show_alert=True)
            return
        
        # –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–•–û–î–ê –ü–û –°–°–´–õ–ö–ï (–¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ô –ö–õ–ò–ö!)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†–ï–ê–õ–¨–ù–û –Ω–∞–∂–∞–ª callback –∫–Ω–æ–ø–∫—É
        if not ad_waiting_state[user_id_int].get('clicked', False):
            await callback.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ'",
                show_alert=True
            )
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—à–ª–æ —Ö–æ—Ç—è –±—ã 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        click_time = ad_waiting_state[user_id_int].get('click_time', 0)
        if time.time() - click_time < 2:
            remaining = int(2 - (time.time() - click_time))
            await callback.answer(
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ",
                show_alert=True
            )
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø–æ —Ä–µ–∫–ª–∞–º–µ
        try:
            mark_ad_clicked(user_id_int)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        ad_waiting_state.pop(user_id_int, None)
        
        meta = MOVIES.get(movie_key)
        
        if not meta:
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            file_id = meta.get('file_id')
            if not file_id:
                await callback.answer("‚ùå –§–∞–π–ª —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            from db import is_in_favorites
            is_favorited = is_in_favorites(user_id, 'movie', movie_key)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            if is_favorited:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}")
            else:
                fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_key}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å–º–∞
            caption = f"<b>{meta['title']}</b>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [fav_button],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
            
            if meta.get('type') == 'video':
                await bot.send_video(
                    chat_id=callback.message.chat.id,
                    video=file_id,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=file_id,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            logging.info(f"[AD_CONTINUE] –§–∏–ª—å–º {movie_key} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!)
            try:
                from db import add_content_view
                add_content_view(user_id_int, 'movie', movie_key)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            
            await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
            
        except Exception as e:
            logging.error(f"[AD_CONTINUE] –û—à–∏–±–∫–∞: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞", show_alert=True)
        
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω"
    if data == "show_limits":
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        from db import get_time_until_limit_reset
        limits_info = get_user_limits_info(user_id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
        reset_time = get_time_until_limit_reset(user_id, 'movie')
        hours = reset_time // 3600
        minutes = (reset_time % 3600) // 60
        
        if hours > 0:
            time_text = f"{hours} —á. {minutes} –º–∏–Ω."
        else:
            time_text = f"{minutes} –º–∏–Ω."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"<b>üö´ –õ–ò–ú–ò–¢ –ù–ê –ö–û–ù–¢–ï–ù–¢ –í –î–ï–ù–¨!</b>\n\n"
            f"‚è±Ô∏è –õ–∏–º–∏—Ç –±—É–¥–µ—Ç —Å–Ω—è—Ç —á–µ—Ä–µ–∑: <b>{time_text}</b>\n\n"
            f"–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–∏—à—å <b>{DAILY_CONTENT_LIMIT} —Ñ–∏–ª—å–º–æ–≤ –∑–∞ 24 —á–∞—Å–∞</b>.\n\n"
            f"–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å, –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ–≥–æ 2 –¥—Ä—É–≥–∞ –∏–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞ –∑–≤—ë–∑–¥—ã: /ref"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_system")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="refresh_content_limit")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    if data == "ref_system":
        user_id = callback.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        save_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
            language_code=callback.from_user.language_code
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referrals_count = get_referrals_count(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = BOT_USERNAME.replace("@", "")
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"<b><i>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.</i></b>\n\n"
            f"–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π <b>–ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ 7 –¥–Ω–µ–πü§ë</b>\n\n"
            f"<b><i>–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –¥–∞—ë—Ç:</i></b>\n"
            f"<b>‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º—ã, —Å–µ—Ä–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ;\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ \"–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º\" –∏ \"–°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è\" –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞;\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
            f"<b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>{referral_link}</code>\n"
            f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π: {referrals_count}/2\n\n"
            f"<b><i>–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–∑—å—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!</i></b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>üíé –ò–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n"
            f"‚Ä¢ <b>50 ‚≠ê</b> ‚Äî –ü—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞\n"
            f"‚Ä¢ <b>200 ‚≠ê</b> ‚Äî –ü—Ä–µ–º–∏—É–º –Ω–∞ –≥–æ–¥"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –∑–∞ 50‚≠ê –Ω–∞ 2 –º–µ—Å—è—Ü–∞", callback_data="buy_premium_2months")],
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –∑–∞ 200‚≠ê –Ω–∞ –≥–æ–¥", callback_data="buy_premium_1year")],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞"
    if data == "buy_premium_2months":
        user_id = callback.from_user.id
        
        try:
            await bot.send_invoice(
                chat_id=user_id,
                title="–ü—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞",
                description="‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏",
                payload="premium_2months",
                provider_token="",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram Stars
                currency="XTR",  # Telegram Stars
                prices=[LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞", amount=50)],
                max_tip_amount=0,
                suggested_tip_amounts=[]
            )
            await callback.answer("–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚ú®", show_alert=False)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –≥–æ–¥"
    if data == "buy_premium_1year":
        user_id = callback.from_user.id
        
        try:
            await bot.send_invoice(
                chat_id=user_id,
                title="–ü—Ä–µ–º–∏—É–º –Ω–∞ –≥–æ–¥",
                description="‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏",
                payload="premium_1year",
                provider_token="",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Telegram Stars
                currency="XTR",  # Telegram Stars
                prices=[LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –Ω–∞ –≥–æ–¥", amount=200)],
                max_tip_amount=0,
                suggested_tip_amounts=[]
            )
            await callback.answer("–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚ú®", show_alert=False)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    if data == "premium_users":
        premium_users = get_premium_users()
        
        if not premium_users:
            text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞.\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 2+ –¥—Ä—É–∑–µ–π!"
        else:
            text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 2+ –¥—Ä—É–∑–µ–π:\n\n"
            
            for i, user in enumerate(premium_users, 1):
                username = user['username']
                first_name = user['first_name'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                referrals_count = user['referrals_count']
                
                if username:
                    user_display = f"@{username}"
                else:
                    user_display = first_name
                
                text += f"{i}. {user_display} ‚Äî {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
        return
    
    # –ú–∞—Å—Ç–µ—Ä /addfilm: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    if data == "addfilm_cancel":
        addfilm_state.pop(callback.from_user.id, None)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        try:
            await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return
    if data == "addfilm_cancel_step":
        addfilm_state.pop(callback.from_user.id, None)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        try:
            await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return
    if data == "addfilm_confirm":
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        state = addfilm_state.pop(callback.from_user.id, None)
        if not state or state.get("step") != "confirm":
            await callback.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", show_alert=True)
            return
        d = state.get("data", {})
        key = d.get("key")
        title = d.get("title")
        file_id = d.get("file_id")
        aliases = d.get("aliases") or []
        poster_url = d.get("poster_url")
        try:
            from db import bulk_upsert_movies
            from storage import _load_to_memory
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (thumb_url = poster_url, share_query = title)
            bulk_upsert_movies([
                (key, title, file_id, 'video', poster_url, poster_url, aliases, title)
            ])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            _load_to_memory()
            
            keywords_text = ", ".join(aliases[:5]) + ("..." if len(aliases) > 5 else "")
            
            logging.info(f"[addfilm] –§–∏–ª—å–º '{title}' —Å –∫–ª—é—á–æ–º '{key}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ –ø–æ–∏—Å–∫")
            
            await callback.message.edit_text(
                f"‚úÖ –§–∏–ª—å–º <b>{title}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ –ø–æ–∏—Å–∫!\n\n"
                f"üîë –ö–ª—é—á: <code>{key}</code>\n"
                f"üè∑ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_text}\n\n"
                f"üîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", 
                parse_mode="HTML"
            )
            await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            try:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            except Exception:
                pass
        return

    # –ú–∞—Å—Ç–µ—Ä /addserial: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞
    if data == "addserial_cancel":
        addserial_state.pop(callback.from_user.id, None)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        try:
            await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return
    if data == "addserial_cancel_step":
        addserial_state.pop(callback.from_user.id, None)
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        try:
            await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception:
            pass
        return
    if data == "addserial_confirm":
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        state = addserial_state.pop(callback.from_user.id, None)
        if not state or state.get("step") != "confirm":
            await callback.answer("–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", show_alert=True)
            return
        d = state.get("data", {})
        key = d.get("key")
        title = d.get("title")
        aliases = d.get("aliases") or []
        poster_url = d.get("poster_url")
        try:
            from db import bulk_upsert_series
            from storage import SERIES_POSTERS, _load_to_memory
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (series —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤)
            bulk_upsert_series([
                (key, title, poster_url, poster_url, aliases, title)
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–∞–ª –≤ –ø–æ–∏—Å–∫ - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            # –í—Å–µ —Å–µ—Ä–∏–∞–ª—ã —Ç–µ–ø–µ—Ä—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - storage –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —Å–µ—Ä–∏–π
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            _load_to_memory()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä —Å–µ—Ä–∏–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if poster_url and key not in SERIES_POSTERS:
                SERIES_POSTERS[key] = {'show': poster_url}
            
            keywords_text = ", ".join(aliases[:5]) + ("..." if len(aliases) > 5 else "")
            
            logging.info(f"[addserial] –°–µ—Ä–∏–∞–ª '{title}' —Å –∫–ª—é—á–æ–º '{key}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ –ø–æ–∏—Å–∫")
            
            await callback.message.edit_text(
                f"‚úÖ –°–µ—Ä–∏–∞–ª <b>{title}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∏ –ø–æ–∏—Å–∫!\n\n"
                f"üîë –ö–ª—é—á: <code>{key}</code>\n"
                f"üè∑ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_text}\n"
                f"üì∫ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ø–∏–∑–æ–¥—ã –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"<code>/addepisode {key} 1 1 &lt;file_id&gt;</code>\n\n"
                f"üîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", 
                parse_mode="HTML"
            )
            await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logging.exception(f"[addserial] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–∞–ª–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            try:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            except Exception:
                pass
        return

    # –°—Ç–∞—Ä—Ç –æ–±—â–µ–Ω–∏—è —Å –∞–¥–º–∏–Ω–æ–º
    if data == "contact_admin_start":
        waiting_for_admin_message[callback.from_user.id] = True
        tech_support_state[callback.from_user.id] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if callback.message:
            await callback.message.answer(
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∏ –≤–µ—Ä–Ω—ë–º –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
            )
        else:
            # –ï—Å–ª–∏ callback.message is None (inline —Å–æ–æ–±—â–µ–Ω–∏–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ bot
            await bot.send_message(
                callback.from_user.id,
                "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∏ –≤–µ—Ä–Ω—ë–º –≤–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."
            )
        await callback.answer()
        return
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
    if data == "stats_refresh":
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=False)
            return
        text = _build_stats_text()
        try:
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=_stats_keyboard())
        except TelegramBadRequest:
            try:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_reply_markup(reply_markup=_stats_keyboard())
            except Exception:
                pass
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
        return
    
    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ ===
    if data.startswith("dynamic_season_"):
        # dynamic_season_homes_1
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å dynamic_season_
            remaining = data[15:]  # len("dynamic_season_") = 15
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ _ - —ç—Ç–æ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞
            parts = remaining.rsplit("_", 1)
            if len(parts) == 2:
                series_key = parts[0]
                season = int(parts[1])
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç _, —Ç–æ –≤–µ—Å—å remaining - —ç—Ç–æ series_key, –∞ season = 1
                series_key = remaining
                season = 1
        except (ValueError, IndexError) as e:
            logging.exception(f"[dynamic_season] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{data}': {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–∑–æ–Ω–∞", show_alert=True)
            return
        
        from keyboards import get_dynamic_episodes_keyboard
        from storage import DYNAMIC_SERIES
        
        logging.info(f"[dynamic_season] series_key='{series_key}', season={season}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
        series_title = series_key.upper()
        try:
            from db import load_all_series
            all_series = load_all_series()
            for series in all_series:
                if series['key'] == series_key:
                    series_title = series['title']
                    break
        except Exception:
            pass
        
        text = f"<b>{series_title} ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:"
        keyboard = get_dynamic_episodes_keyboard(series_key, season)
        
        try:
            if callback.message:
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                await callback.answer()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.bot.send_message(
                    chat_id=callback.from_user.id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                await callback.answer()
        except Exception as e:
            logging.exception(f"[dynamic_season] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ø–∏–∑–æ–¥–æ–≤", show_alert=True)
        return
    
    if data.startswith("dynamic_back_to_seasons_"):
        # dynamic_back_to_seasons_homes
        series_key = data.replace("dynamic_back_to_seasons_", "")
        
        from keyboards import get_dynamic_seasons_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
        series_title = series_key.upper()
        try:
            from db import load_all_series
            all_series = load_all_series()
            for series in all_series:
                if series['key'] == series_key:
                    series_title = series['title']
                    break
        except Exception:
            pass
        
        text = f"<b>{series_title}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
        keyboard = get_dynamic_seasons_keyboard(series_key)
        
        try:
            if callback.message:
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                await callback.answer()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await callback.bot.send_message(
                    chat_id=callback.from_user.id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                await callback.answer()
        except Exception as e:
            logging.exception(f"[dynamic_back_to_seasons] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∑–æ–Ω–æ–≤", show_alert=True)
        return
    
    if data.startswith("dynamic_episode_"):
        # dynamic_episode_homes_1_1
        parts = data.split("_")
        if len(parts) >= 4:
            series_key = "_".join(parts[2:-2]) if len(parts) > 4 else parts[2]
            season = int(parts[-2])
            episode = int(parts[-1])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∞–ª –∏–∑ –ë–î
            from db import load_all_series, load_all_episodes
            try:
                all_series = load_all_series()
                series_data = None
                for series in all_series:
                    if series['key'] == series_key:
                        series_data = series
                        break
                if series_data:
                    await show_series_navigation(callback, series_key, season=season, episode=episode)
                else:
                    await callback.answer("–°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            except Exception as e:
                print(f"[dynamic_episode] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–ø–∏–∑–æ–¥–∞: {e}")
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–ø–∏–∑–æ–¥–∞", show_alert=True)
        return

    if data.startswith("series_watch_"):
        series_key = data.replace("series_watch_", "")
        logging.info(f"[SERIES_WATCH] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞: {series_key}, user: {user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            from db import add_content_view
            add_content_view(user_id, 'series', series_key)
            logging.info(f"[SERIES_WATCH] –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ {series_key} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        except Exception as e:
            logging.error(f"[SERIES_WATCH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–∏–∞–ª–∞ {series_key}: {e}")
        
        await show_series_navigation(callback, series_key)
        return

    if data.startswith("series_nav_"):
        prefix = "series_nav_"
        rest = data[len(prefix):]
        idx = rest.rfind("_")
        if idx == -1:
            logging.exception(f"[series_nav] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ—Ç _): data={data}")
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–µ–∑–æ–Ω–∞", show_alert=True)
            return
        series_key = rest[:idx]
        season_str = rest[idx+1:]
        if not season_str.isdigit():
            logging.exception(f"[series_nav] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–µ–∑–æ–Ω–∞: '{season_str}', rest={rest}, data={data}")
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Å–µ–∑–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        season = int(season_str)
        print(f"[series_nav] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞: {series_key}, —Å–µ–∑–æ–Ω {season}")
        await show_series_navigation(callback, series_key, season=season)
        return
    elif data == "phf_favorites":
        # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –§–∏–Ω–µ—Å –∏ –§–µ—Ä–±
        favs = stats.get("phf_favorites", {}).get(user_id, [])
        if not favs:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π –§–∏–Ω–µ—Å–∞ –∏ –§–µ—Ä–±–∞.")
            return
        text = "<b>‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –§–∏–Ω–µ—Å–∞ –∏ –§–µ—Ä–±–∞:</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:" 
        buttons = []
        row = []
        for key in favs:
            try:
                _, season, episode = key.split("_")
                btn = InlineKeyboardButton(
                    text=f"–°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {episode}",
                    callback_data=f"dynamic_episode_{series_key}_{season}_{episode}"
                )
                row.append(btn)
                if len(row) == 2:
                    buttons.append(row)
                    row = []
            except Exception:
                continue
        if row:
            buttons.append(row)
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–∞–º", callback_data="choose_phf")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)
        return
    elif data == "lbsc_favorites":
        # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä –ö–æ—Ç
        favs = stats.get("lbsc_favorites", {}).get(user_id, [])
        if not favs:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç.")
            return
        text = "<b>‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç:</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:" 
        buttons = []
        row = []
        for key in favs:
            try:
                _, season, episode = key.split("_")
                btn = InlineKeyboardButton(
                    text=f"–°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {episode}",
                    callback_data=f"dynamic_episode_{series_key}_{season}_{episode}"
                )
                row.append(btn)
                if len(row) == 2:
                    buttons.append(row)
                    row = []
            except Exception:
                continue
        if row:
            buttons.append(row)
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–∞–º", callback_data="choose_lbsc")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)
        return
    elif data == "my_playlists" or data == "create_playlist" or data.startswith("show_playlist_") or data.startswith("pladd_season_") or data.startswith("pladd_toggle_") or data == "pladd_back" or data == "pladd_save":
        await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    elif data == "choose_rnm":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏:</b>",
                parse_mode="HTML",
                reply_markup=get_seasons_keyboard()
            )
        else:
            await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏:</b>",
            reply_markup=get_seasons_keyboard(),
            parse_mode="HTML"
        )
    elif data == "choose_phf":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –§–∏–Ω–µ—Å –∏ –§–µ—Ä–±:</b>",
                parse_mode="HTML",
                reply_markup=get_phf_seasons_keyboard()
            )
        else:
            try:
                await callback.message.edit_text(
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –§–∏–Ω–µ—Å –∏ –§–µ—Ä–±:</b>",
                    reply_markup=get_phf_seasons_keyboard(),
                    parse_mode="HTML"
                )
            except Exception:
                await safe_send_message(
                    callback,
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –§–∏–Ω–µ—Å –∏ –§–µ—Ä–±:</b>",
                    reply_markup=get_phf_seasons_keyboard()
                )
        return
    elif data == "choose_irh":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ:</b>",
                parse_mode="HTML",
                reply_markup=get_irh_seasons_keyboard()
            )
        else:
            try:
                await callback.message.edit_text(
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ:</b>",
                    reply_markup=get_irh_seasons_keyboard(),
                    parse_mode="HTML"
                )
            except Exception:
                await safe_send_message(
                    callback,
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ:</b>",
                    reply_markup=get_irh_seasons_keyboard()
                )
        return
    elif data == "choose_wnd":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –£—ç–Ω—Å–¥—ç–π (2022):</b>",
                parse_mode="HTML",
                reply_markup=get_wnd_seasons_keyboard()
            )
        else:
            try:
                await callback.message.edit_text(
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –£—ç–Ω—Å–¥—ç–π (2022):</b>",
                    reply_markup=get_wnd_seasons_keyboard(),
                    parse_mode="HTML"
                )
            except Exception:
                await safe_send_message(
                    callback,
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –£—ç–Ω—Å–¥—ç–π (2022):</b>",
                    reply_markup=get_wnd_seasons_keyboard()
                )
        return
    elif data == "choose_loki":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–æ–∫–∏ (2021):</b>",
                parse_mode="HTML",
                reply_markup=get_loki_seasons_keyboard()
            )
        else:
            try:
                await callback.message.edit_text(
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–æ–∫–∏ (2021):</b>",
                    reply_markup=get_loki_seasons_keyboard(),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–æ–∫–∏ (2021):</b>",
                    reply_markup=get_loki_seasons_keyboard(),
                    parse_mode="HTML"
                )
        return
    elif data == "back_to_main_menu":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        waiting_for_admin_message.pop(callback.from_user.id, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        user_id_int = callback.from_user.id
        is_premium = is_premium_user(user_id_int)
        premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
        
        text = (
            "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
            "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
            f"{premium_status}\n\n"
            "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            await bot.send_message(
                callback.message.chat.id,
                text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        return
    elif data == "choose_lbsc":
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text="<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç:</b>",
                parse_mode="HTML",
                reply_markup=get_lbsc_seasons_keyboard()
            )
        else:
            try:
                await callback.message.edit_text(
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç:</b>",
                    reply_markup=get_lbsc_seasons_keyboard(),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç:</b>",
                    reply_markup=get_lbsc_seasons_keyboard(),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("lbsc_season_"):
        season = int(data.split("_")[2])
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è 6 —Å–µ–∑–æ–Ω–∞
        if season == 6:
            text = (
                "<b>üêû –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç ‚Äî –°–µ–∑–æ–Ω 6</b>\n\n"
                "‚ö†Ô∏è <b>–°–ï–†–ò–ê–õ –ï–©–ï –í–´–•–û–î–ò–¢</b>\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!\n\n"
                "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
            )
        else:
            text = f"<b>–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=get_lbsc_episodes_keyboard(season)
            )
        else:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_lbsc_episodes_keyboard(season),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    text,
                    reply_markup=get_lbsc_episodes_keyboard(season),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("phf_season_"):
        season = int(data.split("_")[2])
        text = f"<b>–§–∏–Ω–µ—Å –∏ –§–µ—Ä–± ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=get_phf_episodes_keyboard(season)
            )
        else:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_phf_episodes_keyboard(season),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    text,
                    reply_markup=get_phf_episodes_keyboard(season),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("irh_season_"):
        season = int(data.split("_")[2])
        text = f"<b>–ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=get_irh_episodes_keyboard(season)
            )
        else:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_irh_episodes_keyboard(season),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    text,
                    reply_markup=get_irh_episodes_keyboard(season),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("wnd_season_"):
        season = int(data.split("_")[2])
        text = f"<b>–£—ç–Ω—Å–¥—ç–π (2022) ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=get_wnd_episodes_keyboard(season)
            )
        else:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_wnd_episodes_keyboard(season),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    text,
                    reply_markup=get_wnd_episodes_keyboard(season),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("loki_season_"):
        season = int(data.split("_")[2])
        text = f"<b>–õ–æ–∫–∏ (2021) ‚Äî –°–µ–∑–æ–Ω {season}</b>\n–í—ã–±–µ—Ä–∏ —Å–µ—Ä–∏—é:"
        if getattr(callback, 'inline_message_id', None):
            await bot.edit_message_text(
                inline_message_id=callback.inline_message_id,
                text=text,
                parse_mode="HTML",
                reply_markup=get_loki_episodes_keyboard(season)
            )
        else:
            try:
                await callback.message.edit_text(
                    text,
                    reply_markup=get_loki_episodes_keyboard(season),
                    parse_mode="HTML"
                )
            except Exception:
                await bot.send_message(
                    callback.message.chat.id,
                    text,
                    reply_markup=get_loki_episodes_keyboard(season),
                    parse_mode="HTML"
                )
        return
    elif data.startswith("phf_episode_"):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        parts = data.split("_")
        season = int(parts[-2])
        episode = int(parts[-1])
        
        await show_series_navigation(callback, "phf", season=season, episode=episode)
        return
    elif data.startswith("loki_episode_"):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        parts = data.split("_")
        season = int(parts[-2])
        episode = int(parts[-1])
        
        await show_series_navigation(callback, "loki", season=season, episode=episode)
        return
    elif data.startswith("wnd_episode_"):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        parts = data.split("_")
        season = int(parts[-2])
        episode = int(parts[-1])
        
        await show_series_navigation(callback, "wnd", season=season, episode=episode)
        return
    elif data.startswith("irh_episode_"):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        parts = data.split("_")
        season = int(parts[-2])
        episode = int(parts[-1])
        
        await show_series_navigation(callback, "irh", season=season, episode=episode)
        return
    elif data.startswith("lbsc_episode_"):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        parts = data.split("_")
        season = int(parts[-2])
        episode = int(parts[-1])
        
        await show_series_navigation(callback, "lbsc", season=season, episode=episode)
        return
    elif data == "back_to_seasons":
        try:
            await callback.message.edit_text(
                "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏:</b>",
                reply_markup=get_seasons_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            await safe_send_message(
                callback,
                "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏:</b>",
                reply_markup=get_seasons_keyboard()
            )
        return
    elif callback.data == "contact_admin":
        waiting_for_admin_message[callback.from_user.id] = True
        tech_support_state[callback.from_user.id] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏
        text = (
            "üí¨ <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ.\n\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel</i>"
        )
        await bot.send_message(
            callback.from_user.id,
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main_menu")]
            ])
        )
    elif callback.data == "random_movie":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ)
        user_id_int = int(user_id)
        if user_id_int not in ADMIN_IDS and not is_premium_user(user_id_int):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.", show_alert=True)
            return
            
        from db import get_random_movie, is_in_favorites
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        movie = get_random_movie()
        
        if not movie:
            await callback.answer("‚ùå –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
            return
        movie_key = movie['key']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        is_favorited = is_in_favorites(user_id, 'movie', movie_key)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if is_favorited:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}")
        else:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_key}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
        caption = f"<b>{movie['title']}</b>\n\nüé≤ <i>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º</i>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [fav_button],
            [InlineKeyboardButton(text="üé≤ –ï—â—ë —Å–ª—É—á–∞–π–Ω—ã–π", callback_data="random_movie")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        try:
            await bot.send_video(
                callback.from_user.id,
                video=movie['file_id'],
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                from db import add_content_view
                add_content_view(user_id, 'movie', movie_key)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ {movie_key}: {e}")
            
            await callback.answer("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å–º–∞: {str(e)}", show_alert=True)
        return
    elif callback.data.startswith("random_episode_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ)
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.", show_alert=True)
            return
            
        series_key = callback.data.replace("random_episode_", "")
        
        from db import get_random_episode, get_series_title, is_in_favorites
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ä–∏—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞
        episode = get_random_episode(series_key)
        
        if not episode:
            await callback.answer("‚ùå –°–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞!", show_alert=True)
            return
        
        user_id = callback.from_user.id
        season = episode['season']
        episode_num = episode['episode']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞
        series_titles = {
            "rm": "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏",
            "lbsc": "–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä –ö–æ—Ç", 
            "phf": "–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±",
            "wnd": "–£—ç–Ω—Å–¥—ç–π (2022)",
            "irh": "–ñ–µ–ª–µ–∑–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ",
            "loki": "–õ–æ–∫–∏ (2021)"
        }
        
        series_title = series_titles.get(series_key, get_series_title(series_key))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if series_key == "lbsc":
            check_key = f"lbsc_{season}_{episode_num}"
            content_type = "lbsc_series"
        else:
            check_key = f"{series_key}_{season}_{episode_num}"
            content_type = "series"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å–µ—Ä–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        is_favorited = is_in_favorites(user_id, content_type, check_key)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if is_favorited:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{check_key}")
        else:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{series_key}_fav_{season}_{episode_num}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ä–∏—é
        caption = f"<b>{series_title}</b>\n–°–µ–∑–æ–Ω {season} ‚Ä¢ –°–µ—Ä–∏—è {episode_num}\n\nüéØ <i>–°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è</i>\n\n<b><i>üé¨ –ù–∞—à –∫–∏–Ω–æ-–±–æ—Ç: https://t.me/{BOT_USERNAME}</i></b>"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [fav_button],
            [InlineKeyboardButton(text="üéØ –ï—â—ë —Å–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è", callback_data=f"random_episode_{series_key}")],
            [InlineKeyboardButton(text="üì∫ –ö —Å–µ—Ä–∏–∞–ª—É", callback_data=f"series_{series_key}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é (–Ω–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç, –∞ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if episode['type'] == 'video':
                await callback.message.answer_video(
                    video=episode['file_id'],
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer_document(
                    document=episode['file_id'],
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Ä–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                from db import add_content_view
                episode_key = f"{series_key}_{season}_{episode_num}"
                add_content_view(user_id, 'episode', episode_key)
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤ —Ü–µ–ª–æ–º
                add_content_view(user_id, 'series', series_key)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Ä–∏–∏ {series_key} S{season}E{episode_num}: {e}")
            
            await callback.answer("üéØ –°–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–∏–∏: {str(e)}", show_alert=True)
        return
    elif callback.data.startswith("series_"):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö —Å–µ—Ä–∏–∞–ª—É"
        series_key = callback.data.replace("series_", "")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–µ—Ä–∏–∞–ª—É
        success = await show_series_navigation(callback, series_key)
        if success:
            await callback.answer()
        return
    elif callback.data == "back_to_main_menu":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        waiting_for_admin_message.pop(callback.from_user.id, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        user_id_check = callback.from_user.id
        is_premium = is_premium_user(user_id_check)
        premium_status = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>" if is_premium else "<b>–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>"
        
        text = (
            "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
            "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
            f"{premium_status}\n\n"
            "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            await bot.send_message(
                callback.message.chat.id,
                text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        return
    elif callback.data == "movies_menu":
        text = (
            "<b>üé¨ –§–∏–ª—å–º—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=get_movies_menu_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            await bot.send_message(
                callback.message.chat.id,
                text,
                reply_markup=get_movies_menu_keyboard(),
                parse_mode="HTML"
            )
        return
    elif callback.data == "choose_rnm":
        text = "<b>–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –†–∏–∫ –∏ –ú–æ—Ä—Ç–∏:</b>"
        try:
            await callback.message.edit_text(text, reply_markup=get_seasons_keyboard(), parse_mode="HTML")
        except Exception:
            if callback.message:
                await bot.send_message(callback.message.chat.id, text, reply_markup=get_seasons_keyboard(), parse_mode="HTML")
        return
    elif callback.data == "choose_phf":
        text = "<b>–§–∏–Ω–µ—Å –∏ –§–µ—Ä–± ‚Äî –≤—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω:</b>"
        try:
            await callback.message.edit_text(text, reply_markup=get_phf_seasons_keyboard(), parse_mode="HTML")
        except Exception:
            if callback.message:
                await bot.send_message(callback.message.chat.id, text, reply_markup=get_phf_seasons_keyboard(), parse_mode="HTML")
        return
    elif callback.data == "choose_lbsc":
        text = "<b>–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä‚Äë–ö–æ—Ç ‚Äî –≤—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω:</b>"
        try:
            await callback.message.edit_text(text, reply_markup=get_lbsc_seasons_keyboard(), parse_mode="HTML")
        except Exception:
            if callback.message:
                await bot.send_message(callback.message.chat.id, text, reply_markup=get_lbsc_seasons_keyboard(), parse_mode="HTML")
        return
    elif callback.data.startswith("reply_user_"):
        user_id_to_reply = int(callback.data.split("_")[-1])
        waiting_admin_reply[callback.from_user.id] = user_id_to_reply
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id_to_reply}</code> –∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!", parse_mode="HTML")
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ", show_alert=False)
        return
    # --- –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    if callback.data.startswith("broadcast_") and callback.from_user.id in ADMIN_IDS:
        state = broadcast_state.get(callback.from_user.id, {})
        
        if callback.data == "broadcast_cancel":
            broadcast_state.pop(callback.from_user.id, None)
            try:
                await callback.message.edit_text("‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode="HTML")
            except:
                await callback.message.answer("‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode="HTML")
            await callback.answer()
            return
            
        if callback.data == "broadcast_buttons":
            state["step"] = "buttons"
            await callback.message.edit_text(
                "üîò <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–∏ URL-–∫–Ω–æ–ø–∫–∏:",
                parse_mode="HTML",
                reply_markup=get_broadcast_buttons_keyboard(state.get("selected_buttons", set()))
            )
            await callback.answer()
            return
        if callback.data == "broadcast_buttons_done":
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏
            await create_broadcast_preview(callback, state)
            await callback.answer()
            return
        if callback.data == "broadcast_buttons_clear":
            state["buttons"] = None
            state["selected_buttons"] = set()
            state["button_configs"] = []
            await callback.message.edit_reply_markup(
                reply_markup=get_broadcast_buttons_keyboard(set())
            )
            await callback.answer("–ö–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã", show_alert=False)
            return
        if callback.data == "broadcast_btn_custom":
            state["step"] = "custom_button"
            await callback.message.edit_text(
                "üîó <b>–°–æ–∑–¥–∞–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-https://example.com</code>\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>–ù–∞—à –∫–∞–Ω–∞–ª-https://t.me/yourchannel</code>\n"
                "‚Ä¢ <code>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç-https://example.com</code>\n"
                "‚Ä¢ <code>–ü–æ–¥–¥–µ—Ä–∂–∫–∞-https://t.me/support</code>\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ñ–∏—Å (-) –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–∫–∏</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_buttons")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
                ])
            )
            await callback.answer()
            return
        if callback.data.startswith("broadcast_btn_"):
            btn_type = callback.data.replace("broadcast_btn_", "")
            state.setdefault("selected_buttons", set())
            state.setdefault("button_configs", [])
            
            if btn_type == "search":
                if "search" in state["selected_buttons"]:
                    state["selected_buttons"].remove("search")
                    state["button_configs"] = [b for b in state["button_configs"] if b.get("type") != "search"]
                else:
                    state["selected_buttons"].add("search")
                    state["button_configs"].append({
                        "type": "search",
                        "text": "üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
                        "switch_inline_query_current_chat": ""
                    })
            elif btn_type == "support":
                if "support" in state["selected_buttons"]:
                    state["selected_buttons"].remove("support")
                    state["button_configs"] = [b for b in state["button_configs"] if b.get("type") != "support"]
                else:
                    state["selected_buttons"].add("support")
                    state["button_configs"].append({
                        "type": "support",
                        "text": "üì© –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        "callback_data": "contact_admin_start"
                    })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–∞–º–∏
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=get_broadcast_buttons_keyboard(state["selected_buttons"])
                )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                pass
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ custom –∫–Ω–æ–ø–∫–∞
            if btn_type != "custom":
                await callback.answer(f"–ö–Ω–æ–ø–∫–∞ {'—É–±—Ä–∞–Ω–∞' if btn_type not in state['selected_buttons'] else '–¥–æ–±–∞–≤–ª–µ–Ω–∞'}", show_alert=False)
            return
        if callback.data == "broadcast_buttons_back_to_selection":
            state["step"] = "buttons"
            await callback.message.edit_text(
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é:</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Å—ã–ª–∫—É.",
                parse_mode="HTML",
                reply_markup=get_broadcast_buttons_keyboard(state.get("selected_buttons", set()))
            )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ –±–ª–æ–∫–∞ broadcast_)
    if callback.data == "broadcast_send" and callback.from_user.id in ADMIN_IDS:
        await callback.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        if callback.from_user.id not in broadcast_state:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /broadcast", show_alert=True)
            return
            
        state = broadcast_state[callback.from_user.id]
        logging.info(f"[BROADCAST_SEND] Admin {callback.from_user.id} sending broadcast. Type: {state.get('type')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = load_all_users()
        if not users:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        content = state.get("content", {})
        content_type = state.get("type")
        button_configs = state.get("button_configs", [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
        final_buttons = None
        if button_configs:
            keyboard_rows = []
            current_row = []
            
            for config in button_configs:
                if "url" in config:
                    btn = InlineKeyboardButton(text=config["text"], url=config["url"])
                    current_row.append(btn)
                    
                    # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                    if len(current_row) == 2:
                        keyboard_rows.append(current_row)
                        current_row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            if current_row:
                keyboard_rows.append(current_row)
            
            if keyboard_rows:
                final_buttons = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        await callback.message.edit_text(f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}", parse_mode="HTML")
        
        success_count = 0
        error_count = 0
        
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        async def send_to_user(user_id):
            nonlocal success_count, error_count
            try:
                if content_type == "text":
                    await bot.send_message(user_id, content["text"], parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "photo":
                    await bot.send_photo(user_id, content["photo"], caption=content.get("caption", ""), parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "video":
                    await bot.send_video(user_id, content["video"], caption=content.get("caption", ""), parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "document":
                    await bot.send_document(user_id, content["document"], caption=content.get("caption", ""), parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "audio":
                    await bot.send_audio(user_id, content["audio"], caption=content.get("caption", ""), parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "voice":
                    await bot.send_voice(user_id, content["voice"], reply_markup=final_buttons)
                elif content_type == "video_note":
                    await bot.send_video_note(user_id, content["video_note"], reply_markup=final_buttons)
                elif content_type == "sticker":
                    await bot.send_sticker(user_id, content["sticker"], reply_markup=final_buttons)
                elif content_type == "animation":
                    await bot.send_animation(user_id, content["animation"], caption=content.get("caption", ""), parse_mode="HTML", reply_markup=final_buttons)
                elif content_type == "location":
                    await bot.send_location(user_id, content["latitude"], content["longitude"], reply_markup=final_buttons)
                elif content_type == "contact":
                    await bot.send_contact(user_id, content["phone_number"], content["first_name"], last_name=content.get("last_name"), reply_markup=final_buttons)
                elif content_type == "media_group":
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_list = []
                    for media_item in state["media_group"]:
                        if media_item["type"] == "photo":
                            from aiogram.types import InputMediaPhoto
                            media = InputMediaPhoto(media=media_item["media"], caption=media_item.get("caption", ""))
                        elif media_item["type"] == "video":
                            from aiogram.types import InputMediaVideo
                            media = InputMediaVideo(media=media_item["media"], caption=media_item.get("caption", ""))
                        media_list.append(media)
                    
                    await bot.send_media_group(user_id, media_list)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                    if final_buttons:
                        await bot.send_message(user_id, "üëÜ", reply_markup=final_buttons)
                
                success_count += 1
            except Exception as e:
                logging.error(f"Error sending broadcast to {user_id}: {e}")
                error_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        for i, user_id in enumerate(users):
            await send_to_user(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (i + 1) % 50 == 0:
                progress = f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>\n\nüë• –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(users)}\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}"
                try:
                    await callback.message.edit_text(progress, parse_mode="HTML")
                except:
                    pass
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.05)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await callback.message.edit_text(
            f"üéâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
            f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round((success_count / len(users)) * 100, 1)}%",
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        broadcast_state.pop(callback.from_user.id, None)
        return
    
    elif data.startswith("favorite_"):
        _, season, episode = data.split("_")
        season, episode = int(season), int(episode)
        key = f"{season}_{episode}"
        stats.setdefault("favorites", {})
        user_favs = stats["favorites"].get(user_id, [])
        if key not in user_favs:
            user_favs.append(key)
            stats["favorites"][user_id] = user_favs
            save_stats(stats)
        is_favorite = True
        await callback.message.edit_reply_markup(reply_markup=get_favorite_keyboard(season, episode, is_favorite))
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
        return
    elif data.startswith("unfavorite_"):
        _, season, episode = data.split("_")
        season, episode = int(season), int(episode)
        key = f"{season}_{episode}"
        stats.setdefault("favorites", {})
        user_favs = stats["favorites"].get(user_id, [])
        if key in user_favs:
            user_favs.remove(key)
            stats["favorites"][user_id] = user_favs
            save_stats(stats)
        is_favorite = False
        await callback.message.edit_reply_markup(reply_markup=get_favorite_keyboard(season, episode, is_favorite))
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", show_alert=False)
        return
    elif data.startswith("lbsc_fav_"):
        _, _, season, episode = data.split("_")
        season, episode = int(season), int(episode)
        key = f"lbsc_{season}_{episode}"
        stats.setdefault("lbsc_favorites", {})
        user_favs = stats["lbsc_favorites"].get(user_id, [])
        if key not in user_favs:
            user_favs.append(key)
            stats["lbsc_favorites"][user_id] = user_favs
            save_stats(stats)
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    elif data.startswith("play_fav_movie_"):
        movie_key = data.replace("play_fav_movie_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
        from storage import MOVIES
        movie_meta = MOVIES.get(movie_key)
        
        if not movie_meta:
            await callback.answer("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        from db import is_in_favorites
        is_favorited = is_in_favorites(user_id, 'movie', movie_key)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if is_favorited:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}")
        else:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{movie_key}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å–º–∞
        await callback.message.answer_video(
            video=movie_meta['file_id'],
            caption=f"üé¨ <b>{movie_meta['title']}</b>\n\n{movie_meta.get('description', '')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [fav_button],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ]),
            parse_mode="HTML"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            from db import add_content_view
            add_content_view(user_id, 'movie', movie_key)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ {movie_key}: {e}")
        
        await callback.answer("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π
    elif data.startswith("play_fav_series_"):
        episode_key = data.replace("play_fav_series_", "")
        parts = episode_key.split("_")
        
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏!", show_alert=True)
            return
            
        series_name = parts[0]
        season = int(parts[1])
        episode = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–µ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from db import get_episode_file_id
        file_id = get_episode_file_id(series_name, season, episode)
        
        if not file_id:
            await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —Å–µ—Ä–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        from db import is_in_favorites
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if series_name == "lbsc":
            check_key = f"lbsc_{season}_{episode}"
            content_type = "lbsc_series"
        else:
            check_key = f"{series_name}_{season}_{episode}"
            content_type = "series"
        
        is_favorited = is_in_favorites(user_id, content_type, check_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–µ—Ä–∏–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from db import get_series_info
        series_info = get_series_info(series_name)
        if series_info:
            series_display_name = series_info["title"]
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            series_display_names = {
                "rickandmorty": "–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏",
                "phf": "–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±", 
                "lbsc": "–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç"
            }
            series_display_name = series_display_names.get(series_name, series_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if is_favorited:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{check_key}")
        else:
            fav_button = InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{series_name}_fav_{season}_{episode}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å–µ—Ä–∏–∏
        await callback.message.answer_video(
            video=file_id,
            caption=f"üì∫ <b>{series_display_name}</b>\n–°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {episode}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [fav_button],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ]),
            parse_mode="HTML"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            from db import add_content_view
            episode_key = f"{series_name}_{season}_{episode}"
            add_content_view(user_id, 'episode', episode_key)
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∞–ª–∞ –≤ —Ü–µ–ª–æ–º
            add_content_view(user_id, 'series', series_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ {series_name} S{season}E{episode}: {e}")
        
        await callback.answer("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Ä–∏–∏")
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" —Ñ–∏–ª—å–º–æ–≤
    elif data.startswith("fav_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ)
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.", show_alert=True)
            return
            
        movie_key = data.replace("fav_", "")
        from db import add_to_favorites
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        added = add_to_favorites(user_id, 'movie', movie_key)
        
        if added:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–î–æ–±–∞–≤–ª–µ–Ω–æ"
            try:
                current_keyboard = callback.message.reply_markup
                if current_keyboard and current_keyboard.inline_keyboard:
                    new_keyboard = []
                    for row in current_keyboard.inline_keyboard:
                        new_row = []
                        for button in row:
                            if button.callback_data == f"fav_{movie_key}":
                                new_row.append(InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{movie_key}"))
                            else:
                                new_row.append(button)
                        new_keyboard.append(new_row)
                    
                    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
            await callback.answer("‚≠êÔ∏è –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
        else:
            await callback.answer("‚≠êÔ∏è –§–∏–ª—å–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", show_alert=False)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" —Å–µ—Ä–∏–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
    elif "_fav_" in data and not data.startswith("already_fav_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ)
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 2 –¥—Ä—É–∑–µ–π.", show_alert=True)
            return
            
        parts = data.split("_fav_")
        series_key = parts[0]
        season_episode = parts[1].split("_")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ season –∏ episode —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
        try:
            season, episode = int(season_episode[0]), int(season_episode[1])
        except (ValueError, IndexError):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏!", show_alert=True)
            return
        
        from db import add_to_favorites
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–∏–∞–ª–∞
        if series_key == "lbsc":
            check_key = f"lbsc_{season}_{episode}"
            content_type = "lbsc_series"
        else:
            check_key = f"{series_key}_{season}_{episode}"
            content_type = "series"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        added = add_to_favorites(user_id, content_type, check_key)
        
        if added:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–î–æ–±–∞–≤–ª–µ–Ω–æ"
            try:
                current_keyboard = callback.message.reply_markup
                if current_keyboard and current_keyboard.inline_keyboard:
                    new_keyboard = []
                    for row in current_keyboard.inline_keyboard:
                        new_row = []
                        for button in row:
                            if button.callback_data == f"{series_key}_fav_{season}_{episode}":
                                new_row.append(InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ", callback_data=f"already_fav_{check_key}"))
                            else:
                                new_row.append(button)
                        new_keyboard.append(new_row)
                    
                    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
            await callback.answer("‚≠êÔ∏è –°–µ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
        else:
            await callback.answer("‚≠êÔ∏è –°–µ—Ä–∏—è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", show_alert=False)
        return
    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–æ–±–∞–≤–ª–µ–Ω–æ" - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    elif data.startswith("already_fav_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ) 
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
            return
            
        item_key = data.replace("already_fav_", "")
        from db import remove_from_favorites
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"Trying to remove from favorites: user_id={user_id}, item_key={item_key}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        removed = False
        content_type = "movie"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∫–ª—é—á–∞
        # –°–µ—Ä–∏–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç: series_season_episode (–Ω–∞–ø—Ä–∏–º–µ—Ä: rm_1_2, gf_1_1, wnd_1_1)
        # –§–∏–ª—å–º—ã –∏–º–µ—é—Ç –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: avatar_2, tran_7, p_parni2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–∞–º —Å–µ—Ä–∏–π
        parts = item_key.split("_")
        
        if (len(parts) >= 3 or 
            item_key.startswith("rm_") or 
            item_key.startswith("gf_") or 
            item_key.startswith("sp_") or 
            item_key.startswith("fg_") or
            item_key.startswith("wnd_") or
            item_key.startswith("homes_") or
            item_key.startswith("lbsc_") or
            item_key.startswith("phf_")):
            # –≠—Ç–æ —Å–µ—Ä–∏—è
            content_type = "series"
            logging.info(f"Removing series: {item_key}")
            removed = remove_from_favorites(user_id, "series", item_key)
        else:
            # –≠—Ç–æ —Ñ–∏–ª—å–º
            content_type = "movie"
            logging.info(f"Removing movie: {item_key}")
            removed = remove_from_favorites(user_id, "movie", item_key)
        
        logging.info(f"Removal result: {removed}")
        
        if removed:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            try:
                current_keyboard = callback.message.reply_markup
                if current_keyboard and current_keyboard.inline_keyboard:
                    new_keyboard = []
                    for row in current_keyboard.inline_keyboard:
                        new_row = []
                        for button in row:
                            if button.callback_data == f"already_fav_{item_key}":
                                if content_type == "movie":
                                    new_row.append(InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{item_key}"))
                                else:
                                    # For series, need to reconstruct the original callback
                                    parts = item_key.split("_")
                                    if len(parts) >= 3:
                                        series_key, season, episode = parts[0], parts[1], parts[2]
                                        new_row.append(InlineKeyboardButton(text="‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{series_key}_fav_{season}_{episode}"))
                                    else:
                                        new_row.append(button)  # Fallback
                            else:
                                new_row.append(button)
                        new_keyboard.append(new_row)
                    
                    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard))
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
            content_name = "—Ñ–∏–ª—å–º" if content_type == "movie" else "—Å–µ—Ä–∏—è"
            await callback.answer(f"‚ùå {content_name.capitalize()} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", show_alert=False)
        else:
            await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    elif data == "favorites_movies":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—Å–µ)
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
            return
            
        from db import get_user_favorites
        user_favs = get_user_favorites(user_id, 'movie')
        
        if not user_favs:
            text = "üé¨ <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", callback_data="back_to_saved")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
        else:
            from storage import MOVIES
            text = "üé¨ <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã</b>\n\n"
            buttons = []
            
            for fav in user_favs:
                movie_key = fav['content_key']
                movie_meta = MOVIES.get(movie_key)
                if movie_meta:
                    movie_title = movie_meta.get('title', movie_key)
                    buttons.append([InlineKeyboardButton(text=f"üé¨ {movie_title}", callback_data=f"play_fav_movie_{movie_key}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            buttons.extend([
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", callback_data="back_to_saved")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        return
    elif data == "favorites_series":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
            return
            
        from db import get_user_favorites
        user_lbsc_favs = get_user_favorites(user_id, 'lbsc_series')
        user_series_favs = get_user_favorites(user_id, 'series')
        
        if not user_lbsc_favs and not user_series_favs:
            text = "üì∫ <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–π."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", callback_data="back_to_saved")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
        else:
            from db import get_series_title
            text = "üì∫ <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏</b>\n\n"
            buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º LBSC —Å–µ—Ä–∏–∏
            for fav in user_lbsc_favs:
                series_key = fav['content_key']
                # –ü–∞—Ä—Å–∏–º –∫–ª—é—á: lbsc_season_episode
                parts = series_key.split("_")
                if len(parts) >= 3:
                    series_name = parts[0]
                    season = parts[1]
                    episode = parts[2]
                    series_title = get_series_title(series_name)
                    buttons.append([InlineKeyboardButton(text=f"üì∫ {series_title} S{season}E{episode}", callback_data=f"play_fav_series_{series_key}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–∏–∏
            for fav in user_series_favs:
                series_key = fav['content_key']
                # –ü–∞—Ä—Å–∏–º –∫–ª—é—á: series_season_episode
                parts = series_key.split("_")
                if len(parts) >= 3:
                    series_name = parts[0]
                    season = parts[1]
                    episode = parts[2]
                    series_title = get_series_title(series_name)
                    buttons.append([InlineKeyboardButton(text=f"üì∫ {series_title} S{season}E{episode}", callback_data=f"play_fav_series_{series_key}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            buttons.extend([
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", callback_data="back_to_saved")],
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        return
    elif data == "back_to_saved":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        if user_id not in ADMIN_IDS and not is_premium_user(user_id):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
            return
            
        from db import get_favorites_count
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–π
        movies_count = get_favorites_count(user_id, 'movie')
        lbsc_series_count = get_favorites_count(user_id, 'lbsc_series')
        other_series_count = get_favorites_count(user_id, 'series')
        series_count = lbsc_series_count + other_series_count
        
        text = (
            "<b><i>‚≠êÔ∏è–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏:</i></b>\n\n"
            f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∏–ª—å–º–æ–≤: {movies_count}\n"
            f"<b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–∏–π: {series_count}</b>\n\n"
            "<b><i>–ù–∞–∂–º–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏:</i></b>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã", callback_data="favorites_movies"),
                InlineKeyboardButton(text="üì∫ –°–µ—Ä–∏–∏", callback_data="favorites_series")
            ],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        await bot.send_message(callback.from_user.id, text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        return
       # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif data == "back_to_main_menu":
        # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if callback.from_user.id in tech_support_state:
            del tech_support_state[callback.from_user.id]
        if callback.from_user.id in waiting_for_admin_message:
            del waiting_for_admin_message[callback.from_user.id]
            
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —á—Ç–æ –∏ –≤ /start
        text = (
            "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
            "<i>–¢—ã –ø–æ–ø–∞–ª –≤ –∫–∏–Ω–æ-–±–æ—Ç!</i> <b>–£ –Ω–∞—Å –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!</b>üé•\n\n"
            "<b><i>–ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏ /help –ª–∏–±–æ \"–ü–æ–º–æ—â—å\".</i></b>\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç–µ–±–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–∞!</b>"
        )
        await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")
        await callback.answer()
        return
    elif data == "help_menu":
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –Ω–∞—É—á—É —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n"
            "üòä –ò –æ—Ç–≤–µ—á—É –Ω–∞ —Å–∞–º—ã–µ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã! ‚ù§Ô∏è\n\n"
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –∏/–∏–ª–∏ —Å–µ—Ä–∏–∞–ª –≤–∞–º –Ω—É–∂–Ω–æ "
            "–Ω–∞–∂–∞—Ç—å –Ω–∞ /start‚Üí \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –ø–∏—à–∏—Ç–µ, —á—Ç–æ "
            f"—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –ü—Ä–∏–º–µ—Ä: @{BOT_USERNAME} tor canorax\n\n"
            "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º. –° –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç–æ–π. "
            "–° –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–æ–π. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç —É–Ω—ã–≤–∞—Ç—å! "
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ –Ω–∞ /start –∏ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º\". "
            "–ù–µ –±–æ–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å! –ê–¥–º–∏–Ω –≤–∞—Å –Ω–µ —É–∫—É—Å–∏—Ç!"
        )
        await bot.send_message(callback.from_user.id, text, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")
        await callback.answer()
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    elif data == "ref_system":
        user_id = callback.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        save_user(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.last_name,
            callback.from_user.language_code,
            callback.from_user.is_bot
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referrals_count = get_referrals_count(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_premium_user(user_id) or user_id in ADMIN_IDS:
            status = "üç¨ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            status = "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.\n\n"
            f"–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ –±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ 7 –¥–Ω–µ–πü§ë\n\n"
            f"–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –¥–∞—ë—Ç:\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n"
            f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª—é–¥–µ–π: {referrals_count}/2\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–∑—å—è–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üíé –ò–ª–∏ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n"
            f"‚Ä¢ 50 ‚≠êÔ∏è ‚Äî –ü—Ä–µ–º–∏—É–º –Ω–∞ 2 –º–µ—Å—è—Ü–∞\n"
            f"‚Ä¢ 200 ‚≠êÔ∏è ‚Äî –ü—Ä–µ–º–∏—É–º –Ω–∞ –≥–æ–¥"
        )
        
        ref_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        await bot.send_message(callback.from_user.id, text, reply_markup=ref_keyboard, parse_mode="HTML")
        await callback.answer("üí∞ –û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        return
    
    elif data == "premium_users":
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        premium_users = get_premium_users()
        
        if not premium_users:
            text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞.\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 2+ –¥—Ä—É–∑–µ–π!"
        else:
            text = "üç¨ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 2+ –¥—Ä—É–∑–µ–π:\n\n"
            
            for i, user in enumerate(premium_users, 1):
                username = user['username']
                first_name = user['first_name'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                referrals_count = user['referrals_count']
                
                if username:
                    text += f"{i}. @{username} ({first_name}) - {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                else:
                    text += f"{i}. {first_name} - {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        
        premium_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="ref_system")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        await bot.send_message(callback.from_user.id, text, reply_markup=premium_keyboard, parse_mode="HTML")
        await callback.answer("üç¨ –û—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    
    elif data == "back_to_saved":
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        user_id_int = int(user_id)
        if user_id_int not in ADMIN_IDS and not is_premium_user(user_id_int):
            await callback.answer("üîí –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", show_alert=True)
            return
        
        text = (
            "‚≠êÔ∏è <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        
        favorites_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã", callback_data="saved_movies")],
            [InlineKeyboardButton(text="üì∫ –°–µ—Ä–∏–∞–ª—ã", callback_data="saved_series")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ])
        
        await bot.send_message(callback.from_user.id, text, reply_markup=favorites_keyboard, parse_mode="HTML")
        await callback.answer("‚≠êÔ∏è –û—Ç–∫—Ä—ã—Ç–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        return
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ñ–∏–ª—å–º–æ–≤ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–´–®–ï –û–ë–©–ï–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê) ===
@router.message(F.text.startswith("/movie_"))
async def handle_movie_code(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∏–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–∞"""
    logging.info(f"[handle_movie_code] Processing movie code: {message.text}")
    
    
    movie_key = message.text.split("/movie_", 1)[1]
    meta = MOVIES.get(movie_key)
    if not meta:
        await message.reply("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    caption = f"<b>{meta['title']}</b>"
    
    try:
        poster_url = meta.get('poster_url') or meta.get('thumb_url')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Å–∞–º–æ–º –≤–∏–¥–µ–æ)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"movie_play_{movie_key}")],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ])
        if poster_url:
            await message.answer_photo(
                photo=poster_url,
                caption=caption,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                text=caption,
                parse_mode="HTML", 
                reply_markup=keyboard
            )
        try:
            await message.delete()
        except Exception:
            pass
    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ")
        logging.error(f"Error sending movie info {movie_key}: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤ ===
@router.message(F.text.startswith("/series_"))
async def handle_series_code(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –∏–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–∞"""
    logging.info(f"[handle_series_code] Processing series code: {message.text}")
    
    
    series_key = message.text.split("/series_", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ
    all_series = get_all_available_series()
    series_info = None
    for s in all_series:
        if s["key"] == series_key:
            series_info = s
            break
    
    if not series_info:
        await message.reply("‚ùå –°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    title = series_info["title"]
    caption = f"<b>{title}</b>"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä —Å–µ—Ä–∏–∞–ª–∞
        poster_url = None
        if series_key in SERIES_POSTERS:
            poster_data = SERIES_POSTERS[series_key]
            if isinstance(poster_data, dict):
                poster_url = poster_data.get('show') or poster_data.get(max(poster_data.keys()) if poster_data else None)
            else:
                poster_url = poster_data
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"series_watch_{series_key}")],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        if poster_url:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=poster_url,
                caption=caption,
                parse_mode="HTML",
                reply_markup=main_keyboard
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=caption,
                parse_mode="HTML", 
                reply_markup=main_keyboard
            )
        
            
        try:
            await message.delete()
        except Exception:
            pass
    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ")
        logging.error(f"Error sending series info {series_key}: {e}")


# === Vibix: –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞ ===
@router.message(F.text.startswith("/vibix_movie_"))
async def handle_vibix_movie(message: Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    code = message.text.split("/vibix_movie_", 1)[1]
    from vibix_api import vibix_api
    iframe = None
    data = None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ –ø–æ KP/IMDB/ID
    try:
        if code.startswith("tt"):
            data = await vibix_api.get_by_imdb(code)
        elif code.isdigit():
            data = await vibix_api.get_by_kp(int(code))
            if not data:
                # –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id, –Ω–∞–π–¥—ë–º –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
                page = await vibix_api.list_links(limit=50)
                if page and page.get('data'):
                    for item in page['data']:
                        if str(item.get('id')) == code:
                            data = item
                            break
        if data and data.get('iframe_url'):
            iframe = data['iframe_url']
    except Exception:
        iframe = None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º"
    poster_url = None
    
    if data:
        title = data.get('name_rus') or data.get('name') or title
        poster_url = data.get('poster_url')
        # logging.info(f"[VIBIX_MOVIE] –î–∞–Ω–Ω—ã–µ –æ—Ç Vibix API: title='{title}', poster_url='{poster_url}'")
        # logging.info(f"[VIBIX_MOVIE] –í—Å–µ –ø–æ–ª—è data: {list(data.keys()) if data else 'None'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –∂–∞–Ω—Ä—ã) –∏–∑ Vibix API
    movie_info = {}
    if data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Vibix API
        movie_info = {
            'rating_kp': data.get('kp_rating'),
            'rating_imdb': data.get('imdb_rating'),
            'genres': data.get('genre', []),
            'year': data.get('year'),
            'description': data.get('description') or data.get('description_short'),
            'quality': data.get('quality'),
            'country': data.get('country', []),
            'duration': data.get('duration')
        }
        # logging.info(f"[VIBIX_MOVIE] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Vibix API –¥–ª—è {title}: {movie_info}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é)
    # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞, —á—Ç–æ–±—ã —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS and not is_premium_user(user_id):
        try:
            from db import add_content_view
            movie_key = f"vibix_{code}"
            add_content_view(user_id, 'movie', movie_key)
            logging.info(f"[VIBIX_MOVIE] –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞ {movie_key} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞ {movie_key}: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ü–µ—Ä–µ–¥–∞–µ–º iframe_url –∏ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
    enhanced_movie_data = data.copy() if data else {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if poster_url:
        enhanced_movie_data['poster_url'] = poster_url
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ movie_info_api
    if movie_info:
        # –†–µ–π—Ç–∏–Ω–≥–∏
        if movie_info.get('rating_kp'):
            enhanced_movie_data['kp_rating'] = movie_info['rating_kp']
        if movie_info.get('rating_imdb'):
            enhanced_movie_data['imdb_rating'] = movie_info['rating_imdb']
        
        # –ñ–∞–Ω—Ä—ã
        if movie_info.get('genres'):
            enhanced_movie_data['genres'] = movie_info['genres']
        
        # –ì–æ–¥
        if movie_info.get('year'):
            enhanced_movie_data['year'] = movie_info['year']
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if movie_info.get('description'):
            enhanced_movie_data['description'] = movie_info['description']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if movie_info.get('quality'):
            enhanced_movie_data['quality'] = movie_info['quality']
        if movie_info.get('country'):
            enhanced_movie_data['country'] = movie_info['country']
        if movie_info.get('duration'):
            enhanced_movie_data['duration'] = movie_info['duration']
    
    secure_url = await generate_secure_miniapp_url(
        message.from_user.id, 
        'movie', 
        code, 
        iframe_url=enhanced_movie_data.get('iframe_url'),
        movie_data=enhanced_movie_data
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if secure_url:
        buttons = [
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", web_app=WebAppInfo(url=secure_url))],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ]
    else:
        # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        limits_info = get_user_limits_info(message.from_user.id)
        buttons = [
            [InlineKeyboardButton(text=f"üö´ –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω ({limits_info['daily_used']}/{limits_info['daily_limit']})", callback_data="show_limits")],
            [InlineKeyboardButton(text="üíé –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="ref_system")],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ]
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    text_parts = [f"üé¨ <b>{title}</b>"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = []
    if movie_info.get('rating_kp'):
        try:
            kp_rating = float(movie_info['rating_kp'])
            if kp_rating > 0:
                ratings.append(f"–ö–ü: {kp_rating}")
        except (ValueError, TypeError):
            pass
    
    if movie_info.get('rating_imdb'):
        try:
            imdb_rating = float(movie_info['rating_imdb'])
            if imdb_rating > 0:
                ratings.append(f"IMDb: {imdb_rating}")
        except (ValueError, TypeError):
            pass
    
    if ratings:
        text_parts.append(f"‚≠ê {' | '.join(ratings)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –∏ –∂–∞–Ω—Ä—ã
    details = []
    if movie_info.get('year'):
        details.append(str(movie_info['year']))
    
    if movie_info.get('genres') and isinstance(movie_info['genres'], list):
        genres_text = ', '.join(movie_info['genres'][:3])  # –ü–µ—Ä–≤—ã–µ 3 –∂–∞–Ω—Ä–∞
        details.append(genres_text)
    
    if details:
        text_parts.append(f"üìÖ {' | '.join(details)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    extra_info = []
    if movie_info.get('country') and isinstance(movie_info['country'], list):
        countries = ', '.join(movie_info['country'][:2])  # –ü–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–∞–Ω—ã
        extra_info.append(f"üåç {countries}")
    
    if movie_info.get('quality'):
        extra_info.append(f"üì∫ {movie_info['quality']}")
    
    if movie_info.get('duration'):
        extra_info.append(f"‚è±Ô∏è {movie_info['duration']} –º–∏–Ω")
    
    if extra_info:
        text_parts.append(' | '.join(extra_info))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if movie_info.get('description'):
        description = movie_info['description']
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 300:
            description = description[:297] + "..."
        text_parts.append(f"\nüìñ {description}")
    
    text_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    text = '\n'.join(text_parts)
    
    if poster_url:
        try:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=poster_url,
                caption=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )


# === Vibix: –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞ ===
@router.message(F.text.startswith("/vibix_series_"))
async def handle_vibix_series(message: Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    code = message.text.split("/vibix_series_", 1)[1]
    from vibix_api import vibix_api
    iframe = None
    data = None
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–∏–∞–ª–µ –ø–æ KP/IMDB/ID
    try:
        if code.startswith("tt"):
            data = await vibix_api.get_by_imdb(code)
        elif code.isdigit():
            data = await vibix_api.get_by_kp(int(code))
            if not data:
                page = await vibix_api.list_links(type_='serial', limit=50)
                if page and page.get('data'):
                    for item in page['data']:
                        if str(item.get('id')) == code:
                            data = item
                            break
        if data and data.get('iframe_url'):
            iframe = data['iframe_url']
    except Exception:
        iframe = None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–∏–∞–ª"
    poster_url = None
    
    if data:
        title = data.get('name_rus') or data.get('name') or title
        poster_url = data.get('poster_url')
        # logging.info(f"[VIBIX_SERIES] –î–∞–Ω–Ω—ã–µ –æ—Ç Vibix API: title='{title}', poster_url='{poster_url}'")
        # logging.info(f"[VIBIX_SERIES] –í—Å–µ –ø–æ–ª—è data: {list(data.keys()) if data else 'None'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –∂–∞–Ω—Ä—ã) –∏–∑ Vibix API
    movie_info = {}
    if data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Vibix API
        movie_info = {
            'rating_kp': data.get('kp_rating'),
            'rating_imdb': data.get('imdb_rating'),
            'genres': data.get('genre', []),
            'year': data.get('year'),
            'description': data.get('description') or data.get('description_short'),
            'quality': data.get('quality'),
            'country': data.get('country', []),
            'duration': data.get('duration')
        }
        # logging.info(f"[VIBIX_SERIES] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Vibix API –¥–ª—è {title}: {movie_info}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    enhanced_movie_data = data.copy() if data else {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if poster_url:
        enhanced_movie_data['poster_url'] = poster_url
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ movie_info_api
    if movie_info:
        # –†–µ–π—Ç–∏–Ω–≥–∏
        if movie_info.get('rating_kp'):
            enhanced_movie_data['kp_rating'] = movie_info['rating_kp']
        if movie_info.get('rating_imdb'):
            enhanced_movie_data['imdb_rating'] = movie_info['rating_imdb']
        
        # –ñ–∞–Ω—Ä—ã
        if movie_info.get('genres'):
            enhanced_movie_data['genres'] = movie_info['genres']
        
        # –ì–æ–¥
        if movie_info.get('year'):
            enhanced_movie_data['year'] = movie_info['year']
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if movie_info.get('description'):
            enhanced_movie_data['description'] = movie_info['description']
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if movie_info.get('quality'):
            enhanced_movie_data['quality'] = movie_info['quality']
        if movie_info.get('country'):
            enhanced_movie_data['country'] = movie_info['country']
        if movie_info.get('duration'):
            enhanced_movie_data['duration'] = movie_info['duration']
    
    secure_url = await generate_secure_miniapp_url(
        message.from_user.id, 
        'episode', 
        code, 
        iframe_url=iframe,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π iframe_url
        movie_data=enhanced_movie_data
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if secure_url:
        buttons = [
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", web_app=WebAppInfo(url=secure_url))],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ]
    else:
        # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        limits_info = get_user_limits_info(message.from_user.id)
        buttons = [
            [InlineKeyboardButton(text=f"üö´ –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω ({limits_info['daily_used']}/{limits_info['daily_limit']})", callback_data="show_limits")],
            [InlineKeyboardButton(text="üíé –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="ref_system")],
            [InlineKeyboardButton(text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")]
        ]
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    text_parts = [f"üì∫ <b>{title}</b>"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = []
    if movie_info.get('rating_kp'):
        try:
            kp_rating = float(movie_info['rating_kp'])
            if kp_rating > 0:
                ratings.append(f"–ö–ü: {kp_rating}")
        except (ValueError, TypeError):
            pass
    
    if movie_info.get('rating_imdb'):
        try:
            imdb_rating = float(movie_info['rating_imdb'])
            if imdb_rating > 0:
                ratings.append(f"IMDb: {imdb_rating}")
        except (ValueError, TypeError):
            pass
    
    if ratings:
        text_parts.append(f"‚≠ê {' | '.join(ratings)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –∏ –∂–∞–Ω—Ä—ã
    details = []
    if movie_info.get('year'):
        details.append(str(movie_info['year']))
    
    if movie_info.get('genres') and isinstance(movie_info['genres'], list):
        genres_text = ', '.join(movie_info['genres'][:3])  # –ü–µ—Ä–≤—ã–µ 3 –∂–∞–Ω—Ä–∞
        details.append(genres_text)
    
    if details:
        text_parts.append(f"üìÖ {' | '.join(details)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    extra_info = []
    if movie_info.get('country') and isinstance(movie_info['country'], list):
        countries = ', '.join(movie_info['country'][:2])  # –ü–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–∞–Ω—ã
        extra_info.append(f"üåç {countries}")
    
    if movie_info.get('quality'):
        extra_info.append(f"üì∫ {movie_info['quality']}")
    
    if extra_info:
        text_parts.append(' | '.join(extra_info))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if movie_info.get('description'):
        description = movie_info['description']
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 300:
            description = description[:297] + "..."
        text_parts.append(f"\nüìñ {description}")
    
    text_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    text = '\n'.join(text_parts)
    
    if poster_url:
        try:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=poster_url,
                caption=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )

@router.message(~F.text.startswith('/'))
async def handle_messages(message: Message):
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from db import save_user
    user = message.from_user
    if user:
        save_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language_code=user.language_code,
            is_bot=user.is_bot
        )
    
    if not message.text:
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞
    user_id = message.from_user.id
    if (user_id in pin_manager_states and 
        pin_manager_states[user_id].get('step') == 'waiting_search' and
        user_id in ADMIN_IDS):
        
        state = pin_manager_states[user_id]
        content_type = state['content_type']
        search_query = message.text.strip()
        
        if len(search_query) < 2:
            await message.reply("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        try:
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            results = await search_content_by_key(content_type, search_query, limit=10)
            
            if not results:
                type_name = "—Ñ–∏–ª—å–º–æ–≤" if content_type == "movie" else "—Å–µ—Ä–∏–∞–ª–æ–≤"
                await message.reply(
                    f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '<b>{search_query}</b>' {type_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                    parse_mode="HTML"
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            type_name = "—Ñ–∏–ª—å–º–æ–≤" if content_type == "movie" else "—Å–µ—Ä–∏–∞–ª–æ–≤"
            text = (
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {type_name}</b>\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É: <b>{search_query}</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤)\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä–µ–ø:"
            )
            
            keyboard = get_search_results_keyboard(results, content_type)
            await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del pin_manager_states[user_id]
            return
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            del pin_manager_states[user_id]
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if message.from_user and message.from_user.id in ADMIN_IDS and any(waiting_admin_reply.get(admin_id) for admin_id in ADMIN_IDS):
        target_id = None
        admin_reply_id = None
        for admin_id in ADMIN_IDS:
            if waiting_admin_reply.get(admin_id):
                target_id = waiting_admin_reply.pop(admin_id, None)
                admin_reply_id = admin_id
                break
        if target_id:
            try:
                if message.text:
                    await bot.send_message(target_id, f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}", parse_mode="HTML")
                    await message.reply("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
                    logging.info(f"[ADMIN_REPLY] Admin {admin_reply_id} replied to user {target_id}: {message.text[:50]}...")
                    return
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                logging.error(f"[ADMIN_REPLY_ERROR] Failed to send admin reply: {e}")
                return
    
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏ ===
    if message.from_user.id in broadcast_state and broadcast_state[message.from_user.id].get("step") in ["content", "custom_button"]:
        state = broadcast_state[message.from_user.id]
        
        if state["step"] == "content":
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_saved = False
            
            if message.text:
                logging.info(f"Admin {message.from_user.id} sending text broadcast: {message.text[:50]}...")
                state["type"] = "text"
                state["content"] = {"text": message.text}
                content_saved = True
                
            elif message.photo:
                logging.info(f"Admin {message.from_user.id} sending photo broadcast.")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                if message.media_group_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_item = {
                        "type": "photo",
                        "media": message.photo[-1].file_id,
                        "caption": message.caption or ""
                    }
                    state["media_group"].append(media_item)
                    state["type"] = "media_group"
                    state["media_group_id"] = message.media_group_id
                    
                    # –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–∑ –≥—Ä—É–ø–ø—ã
                    await message.reply("üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–ª—å–±–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                    asyncio.create_task(finish_media_group_after_delay(message.from_user.id, message.media_group_id))
                    return
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
                    state["type"] = "photo"
                    state["content"] = {
                        "photo": message.photo[-1].file_id,
                        "caption": message.caption or ""
                    }
                    content_saved = True
                    
            elif message.video:
                logging.info(f"Admin {message.from_user.id} sending video broadcast.")
                if message.media_group_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    media_item = {
                        "type": "video",
                        "media": message.video.file_id,
                        "caption": message.caption or ""
                    }
                    state["media_group"].append(media_item)
                    state["type"] = "media_group"
                    state["media_group_id"] = message.media_group_id
                    
                    await message.reply("üé• –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–ª—å–±–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                    asyncio.create_task(finish_media_group_after_delay(message.from_user.id, message.media_group_id))
                    return
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ –≤–∏–¥–µ–æ
                    state["type"] = "video"
                    state["content"] = {
                        "video": message.video.file_id,
                        "caption": message.caption or ""
                    }
                    content_saved = True
                    
            elif message.document:
                logging.info(f"Admin {message.from_user.id} sending document broadcast.")
                state["type"] = "document"
                state["content"] = {
                    "document": message.document.file_id,
                    "caption": message.caption or ""
                }
                content_saved = True
                
            elif message.audio:
                logging.info(f"Admin {message.from_user.id} sending audio broadcast.")
                state["type"] = "audio"
                state["content"] = {
                    "audio": message.audio.file_id,
                    "caption": message.caption or ""
                }
                content_saved = True
                
            elif message.voice:
                logging.info(f"Admin {message.from_user.id} sending voice broadcast.")
                state["type"] = "voice"
                state["content"] = {
                    "voice": message.voice.file_id,
                    "caption": message.caption or ""
                }
                content_saved = True
                
            elif message.video_note:
                logging.info(f"Admin {message.from_user.id} sending video_note broadcast.")
                state["type"] = "video_note"
                state["content"] = {
                    "video_note": message.video_note.file_id
                }
                content_saved = True
                
            elif message.sticker:
                logging.info(f"Admin {message.from_user.id} sending sticker broadcast.")
                state["type"] = "sticker"
                state["content"] = {
                    "sticker": message.sticker.file_id
                }
                content_saved = True
                
            elif message.animation:
                logging.info(f"Admin {message.from_user.id} sending animation broadcast.")
                state["type"] = "animation"
                state["content"] = {
                    "animation": message.animation.file_id,
                    "caption": message.caption or ""
                }
                content_saved = True
                
            elif message.location:
                logging.info(f"Admin {message.from_user.id} sending location broadcast.")
                state["type"] = "location"
                state["content"] = {
                    "latitude": message.location.latitude,
                    "longitude": message.location.longitude
                }
                content_saved = True
                
            elif message.contact:
                logging.info(f"Admin {message.from_user.id} sending contact broadcast.")
                state["type"] = "contact"
                state["content"] = {
                    "phone_number": message.contact.phone_number,
                    "first_name": message.contact.first_name,
                    "last_name": message.contact.last_name,
                    "user_id": message.contact.user_id
                }
                content_saved = True
                
            else:
                await message.reply(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, —Å—Ç–∏–∫–µ—Ä—ã, GIF, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç—ã."
                )
                return
            
            if content_saved:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–Ω–æ–ø–æ–∫
                state["step"] = "buttons"
                await message.reply(
                    "‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    parse_mode="HTML",
                    reply_markup=get_broadcast_buttons_keyboard(state["selected_buttons"])
                )
            return
            
        elif state["step"] == "custom_button" and message.text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
            try:
                if "-" not in message.text:
                    await message.reply(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-https://example.com</code>\n\n"
                        "–ü—Ä–∏–º–µ—Ä—ã:\n"
                        "<code>–ù–∞—à —Å–∞–π—Ç-https://example.com</code>\n"
                        "<code>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è-https://t.me/channel</code>",
                        parse_mode="HTML"
                    )
                    return
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–µ—Ñ–∏—Å—É
                parts = message.text.rsplit("-", 1)
                if len(parts) != 2:
                    await message.reply(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-https://example.com</code>",
                        parse_mode="HTML"
                    )
                    return
                
                text, url = parts
                text = text.strip()
                url = url.strip()
                
                if not text or not url:
                    await message.reply("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                    return
                
                if not (url.startswith("http://") or url.startswith("https://")):
                    await message.reply("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                state["button_configs"].append({
                    "text": text,
                    "url": url
                })
                
                state["step"] = "buttons"
                await message.reply(
                    f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                    f"üìù –¢–µ–∫—Å—Ç: {text}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {url}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
                    parse_mode="HTML",
                    reply_markup=get_broadcast_buttons_keyboard(state["selected_buttons"])
                )
                return
                
            except Exception as e:
                logging.error(f"Error creating custom button: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        return
    
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å–º–æ–≤ ===
    if message.from_user.id in addserial_state:
        await handle_addserial_state(message)
        return
    
    if message.from_user.id in addfilm_state:
        await handle_addfilm_state(message)
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
    if not message.text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
        if message.from_user.id in broadcast_state and broadcast_state[message.from_user.id].get("step") == "content":
            # –õ–æ–≥–∏–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ
            pass
        return
    
    logging.info(f"[universal_handler] Received message from {message.from_user.id}. Text: {message.text[:50]}...")
    args = ''
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.text and len(message.text.split()) > 1:
        args = message.text.split()[1]
    if not args and message.text and message.text.startswith('/start '):
        args = message.text[len('/start '):].strip()
    if args.startswith("episode_"):
        try:
            _, season, episode = args.split("_")
            season = int(season)
            episode = int(episode)
            fake_callback = type('obj', (object,), {
                'data': f'episode_{season}_{episode}',
                'from_user': message.from_user,
                'message': message,
                'answer': lambda *a, **k: None,
                'chat': message.chat
            })
            await handle_callback(fake_callback)
            return
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
            return
    elif args.startswith("lbsc_episode_"):
        try:
            _, season, episode = args.split("_")
            season = int(season)
            episode = int(episode)
            fake_callback = type('obj', (object,), {
                'data': f'lbsc_episode_{season}_{episode}',
                'from_user': message.from_user,
                'message': message,
                'answer': lambda *a, **k: None,
                'chat': message.chat
            })
            await handle_callback(fake_callback)
            return
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
            return
    elif args.startswith("phf_episode_"):
        try:
            _, season, episode = args.split("_")
            season = int(season)
            episode = int(episode)
            fake_callback = type('obj', (object,), {
                'data': f'phf_episode_{season}_{episode}',
                'from_user': message.from_user,
                'message': message,
                'answer': lambda *a, **k: None,
                'chat': message.chat
            })
            await handle_callback(fake_callback)
            return
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
            return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
    if waiting_for_admin_message.get(message.from_user.id):
        waiting_for_admin_message.pop(message.from_user.id, None)
        # –ù–ï —É–¥–∞–ª—è–µ–º tech_support_state –∑–¥–µ—Å—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        header = (
            "üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞\n\n"
            f"–û—Ç: <b>{message.from_user.first_name or ''}</b> (@{message.from_user.username or '‚Äî'})\n"
            f"ID: <code>{message.from_user.id}</code>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ:" 
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_user_{message.from_user.id}")]])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, header, parse_mode="HTML", reply_markup=kb)
                # –ü–µ—Ä–µ—Å–ª–∞—Ç—å/—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞)
                await bot.copy_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
            except Exception as e:
                logging.error(f"Error sending message to admin {admin_id}: {e}")
        
        try:
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∑–¥–µ—Å—å.")
        except Exception:
            pass
        return
    # --- –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞ –ø–æ reply_to_message (–æ—Å—Ç–∞–≤–ª—è—é –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) ---
    if message.reply_to_message and message.from_user.id == 7850455999:
        match = re.search(r"ID:</b> <code>(\d+)</code>", message.reply_to_message.text or "")
        if match:
            target_id = int(match.group(1))
            # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
            if target_id in tech_support_state:
                del tech_support_state[target_id]
            await bot.send_message(target_id, f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{message.text}", parse_mode="HTML")
            await message.reply("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    if message.video:
        if message.from_user.id in ADMIN_IDS:
            await message.reply(f"file_id –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–¥:\n'{message.video.file_id}'\n–¢–∏–ø: video")
    elif message.photo:
        if message.from_user.id in ADMIN_IDS:
            fid = message.photo[-1].file_id
            await message.reply(f"file_id –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–¥:\n'{fid}'\n–¢–∏–ø: photo")
    elif message.document:
        if message.from_user.id in ADMIN_IDS:
            await message.reply(f"file_id –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–¥:\n'{message.document.file_id}'\n–¢–∏–ø: document")
    # --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    if message.from_user.id in ADMIN_IDS and broadcast_state.get(message.from_user.id):
        logging.info(f"Admin {message.from_user.id} in broadcast state. Current step: {broadcast_state[message.from_user.id].get('step')}")
        state = broadcast_state[message.from_user.id]
        if state["step"] == "photo" and message.photo:
            logging.info(f"Admin {message.from_user.id} sending photo broadcast.")
            state["type"] = "photo"
            file_id = message.photo[-1].file_id
            state["preview"] = {
                "photo": file_id,
                "caption": message.caption or ""
            }
            state["step"] = "confirm"
            await bot.send_photo(
                message.from_user.id,
                file_id,
                caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{message.caption or ''}",
                parse_mode="HTML",
                reply_markup=get_broadcast_confirm_keyboard()
            )
            return
        if state["step"] == "document" and message.document:
            file_id = message.document.file_id
            caption = message.caption or ""
            state["type"] = "document"
            state["preview"] = {"document": file_id, "caption": caption}
            state["step"] = "confirm"
            await bot.send_document(
                message.from_user.id,
                file_id,
                caption=f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{caption}",
                parse_mode="HTML",
                reply_markup=get_broadcast_confirm_keyboard()
            )
            return
        if state["step"] == "custom_button" and message.text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
            try:
                if "|" not in message.text:
                    await message.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com</code>",
                        parse_mode="HTML"
                    )
                    return
                
                text, url = message.text.split("|", 1)
                text = text.strip()
                url = url.strip()
                
                if not text or not url:
                    await message.reply(
                        "‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.",
                        parse_mode="HTML"
                    )
                    return
                
                if not url.startswith(("http://", "https://")):
                    await message.reply(
                        "‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
                        parse_mode="HTML"
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                custom_button = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=text, url=url)]
                ])
                state["buttons"] = custom_button
                
                await message.reply(
                    f"‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {text}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É.",
                    parse_mode="HTML",
                    reply_markup=get_broadcast_custom_button_keyboard()
                )
                return
                
            except Exception as e:
                await message.reply(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.",
                    parse_mode="HTML"
                )
                return
        if state["step"] in ("photo", "document") and not (message.photo or message.document):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é.")
            return
    # --- –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å help –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å ---
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä –ö–æ—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_id = message.from_user.id
    if user_id not in stats.get("lbsc_votes", {}):
        stats.setdefault("lbsc_votes", {})
        stats["lbsc_votes"][user_id] = {}


# === –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–´–ú –ö–û–ù–¢–ï–ù–¢–û–ú ===
# –î–æ–±–∞–≤–∏–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–æ–º
@router.message(Command("pin"))
async def pin_content_simple(message: Message):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    args = message.text.split()
    if len(args) < 3:
        await message.reply(
            "üìå <b>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>/pin &lt;movie|series&gt; &lt;–∫–ª—é—á&gt; [–ø–æ—Ä—è–¥–æ–∫]</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>/pin series phf 1</code> - –∑–∞–∫—Ä–µ–ø–∏—Ç—å –§–∏–Ω–µ—Å –∏ –§–µ—Ä–± –ø–µ—Ä–≤—ã–º\n"
            "‚Ä¢ <code>/pin series lbsc 2</code> - –∑–∞–∫—Ä–µ–ø–∏—Ç—å –õ–µ–¥–∏ –ë–∞–≥ –≤—Ç–æ—Ä—ã–º\n"
            "‚Ä¢ <code>/pin movie avatar 3</code> - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ñ–∏–ª—å–º –ê–≤–∞—Ç–∞—Ä —Ç—Ä–µ—Ç—å–∏–º",
            parse_mode="HTML"
        )
        return
    
    content_type = args[1].lower()
    content_key = args[2]
    pin_order = int(args[3]) if len(args) > 3 else 0
    
    if content_type not in ['movie', 'series']:
        await message.reply("‚ùå –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'movie' –∏–ª–∏ 'series'")
        return
    
    try:
        from db import add_pinned_content, is_content_pinned
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ
        if is_content_pinned(content_type, content_key):
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä–µ–ø
        success = add_pinned_content(content_type, content_key, pin_order)
        
        if success:
            await message.reply(
                f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω!</b>\n\n"
                f"üîë –ö–ª—é—á: <code>{content_key}</code>\n"
                f"üóÇ –¢–∏–ø: {content_type}\n"
                f"üìä –ü–æ—Ä—è–¥–æ–∫: {pin_order}",
                parse_mode="HTML"
            )
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("unpin"))
async def unpin_content_simple(message: Message):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.reply(
            "üìå <b>–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>/unpin &lt;movie|series&gt; &lt;–∫–ª—é—á&gt;</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>/unpin series phf</code> - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –§–∏–Ω–µ—Å –∏ –§–µ—Ä–±\n"
            "‚Ä¢ <code>/unpin movie avatar</code> - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Ñ–∏–ª—å–º –ê–≤–∞—Ç–∞—Ä",
            parse_mode="HTML"
        )
        return
    
    content_type = args[1].lower()
    content_key = args[2]
    
    if content_type not in ['movie', 'series']:
        await message.reply("‚ùå –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'movie' –∏–ª–∏ 'series'")
        return
    
    try:
        from db import remove_pinned_content, is_content_pinned
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        if not is_content_pinned(content_type, content_key):
            await message.reply(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç '{content_key}' –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–∫—Ä–µ–ø–∞
        success = remove_pinned_content(content_type, content_key)
        
        if success:
            await message.reply(
                f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω!</b>\n\n"
                f"üîë –ö–ª—é—á: <code>{content_key}</code>\n"
                f"üóÇ –¢–∏–ø: {content_type}",
                parse_mode="HTML"
            )
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.message(Command("newss"))
async def send_new_series_news(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /newss (—Å–µ–∑–æ–Ω) (—Å–µ—Ä–∏—è)")
        return
    try:
        season = int(args[1])
        episode = int(args[2])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /newss 8 3")
        return
    text = f"üéâ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è!\n–°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {episode}!\n–°–º–æ—Ç—Ä–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ –±–æ—Ç–µ!"
    count = 0
    # –£–¥–∞–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    # for user_id in subscribers: # subscribers is removed
    #     try:
    #         await bot.send_message(user_id, text)
    #         count += 1
    #     except Exception:
    #         pass
    await message.reply(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")

# --- –£—Ç–∏–ª–∏—Ç–∞: –ø–µ—Ä–µ–∑–∞–ª–∏–≤ —Ñ–∏–ª—å–º–∞ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π, —á—Ç–æ–±—ã inline-–ø–æ–∏—Å–∫ –ø–æ–∫–∞–∑—ã–≤–∞–ª –ø–æ—Å—Ç–µ—Ä ---
@router.message(Command("setmoviepreview"))
async def set_movie_preview(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –§–æ—Ä–º–∞—Ç: /setmoviepreview <movie_key> <video_file_id> <poster_file_id>
    # –ü—Ä–∏–º–µ—Ä: /setmoviepreview deadpool_wolverine BAACAg... AgACAg...
    args = message.text.split()
    if len(args) != 4:
        await message.reply("–§–æ—Ä–º–∞—Ç: /setmoviepreview <movie_key> <video_file_id> <poster_file_id>")
        return
    _, movie_key, video_fid, poster_fid = args
    from storage import MOVIES
    meta = MOVIES.get(movie_key)
    if not meta:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π movie_key")
        return
    title = meta.get('title', movie_key)

    await message.reply(f"–ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä–µ–∑–∞–ª–∏–≤: <b>{title}</b>\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1-2 –º–∏–Ω—É—Ç...", parse_mode="HTML")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã–µ URL –¥–ª—è –≤–∏–¥–µ–æ –∏ –ø–æ—Å—Ç–µ—Ä–∞
        vfile = await bot.get_file(video_fid)
        pfile = await bot.get_file(poster_fid)
        video_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{vfile.file_path}"
        poster_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{pfile.file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–∞ —Ñ–∞–π–ª–∞
        async with aiohttp.ClientSession() as session:
            async with session.get(video_url) as vr:
                video_bytes = await vr.read()
            async with session.get(poster_url) as pr:
                poster_bytes = await pr.read()

        video_input = BufferedInputFile(video_bytes, filename="movie.mp4")
        poster_input = BufferedInputFile(poster_bytes, filename="poster.jpg")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π file_id
        sent = await bot.send_video(
            chat_id=message.chat.id,
            video=video_input,
            thumbnail=poster_input,
            caption=f"<b>{title}</b> (–ø–µ—Ä–µ–∑–∞–ª–∏—Ç–æ —Å –ø–æ—Å—Ç–µ—Ä–æ–º)",
            parse_mode="HTML"
        )
        new_file_id = sent.video.file_id if sent.video else None
        if not new_file_id:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π file_id —É –≤–∏–¥–µ–æ")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –∫—ç—à–µ storage
        try:
            from db import bulk_upsert_movies
            from storage import MOVIES as MOVIES_CACHE
            # persist
            bulk_upsert_movies([(
                movie_key,
                title,
                new_file_id,
                meta.get('type', 'video'),
                meta.get('poster_url'),
                meta.get('thumb_url') or meta.get('poster_url'),
                meta.get('aliases'),
                meta.get('share_query')
            )])
            # update in-memory mirror
            MOVIES_CACHE.setdefault(movie_key, {
                'title': title,
                'file_id': new_file_id,
                'type': meta.get('type', 'video'),
                'poster_url': meta.get('poster_url'),
                'thumb_url': meta.get('thumb_url') or meta.get('poster_url'),
                'aliases': meta.get('aliases') or [],
                'share_query': meta.get('share_query')
            })
            MOVIES_CACHE[movie_key]['file_id'] = new_file_id
        except Exception:
            # fallback: just mutate meta so current process sees the new file_id
            meta['file_id'] = new_file_id

        await message.reply(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–π file_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å inline-–ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å—Ç–µ—Ä —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–ª—å–º —Å—Ä–∞–∑—É –ø–æ –∫–ª–∏–∫—É.\n<code>{new_file_id}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ª–∏–≤–∞: {e}")


# === –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–´–ú –ö–û–ù–¢–ï–ù–¢–û–ú ===

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–∫—Ä–µ–ø–æ–º
pin_manager_states = {}

def get_pin_manager_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–æ–º"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä–µ–ø–∞", callback_data="pin_view")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫—Ä–µ–ø", callback_data="pin_add")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="pin_search")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="pin_reorder")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="pin_close")]
    ])
    return keyboard

def get_content_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã", callback_data="pin_type_movie")],
        [InlineKeyboardButton(text="üì∫ –°–µ—Ä–∏–∞–ª—ã", callback_data="pin_type_series")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_back_main")]
    ])
    return keyboard

def get_pinned_content_keyboard(pinned_items):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    buttons = []
    for item in pinned_items:
        content_type = item['content_type']
        content_key = item['content_key']
        pin_order = item['pin_order']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if content_type == 'movie':
            from storage import MOVIES
            title = MOVIES.get(content_key, {}).get('title', content_key)
            icon = "üé¨"
        else:
            from db import load_all_series
            db_series = load_all_series()
            series_info = next((s for s in db_series if s['key'] == content_key), None)
            title = series_info['title'] if series_info else content_key
            icon = "üì∫"
        
        button_text = f"{icon} {title} (#{pin_order})"
        callback_data = f"pin_manage_{content_type}_{content_key}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_back_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_content_action_keyboard(content_type, content_key):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫—Ä–µ–ø–∞", callback_data=f"pin_remove_{content_type}_{content_key}")],
        [InlineKeyboardButton(text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data=f"pin_change_order_{content_type}_{content_key}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="pin_view")]
    ])
    return keyboard

@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    from config import BOT_USERNAME
    
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –Ω–∞—É—á—É —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n"
        "üòä –ò –æ—Ç–≤–µ—á—É –Ω–∞ —Å–∞–º—ã–µ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã! ‚ù§Ô∏è\n\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –∏/–∏–ª–∏ —Å–µ—Ä–∏–∞–ª –≤–∞–º –Ω—É–∂–Ω–æ "
        "–Ω–∞–∂–∞—Ç—å –Ω–∞ /start‚Üí \"–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\" –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –ø–∏—à–∏—Ç–µ, —á—Ç–æ "
        f"—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –ü—Ä–∏–º–µ—Ä: @{BOT_USERNAME} tor canorax\n\n"
        "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –° –∫–∞–∂–¥—ã–º –¥–Ω–µ–º. –° –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç–æ–π. "
        "–° –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–æ–π. –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç —É–Ω—ã–≤–∞—Ç—å! "
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ –Ω–∞ /start –∏ \"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º\". "
        "–ù–µ –±–æ–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å! –ê–¥–º–∏–Ω –≤–∞—Å –Ω–µ —É–∫—É—Å–∏—Ç!"
    )
    
    await message.reply(text, parse_mode="HTML", reply_markup=get_main_menu_keyboard())

@router.message(Command("quickpin"))
async def quick_pin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–∫—Ä–µ–ø"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    popular_content = [
        {'type': 'series', 'key': 'phf', 'name': '–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±'},
        {'type': 'series', 'key': 'lbsc', 'name': '–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç'},
        {'type': 'series', 'key': 'rm', 'name': '–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏'},
        {'type': 'series', 'key': 'wnd', 'name': '–£—ç–Ω—Å–¥–µ–π'},
        {'type': 'series', 'key': 'loki', 'name': '–õ–æ–∫–∏'},
    ]
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    buttons = []
    for content in popular_content:
        icon = "üé¨" if content['type'] == 'movie' else "üì∫"
        button_text = f"{icon} {content['name']}"
        callback_data = f"quickpin_{content['type']}_{content['key']}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    buttons.append([InlineKeyboardButton(text="üìå –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="open_pin_manager")])
    buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="pin_close")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    text = (
        "‚ö° <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä–µ–ø</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä–µ–ø:"
    )
    
    await message.reply(text, parse_mode="HTML", reply_markup=keyboard)

async def search_content_by_key(content_type: str, search_query: str, limit: int = 10):
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    results = []
    try:
        from vibix_api import vibix_api
        page = await vibix_api.list_links(limit=100)
        if page and page.get('data'):
            q = (search_query or '').lower()
            for item in page['data']:
                title = (item.get('name_rus') or item.get('name') or '')
                if q and q not in title.lower():
                    continue
                if content_type == 'movie' and item.get('type') != 'movie':
                    continue
                if content_type != 'movie' and item.get('type') != 'serial':
                    continue
                key = str(item.get('kp_id') or item.get('imdb_id') or item.get('id'))
                results.append({'key': key, 'title': title, 'type': item.get('type')})
                if len(results) >= limit:
                    break
    except Exception:
        pass
    return results

def get_search_results_keyboard(results, content_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    buttons = []
    for result in results:
        title = result['title']
        key = result['key']
        icon = "üé¨" if content_type == 'movie' else "üì∫"
        
        button_text = f"{icon} {title}"
        callback_data = f"pin_add_confirm_{content_type}_{key}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_add")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä–µ–ø–∞
@router.callback_query(lambda c: c.data.startswith("pin_"))
async def handle_pin_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä–µ–ø–∞"""
    data = callback.data
    user_id = callback.from_user.id
    
    if user_id not in ADMIN_IDS:
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "pin_back_main":
        text = (
            "üìå <b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è "
            "–≤ –Ω–∞—á–∞–ª–µ –∏–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_pin_manager_keyboard())
        await callback.answer()
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif data == "pin_view":
        try:
            from db import get_pinned_content
            pinned = get_pinned_content()
            
            if not pinned:
                text = "üìå <b>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b>\n\n‚ùå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_back_main")]
                ])
            else:
                text = "üìå <b>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
                keyboard = get_pinned_content_keyboard(pinned)
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            await callback.answer()
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä–µ–ø - –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    elif data == "pin_add":
        text = "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫—Ä–µ–ø</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:"
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_content_type_keyboard())
        await callback.answer()
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    elif data.startswith("pin_type_"):
        content_type = data.split("_")[2]  # movie –∏–ª–∏ series
        pin_manager_states[user_id] = {
            'action': 'add',
            'content_type': content_type,
            'step': 'waiting_search'
        }
        
        type_name = "—Ñ–∏–ª—å–º–æ–≤" if content_type == "movie" else "—Å–µ—Ä–∏–∞–ª–æ–≤"
        text = (
            f"üîç <b>–ü–æ–∏—Å–∫ {type_name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ {type_name}.\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>avatar</code> –∏–ª–∏ <code>–ê–≤–∞—Ç–∞—Ä</code>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_add")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif data.startswith("pin_add_confirm_"):
        parts = data.split("_", 3)
        content_type = parts[2]
        content_key = parts[3]
        
        try:
            from db import add_pinned_content, get_pinned_content, is_content_pinned
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ
            if is_content_pinned(content_type, content_key):
                await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω", show_alert=True)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
            pinned = get_pinned_content()
            next_order = max([item['pin_order'] for item in pinned], default=0) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä–µ–ø
            success = add_pinned_content(content_type, content_key, next_order)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if content_type == 'movie':
                    from storage import MOVIES
                    title = MOVIES.get(content_key, {}).get('title', content_key)
                else:
                    from db import load_all_series
                    db_series = load_all_series()
                    series_info = next((s for s in db_series if s['key'] == content_key), None)
                    title = series_info['title'] if series_info else content_key
                
                type_name = "–§–∏–ª—å–º" if content_type == "movie" else "–°–µ—Ä–∏–∞–ª"
                text = (
                    f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫—Ä–µ–ø!</b>\n\n"
                    f"üìå {type_name}: <b>{title}</b>\n"
                    f"üîë –ö–ª—é—á: <code>{content_key}</code>\n"
                    f"üìä –ü–æ—Ä—è–¥–æ–∫: {next_order}"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä–µ–ø–∞", callback_data="pin_view")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="pin_back_main")]
                ])
                
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    elif data.startswith("pin_manage_"):
        parts = data.split("_", 2)
        content_info = parts[2]  # "movie_key" –∏–ª–∏ "series_key"
        content_type, content_key = content_info.split("_", 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        if content_type == 'movie':
            from storage import MOVIES
            title = MOVIES.get(content_key, {}).get('title', content_key)
            icon = "üé¨"
        else:
            from db import load_all_series
            db_series = load_all_series()
            series_info = next((s for s in db_series if s['key'] == content_key), None)
            title = series_info['title'] if series_info else content_key
            icon = "üì∫"
        
        text = (
            f"{icon} <b>{title}</b>\n\n"
            f"üîë –ö–ª—é—á: <code>{content_key}</code>\n"
            f"üóÇ –¢–∏–ø: {content_type}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML", 
                                       reply_markup=get_content_action_keyboard(content_type, content_key))
        await callback.answer()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–∫—Ä–µ–ø–∞
    elif data.startswith("pin_remove_"):
        parts = data.split("_", 2)
        content_info = parts[2]
        content_type, content_key = content_info.split("_", 1)
        
        try:
            from db import remove_pinned_content
            success = remove_pinned_content(content_type, content_key)
            
            if success:
                text = "‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–∫—Ä–µ–ø–∞!</b>"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä–µ–ø–∞", callback_data="pin_view")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="pin_back_main")]
                ])
                
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif data.startswith("quickpin_"):
        parts = data.split("_", 2)
        content_type = parts[1]
        content_key = parts[2]
        
        try:
            from db import add_pinned_content, get_pinned_content, is_content_pinned
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ
            if is_content_pinned(content_type, content_key):
                await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω", show_alert=True)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫
            pinned = get_pinned_content()
            next_order = max([item['pin_order'] for item in pinned], default=0) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫—Ä–µ–ø
            success = add_pinned_content(content_type, content_key, next_order)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if content_type == 'movie':
                    from storage import MOVIES
                    title = MOVIES.get(content_key, {}).get('title', content_key)
                else:
                    from db import load_all_series
                    db_series = load_all_series()
                    series_info = next((s for s in db_series if s['key'] == content_key), None)
                    title = series_info['title'] if series_info else content_key
                
                await callback.answer(f"‚úÖ {title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫—Ä–µ–ø!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = (
                    f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫—Ä–µ–ø!</b>\n\n"
                    f"üìå {title}\n"
                    f"üîë –ö–ª—é—á: <code>{content_key}</code>\n"
                    f"üìä –ü–æ—Ä—è–¥–æ–∫: {next_order}"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä–µ–ø–∞", callback_data="pin_view")],
                    [InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="quickpin_menu")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="pin_back_main")]
                ])
                
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
    elif data == "open_pin_manager":
        text = (
            "üìå <b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è "
            "–≤ –Ω–∞—á–∞–ª–µ –∏–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_pin_manager_keyboard())
        await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –±—ã—Å—Ç—Ä–æ–º—É –º–µ–Ω—é
    elif data == "quickpin_menu":
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        popular_content = [
            {'type': 'series', 'key': 'phf', 'name': '–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±'},
            {'type': 'series', 'key': 'lbsc', 'name': '–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä-–ö–æ—Ç'},
            {'type': 'series', 'key': 'rm', 'name': '–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏'},
            {'type': 'series', 'key': 'wnd', 'name': '–£—ç–Ω—Å–¥–µ–π'},
            {'type': 'series', 'key': 'loki', 'name': '–õ–æ–∫–∏'},
        ]
        
        buttons = []
        for content in popular_content:
            icon = "üé¨" if content['type'] == 'movie' else "üì∫"
            button_text = f"{icon} {content['name']}"
            callback_data = f"quickpin_{content['type']}_{content['key']}"
            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        buttons.append([InlineKeyboardButton(text="üìå –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="open_pin_manager")])
        buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="pin_close")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = (
            "‚ö° <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä–µ–ø</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä–µ–ø:"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif data == "pin_search":
        text = (
            "üîç <b>–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ <code>/pin series –∫–ª—é—á –ø–æ—Ä—è–¥–æ–∫</code>\n"
            "‚Ä¢ <code>/pin movie –∫–ª—é—á –ø–æ—Ä—è–¥–æ–∫</code>"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_back_main")]
        ])
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    
    # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    elif data == "pin_reorder":
        text = (
            "üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ <code>/pin series –∫–ª—é—á –Ω–æ–≤—ã–π_–ø–æ—Ä—è–¥–æ–∫</code>\n"
            "‚Ä¢ <code>/unpin series –∫–ª—é—á</code>"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pin_back_main")]
        ])
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    elif data == "pin_close":
        await callback.message.delete()
        await callback.answer()



# Helper functions for inline query processing
def _norm(s: str) -> str:
    s = (s or "").lower()
    s = s.replace('—ë', '–µ')
    for ch in [',', ';', '|', ':', '\\', '/', '\n', '\t', '(', ')', '[', ']', '"', "'", '‚Äî', '‚Äì', '-']:
        s = s.replace(ch, ' ')
    s = re.sub(r"\s+", " ", s).strip()
    return s

def _tokens(s: str) -> list:
    return [t for t in _norm(s).split(' ') if t]

def _lev(a: str, b: str, max_d: int = 2) -> int:
    # –õ—ë–≥–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —Å —Ä–∞–Ω–Ω–∏–º –≤—ã—Ö–æ–¥–æ–º
    if a == b:
        return 0
    la, lb = len(a), len(b)
    if abs(la - lb) > max_d:
        return max_d + 1
    prev = list(range(lb + 1))
    for i, ca in enumerate(a, 1):
        cur = [i]
        min_row = cur[0]
        for j, cb in enumerate(b, 1):
            cost = 0 if ca == cb else 1
            v = min(prev[j] + 1, cur[j-1] + 1, prev[j-1] + cost)
            cur.append(v)
            if v < min_row:
                min_row = v
        if min_row > max_d:
            return max_d + 1
        prev = cur
    return prev[-1]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
@dp.inline_query()
async def handle_inline_query(query: InlineQuery):
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = query.from_user
    if user:
        save_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language_code=user.language_code,
            is_bot=user.is_bot
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if user and user.id not in ADMIN_IDS and not is_premium_user(user.id):
        if not await check_subscription(user.id):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            text, _ = get_subscription_message(user.id)
            
            results = [
                InlineQueryResultArticle(
                    id="subscription_required",
                    title="‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
                    description="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º",
                    input_message_content=InputTextMessageContent(
                        message_text=text,
                        parse_mode="HTML"
                    ),
                    thumb_url="https://i.imgur.com/subscription.png"
                )
            ]
            
            await query.answer(results, cache_time=10, is_personal=True)
            return
    
    q = (query.query or '').strip()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    if q:
        username = f"@{user.username}" if user and user.username else f"ID:{user.id if user else 'Unknown'}"
        logging.info(f"üîç –ü–æ–∏—Å–∫: '{q}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    # logging.info(f"[INLINE_QUERY] ========== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò ==========")
    # logging.info(f"[INLINE_QUERY] –ó–∞–ø—Ä–æ—Å: '{q}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id if user else 'Unknown'}")
    # logging.info(f"[INLINE_QUERY] –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {not q}")
    
    # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: —Å–ø–∏—Å–æ–∫ –∏–∑ Vibix —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 50
    if not q:
        results: list = []
        # –í Telegram offset ‚Äî —Å—Ç—Ä–æ–∫–∞. –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        try:
            page = int(query.offset or "1")
            if page < 1:
                page = 1
        except Exception:
            page = 1

        from vibix_api import vibix_api
        vibix_page = await vibix_api.list_links(page=page, limit=50)
        data = (vibix_page or {}).get('data') or []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        items_with_posters = []
        items_without_posters = []
        
        for i, item in enumerate(data):
            title = item.get('name_rus') or item.get('name') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            thumb_url = item.get('poster_url') or None
            key = str(item.get('kp_id') or item.get('imdb_id') or item.get('id'))
            is_serial = item.get('type') == 'serial'
            message_code = f"/vibix_series_{key}" if is_serial else f"/vibix_movie_{key}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –∂–∞–Ω—Ä–∞–º–∏
            description_parts = ['üì∫ —Å–µ—Ä–∏–∞–ª' if is_serial else 'üé¨ —Ñ–∏–ª—å–º']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            kp_rating = item.get('kp_rating')
            imdb_rating = item.get('imdb_rating')
            max_rating = 0.0
            
            if kp_rating:
                try:
                    kp_float = float(kp_rating)
                    if kp_float > 0:
                        description_parts.append(f"–ö–ü: {kp_rating}")
                        max_rating = max(max_rating, kp_float)
                except (ValueError, TypeError):
                    pass
            
            if imdb_rating:
                try:
                    imdb_float = float(imdb_rating)
                    if imdb_float > 0:
                        description_parts.append(f"IMDb: {imdb_rating}")
                        max_rating = max(max_rating, imdb_float)
                except (ValueError, TypeError):
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
            genres = item.get('genre', [])
            if genres and isinstance(genres, list):
                genres_text = ', '.join(genres[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∂–∞–Ω—Ä–∞
                description_parts.append(genres_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
            year = item.get('year')
            if year:
                description_parts.append(str(year))
            
            description = ' | '.join(description_parts)
            
            result_item = InlineQueryResultArticle(
                id=f"vibix_{item.get('type')}_{item.get('id')}",
                title=title,
                description=description,
                input_message_content=InputTextMessageContent(
                    message_text=message_code,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                ),
                thumb_url=thumb_url
            )
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–æ—Å—Ç–µ—Ä–∞
            if thumb_url:
                items_with_posters.append((result_item, is_serial, title, max_rating))
            else:
                items_without_posters.append((result_item, is_serial, title, max_rating))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±—ã–≤–∞–Ω–∏–µ), –ø–æ—Ç–æ–º —Ñ–∏–ª—å–º—ã –ø–µ—Ä–µ–¥ —Å–µ—Ä–∏–∞–ª–∞–º–∏, –ø–æ—Ç–æ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        items_with_posters.sort(key=lambda x: (-x[3], x[1], x[2].lower()))  # -rating, is_serial, title
        items_without_posters.sort(key=lambda x: (-x[3], x[1], x[2].lower()))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏, –ø–æ—Ç–æ–º –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–æ–≤
        for result_item, _, _, _ in items_with_posters:
            results.append(result_item)
        
        for result_item, _, _, _ in items_without_posters:
            results.append(result_item)
                
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º page
        next_offset = ""
        meta = (vibix_page or {}).get('meta') or {}
        current = meta.get('current_page')
        last = meta.get('last_page')
        if isinstance(current, int) and isinstance(last, int) and current < last:
            next_offset = str(current + 1)
        elif len(data) == 50:
            # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –º–µ—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞
            next_offset = str(page + 1)

        try:
            await query.answer(results, cache_time=1, is_personal=True, next_offset=next_offset)
        except Exception:
            await query.answer([], cache_time=1, is_personal=True, next_offset=next_offset)
        return
    # --- –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–∞–ª–∞–º –∏ —Ñ–∏–ª—å–º–∞–º –≤ inline —á–µ—Ä–µ–∑ Vibix ---
    text = q.lower()
    
    # logging.info(f"[INLINE_QUERY] ========== –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê ==========")
    # logging.info(f"[INLINE_QUERY] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")
    # –í–∞–ª–∏–¥–∞—Ü–∏—è file_id –¥–æ –æ—Ç–≤–µ—Ç–∞ Telegram (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ Bad Request)
    import re as _re_validate
    def _is_valid_file_id(fid: str) -> bool:
        if not isinstance(fid, str) or len(fid) < 20:
            return False
        if not _re_validate.match(r'^[A-Za-z0-9_-]+$', fid):
            return False
        return fid.startswith(('BAACAg', 'AgAD', 'CgAD', 'BQAD'))
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    for ch in [',', ';', '|', '-', ':']:
        text = text.replace(ch, ' ')
    text = text.replace('x', 'x')  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º x –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ 2x3
    parts = text.split()

    def detect_show(token: str) -> str:
        aliases = {
            'rm': 'rm', 'rick': 'rm', 'rickandmorty': 'rm', 'rick_and_morty': 'rm', '—Ä–∏–∫': 'rm', '—Ä–∏–∫–º–æ—Ä—Ç–∏': 'rm',
            'phf': 'phf', 'phineas': 'phf', 'phineasandferb': 'phf', 'phineas_and_ferb': 'phf', '—Ñ–∏–Ω–µ—Å': 'phf', '—Ñ–µ—Ä–±': 'phf',
            'lb': 'lbsc', 'lbsc': 'lbsc', 'ladybug': 'lbsc', 'miraculous': 'lbsc', '–ª–µ–¥–∏': 'lbsc', '–ª–µ–¥–∏–±–∞–≥': 'lbsc', '–∫–æ—Ç': 'lbsc',
            'irh': 'irh', 'ironheart': 'irh', '–∂–µ–ª–µ–∑–Ω–æ–µ': 'irh', '—Å–µ—Ä–¥—Ü–µ': 'irh',
            'wnd': 'wnd', 'wednesday': 'wnd', '—É—ç–Ω—Å–¥—ç–π': 'wnd', '—É—ç–Ω—Å–¥–µ–π': 'wnd',
            'loki': 'loki', '–ª–æ–∫–∏': 'loki'
        }
        return aliases.get(token, '')

    show = ''
    season = None
    episode = None

    # –ü–æ–∏—Å–∫ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ Vibix API
    try:
        from vibix_api import ensure_index_loaded, search_index, build_full_index, _vibix_index, vibix_api
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏–Ω–¥–µ–∫—Å–µ
        await ensure_index_loaded()
        vibix_items = search_index(q, limit=50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        has_ratings = vibix_items and any(item.get('kp_rating') or item.get('imdb_rating') for item in vibix_items[:5])
        
        # –ï—Å–ª–∏ –≤ –∏–Ω–¥–µ–∫—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –ò–õ–ò –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
        if not vibix_items or not has_ratings:
            if not vibix_items:
                logging.info(f"[INLINE_QUERY] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Vibix API: {q} (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–Ω–¥–µ–∫—Å–µ)")
            else:
                logging.info(f"[INLINE_QUERY] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Vibix API: {q} (–Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ)")
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            from vibix_api import search_by_title
            vibix_items = await search_by_title(q, max_results=50, max_pages=10, time_limit_sec=15.0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        logging.info(f"[INLINE_QUERY] –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Vibix: {len(vibix_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        if vibix_items:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, item in enumerate(vibix_items[:3]):
                logging.info(f"[INLINE_QUERY] –≠–ª–µ–º–µ–Ω—Ç {i+1}: {item.get('name_rus')} | –ö–ü: {item.get('kp_rating')} | IMDb: {item.get('imdb_rating')} | –ñ–∞–Ω—Ä—ã: {item.get('genre')}")
        else:
            logging.warning(f"[INLINE_QUERY] –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{q}'")
        series_results = []
        movie_results = []
        if vibix_items:
            for item in vibix_items:
                title = (item.get('name_rus') or item.get('name') or '').lower()
                entry = {
                    'key': str(item.get('kp_id') or item.get('imdb_id') or item.get('id')),
                    'title': item.get('name_rus') or item.get('name') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    'poster_url': item.get('poster_url') or '',
                    'thumb_url': item.get('poster_url') or '',
                    'type': item.get('type'),
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –∂–∞–Ω—Ä–æ–≤
                    'kp_rating': item.get('kp_rating'),
                    'imdb_rating': item.get('imdb_rating'),
                    'genre': item.get('genre'),
                    'year': item.get('year')
                }
                if item.get('type') == 'serial':
                    series_results.append(entry)
                else:
                    movie_results.append(entry)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        search_results = []
        results_with_posters = []
        results_without_posters = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–∏–∞–ª—ã
        if series_results:
            for series in series_results:
                series_key = series.get('key', '')
                title = series.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                poster_url = series.get('poster_url', '')
                thumb_url = series.get('thumb_url', '') or poster_url
                
                # Fallback –Ω–∞ SERIES_POSTERS –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞ –≤ –ë–î
                if not thumb_url and series_key in SERIES_POSTERS:
                    poster_data = SERIES_POSTERS[series_key]
                    if isinstance(poster_data, dict):
                        thumb_url = poster_data.get('show') or poster_data.get(max(poster_data.keys()) if poster_data else None)
                    else:
                        thumb_url = poster_data
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –∂–∞–Ω—Ä–∞–º–∏
                description_parts = ['üì∫ —Å–µ—Ä–∏–∞–ª']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ entry
                kp_rating = series.get('kp_rating')
                imdb_rating = series.get('imdb_rating')
                genres = series.get('genre', [])
                year = series.get('year')
                
                # logging.info(f"[INLINE_SEARCH] –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∞ {title}: –ö–ü={kp_rating}, IMDb={imdb_rating}, –∂–∞–Ω—Ä—ã={genres}, –≥–æ–¥={year}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
                if kp_rating:
                    try:
                        if float(kp_rating) > 0:
                            description_parts.append(f"–ö–ü: {kp_rating}")
                    except (ValueError, TypeError):
                        pass
                
                if imdb_rating:
                    try:
                        if float(imdb_rating) > 0:
                            description_parts.append(f"IMDb: {imdb_rating}")
                    except (ValueError, TypeError):
                        pass
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
                if genres and isinstance(genres, list):
                    genres_text = ', '.join(genres[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∂–∞–Ω—Ä–∞
                    description_parts.append(genres_text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
                if year:
                    description_parts.append(str(year))
                
                description = ' | '.join(description_parts)
                
                result_item = InlineQueryResultArticle(
                    id=f"series_search_{series_key}",
                    title=title,
                    description=description,
                    input_message_content=InputTextMessageContent(
                        message_text=f"/vibix_series_{series_key}",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    ),
                    thumb_url=thumb_url if thumb_url else None
                )
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–æ—Å—Ç–µ—Ä–∞
                if thumb_url:
                    results_with_posters.append((result_item, title, 'series'))
                else:
                    results_without_posters.append((result_item, title, 'series'))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å–º—ã
        if movie_results:
            for movie in movie_results:
                title = movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                movie_key = movie.get('key', '')
                poster_url = movie.get('poster_url', '')
                thumb_url = movie.get('thumb_url', '') or poster_url
                
                # Fallback –Ω–∞ MOVIES –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞ –≤ –ë–î
                if not thumb_url and movie_key in MOVIES:
                    movie_data = MOVIES[movie_key]
                    thumb_url = movie_data.get('thumb_url') or movie_data.get('poster_url')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –∂–∞–Ω—Ä–∞–º–∏
                description_parts = ['üé¨ —Ñ–∏–ª—å–º']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ entry
                kp_rating = movie.get('kp_rating')
                imdb_rating = movie.get('imdb_rating')
                genres = movie.get('genre', [])
                year = movie.get('year')
                
                # logging.info(f"[INLINE_SEARCH] –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ {title}: –ö–ü={kp_rating}, IMDb={imdb_rating}, –∂–∞–Ω—Ä—ã={genres}, –≥–æ–¥={year}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
                if kp_rating:
                    try:
                        if float(kp_rating) > 0:
                            description_parts.append(f"–ö–ü: {kp_rating}")
                    except (ValueError, TypeError):
                        pass
                
                if imdb_rating:
                    try:
                        if float(imdb_rating) > 0:
                            description_parts.append(f"IMDb: {imdb_rating}")
                    except (ValueError, TypeError):
                        pass
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
                if genres and isinstance(genres, list):
                    genres_text = ', '.join(genres[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∂–∞–Ω—Ä–∞
                    description_parts.append(genres_text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
                if year:
                    description_parts.append(str(year))
                
                description = ' | '.join(description_parts)
                
                result_item = InlineQueryResultArticle(
                    id=f"movie_search_{movie_key}",
                    title=title,
                    description=description,
                    input_message_content=InputTextMessageContent(
                        message_text=f"/vibix_movie_{movie_key}",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    ),
                    thumb_url=thumb_url if thumb_url else None
                )
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–æ—Å—Ç–µ—Ä–∞
                if thumb_url:
                    results_with_posters.append((result_item, title, 'movie'))
                else:
                    results_without_posters.append((result_item, title, 'movie'))
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        def calculate_relevance(title, query):
            title_lower = title.lower()
            query_lower = query.lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if query_lower == title_lower:
                return 1000
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if title_lower.startswith(query_lower):
                return 900
            
            # –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ (—Ä–∞–Ω—å—à–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º)
            if query_lower in title_lower:
                return 850
            
            # –í—Å–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            query_words = query_lower.split()
            title_words = title_lower.split()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤
            exact_word_matches = sum(1 for qw in query_words if qw in title_words)
            if exact_word_matches == len(query_words):
                return 800
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ (—Å–ª–æ–≤–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ª–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            partial_matches = sum(1 for qw in query_words if any(qw in tw for tw in title_words))
            if partial_matches == len(query_words):
                return 750
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            score = exact_word_matches * 200 + (partial_matches - exact_word_matches) * 100
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤
            start_bonus = sum(50 for qw in query_words if any(tw.startswith(qw) for tw in title_words))
            
            return score + start_bonus
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        def get_rating_score(item_data):
            try:
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                title = item_data[1]
                item_type = item_data[2]
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
                source_list = series_results if item_type == 'series' else movie_results
                for source_item in source_list:
                    if source_item.get('title') == title:
                        kp_rating = source_item.get('kp_rating', 0)
                        imdb_rating = source_item.get('imdb_rating', 0)
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ö–∏–Ω–æ–ü–æ–∏—Å–∫ —Ä–µ–π—Ç–∏–Ω–≥—É, –∑–∞—Ç–µ–º IMDb
                        if kp_rating:
                            try:
                                return float(kp_rating)
                            except (ValueError, TypeError):
                                pass
                        if imdb_rating:
                            try:
                                return float(imdb_rating)
                            except (ValueError, TypeError):
                                pass
                        break
                return 0
            except:
                return 0
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ ‚Üí —Ç–∏–ø ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ
        results_with_posters.sort(key=lambda x: (
            -calculate_relevance(x[1], q),  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (—É–±—ã–≤–∞–Ω–∏–µ)
            -get_rating_score(x),           # –†–µ–π—Ç–∏–Ω–≥ (—É–±—ã–≤–∞–Ω–∏–µ)
            x[2] == 'series',               # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å–º—ã, –ø–æ—Ç–æ–º —Å–µ—Ä–∏–∞–ª—ã
            x[1].lower()                    # –ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        ))
        
        results_without_posters.sort(key=lambda x: (
            -calculate_relevance(x[1], q),  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (—É–±—ã–≤–∞–Ω–∏–µ)
            -get_rating_score(x),           # –†–µ–π—Ç–∏–Ω–≥ (—É–±—ã–≤–∞–Ω–∏–µ)
            x[2] == 'series',               # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å–º—ã, –ø–æ—Ç–æ–º —Å–µ—Ä–∏–∞–ª—ã
            x[1].lower()                    # –ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        ))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫: —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ—Å—Ç–µ—Ä–∞–º–∏, –ø–æ—Ç–æ–º –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–æ–≤
        for result_item, _, _ in results_with_posters:
            search_results.append(result_item)
        
        for result_item, _, _ in results_without_posters:
            search_results.append(result_item)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # logging.info(f"[INLINE_QUERY] –§–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(search_results)}")
        # logging.info(f"[INLINE_QUERY] –° –ø–æ—Å—Ç–µ—Ä–∞–º–∏: {len(results_with_posters)}, –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–æ–≤: {len(results_without_posters)}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if search_results:
            try:
                await query.answer(search_results, cache_time=1, is_personal=True)
            except Exception as e:
                logging.error(f"[INLINE_QUERY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return
        else:
            # –ë—ã—Å—Ç—Ä—ã–π –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" –∏ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≤ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏
            not_found = InlineQueryResultArticle(
                id="not_found",
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å",
                input_message_content=InputTextMessageContent(
                    message_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    parse_mode="HTML",
                )
            )
            try:
                await query.answer([not_found], cache_time=1, is_personal=True)
            except Exception as e:
                logging.error(f"[INLINE_QUERY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ not_found: {e}")
                return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–∏–∞–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if series_results and len(series_results) == 1:
            first_series = series_results[0]
            series_key = first_series.get('key', '')
            show = series_key
    except Exception as e:
        logging.error(f"[INLINE_QUERY] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Vibix: {e}")
        import traceback
        logging.error(f"[INLINE_QUERY] –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_result = InlineQueryResultArticle(
            id="search_error",
            title="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            input_message_content=InputTextMessageContent(
                message_text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
        )
        await query.answer([error_result], cache_time=1, is_personal=True)
        return

    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    text = q
    parts = text.split() if text else []

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not search_results:
        if q:  # –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            not_found = InlineQueryResultArticle(
                id="not_found",
                title="–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                input_message_content=InputTextMessageContent(
                    message_text=(
                        f"‚ùå <b>–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª <b>\"{q}\"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                        f"üëâ /start ‚Üí üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"
                    ),
                    parse_mode="HTML"
                ),
                description=f"–§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª \"{q}\" –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin_start")]
                ])
            )
            await query.answer([not_found], cache_time=1, is_personal=True)
        else:
            # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.answer([], cache_time=1, is_personal=True)

    q_norm = _norm(text)
    q_tokens = _tokens(text)
    years_in_q = re.findall(r"\b(19|20)\d{2}\b", q_norm)

    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MOVIES
    # insertion_order = list(MOVIES.keys())
    # order_map = {k: i for i, k in enumerate(insertion_order)}

    # scored = []
    # for key, meta in MOVIES.items():
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –≤–µ—Å—å –ø–æ–∏—Å–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    scored = []
    # –°—Ç–∞—Ä—ã–π –∫–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ MOVIES –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    #     title = str(meta.get('title', key))
    #     title_n = _norm(title)
    #     aliases_n = [_norm(a) for a in meta.get('aliases', [])]
    #     score = 0
    #     # ... –≤–µ—Å—å –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω

    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # if scored:
    #     scored.sort(reverse=True)
        #     # –ï—Å–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –º–∞—Ç—á ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å–º–∞ –Ω–∞–ø—Ä—è–º—É—é
        #     top_score, top_key = scored[0]
        #     if top_score >= 90 and (len(scored) == 1 or (len(scored) > 1 and top_score - scored[1][0] >= 20)):
        #         show = f"movie:{top_key}"
        #     else:
        #         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
        #         movie_cards = []
        #         for score, key in scored[:10]:  # –¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        #             meta = MOVIES.get(key, {})
        #             title = meta.get('title', key)
        #             movie_code = f"/movie_{key}"
        #             movie_cards.append(InlineQueryResultArticle(
        #                 id=f"movie_search_{key}",
        #                 title=title,
        #                 description='—Ñ–∏–ª—å–º',
        #                 input_message_content=InputTextMessageContent(
        #                     message_text=movie_code,
        #                     parse_mode="HTML",
        #                     disable_web_page_preview=True
        #                 ),
        #                 thumb_url=meta.get('thumb_url') or meta.get('poster_url')
        #             ))
        #         try:
        #             await query.answer(movie_cards, cache_time=1, is_personal=True)
        #         except Exception:
        #             await query.answer([], cache_time=1, is_personal=True)
        #         return
    # –§–æ–ª–±—ç–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫–æ—Ä–∏–Ω–≥ –≤—ã—à–µ

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ season/episode (–¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤)
    rest = parts[1:] if show else parts
    joined = ' '.join(rest)
    # –§–æ—Ä–º–∞—Ç—ã: "2x3", "s2 e3", "2 3", "s2"
    import re as _re
    m = _re.search(r"(s|—Å)?\s*(\d+)\s*(e|—Å|x)?\s*(\d+)?", joined)
    if m:
        s_num = m.group(2)
        e_num = m.group(4)
        if s_num:
            season = int(s_num)
        if e_num:
            episode = int(e_num)
    # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ —Å–µ–∑–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ —á–∏—Å–ª–∞ –∏–∑ –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if season is None:
        nums = _re.findall(r"\d+", text)
        if nums:
            season = int(nums[0])
            if episode is None and len(nums) > 1:
                episode = int(nums[1])

    # –°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Vibix
    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if show and ':' in show and show.startswith('movie:'):
        movie_key = show.split(':', 1)[1]
        meta = MOVIES.get(movie_key)
        if meta and _is_valid_file_id(meta['file_id']):
            title = meta['title']
            caption = f"<b>{title}</b>"
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
            # –ü—ã—Ç–∞–µ–º—Å—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ URL –¥–ª—è –≤–∏–¥–µ–æ –∏ –ø–æ—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
            video_url = None
            thumb_url = None
            try:
                vfile = await bot.get_file(meta['file_id'])
                video_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{vfile.file_path}"
                poster_id = meta.get('poster_id')
                if poster_id:
                    pfile = await bot.get_file(poster_id)
                    thumb_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{pfile.file_path}"
            except Exception:
                video_url = None
                thumb_url = None
            results_list = []
            # –ï–¥–∏–Ω—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞ ‚Äî –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º; –ø–æ –∫–ª–∏–∫—É –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
            # –°–æ—Å—Ç–∞–≤–∏–º description –∏–∑ –º–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            year = str(meta.get('year', '')).strip()
            country = meta.get('country') or meta.get('countries') or ''
            if isinstance(country, list):
                country = ', '.join(country)
            genres = meta.get('genres', '')
            if isinstance(genres, list):
                genres = ', '.join(genres)
            kp = meta.get('kp') or meta.get('kinopoisk')
        imdb = meta.get('imdb')
        rating_parts = []
        if kp:
            rating_parts.append(f"kp:{kp}")
        if imdb:
            rating_parts.append(f"imdb:{imdb}")
        rating_line = ' | '.join(rating_parts)
        desc_parts = []
        if country:
            desc_parts.append(country)
            if year:
                desc_parts.append(year)
            if genres:
                desc_parts.append(genres)
            if rating_line:
                desc_parts.append(rating_line)
            description = ' | '.join([p for p in desc_parts if p])

            # –ö–∞—Ä—Ç–æ—á–∫–∞ Article —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–≤–∏–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ) –∏ –∫–Ω–æ–ø–∫–æ–π –°–º–æ—Ç—Ä–µ—Ç—å
            poster_url = meta.get('poster_url') or meta.get('thumb_url')
            thumb = meta.get('thumb_url') or meta.get('poster_url') or thumb_url or None
            # –¢–µ–∫—Å—Ç –¥–ª—è Article –ë–ï–ó —Å—ã—Ä–æ–π —Å—Å—ã–ª–∫–∏
            article_lines = [f"<b>{title}</b>"]
            if description:
                article_lines.append(description)
            article_lines.append("\n" + get_watch_hint())
            article_text = "\n".join(article_lines)
            # –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: —Ñ–∏–ª—å–º | –æ—Å—Ç–∞–ª—å–Ω–∞—è –º–µ—Ç–∞
            desc_under_title = "—Ñ–∏–ª—å–º" + (f" | {description}" if description else "")
            try:
                results_list.append(InlineQueryResultArticle(
                    id=f"movie_article_{movie_key}",
                    title=title,
                    description=desc_under_title,
                    input_message_content=InputTextMessageContent(message_text=f"/movie_{movie_key}", parse_mode="HTML", disable_web_page_preview=True),
                    thumb_url=thumb,
                ))
            except Exception:
                pass
            try:
                await query.answer(results_list, cache_time=1, is_personal=True)
            except Exception:
                await query.answer([], cache_time=1, is_personal=True)
            return

    results = []

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ —Å–µ—Ä–∏–µ–π –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    def _make_reply_markup(s_key: str, s: int, e: int):
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from season_keyboard_helper import get_dynamic_episodes_keyboard
        try:
            keyboard = get_dynamic_episodes_keyboard(s_key, s, e)
            return keyboard
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {s_key} {s}x{e}: {e}")
            # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
    def add_result(s_key: str, s: int, e: int):
        # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from db import load_all_episodes
        try:
            episodes = load_all_episodes(s_key)
            episode_data = next((ep for ep in episodes if ep['season'] == s and ep['episode'] == e), None)
            if not episode_data or not episode_data.get('file_id') or episode_data.get('type') == 'stub' or not _is_valid_file_id(episode_data.get('file_id', '')):
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–∏ {s_key} {s}x{e}: {e}")
            return
            
        title_show = show_map[s_key]
        rid = f"{s_key}_{s}_{e}"
        title = f"{title_show} ‚Ä¢ —Å–µ—Ä–∏–∞–ª: –°–µ–∑–æ–Ω {s}, –°–µ—Ä–∏—è {e}"
        caption = f"<b>üé¨ –°–µ—Ä–∏—è {e}</b>\n<b>–°–µ–∑–æ–Ω {s}</b>\n{title_show}"
        markup = _make_reply_markup(s_key, s, e)
        if episode_data.get('type') == 'video':
            results.append(InlineQueryResultCachedVideo(
                id=rid,
                video_file_id=episode_data['file_id'],
                title=title,
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup
            ))
        else:
            results.append(InlineQueryResultCachedDocument(
                id=rid,
                document_file_id=episode_data['file_id'],
                title=title,
                caption=caption,
                parse_mode="HTML",
                reply_markup=markup
            ))

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —à–æ—É –∏ —Å–µ–∑–æ–Ω/—Å–µ—Ä–∏—è
    if show and show in show_map and season:
        # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from db import load_all_episodes, load_all_seasons
        try:
            episodes = load_all_episodes(show)
            seasons = load_all_seasons(show)
            title_show = show_map[show]
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –≤ —Å–µ–∑–æ–Ω–µ
            season_episodes = [ep for ep in episodes if ep['season'] == season]
            max_ep = len(season_episodes)
            
            if episode:
                # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                episode_data = next((ep for ep in episodes if ep['season'] == season and ep['episode'] == episode), None)
                if episode_data and episode_data.get('file_id') and episode_data.get('type') != 'stub' and _is_valid_file_id(episode_data.get('file_id', '')):
                    rid = f"{show}_{season}_{episode}"
                    title = f"{title_show} ‚Ä¢ —Å–µ—Ä–∏–∞–ª: –°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {episode}"
                    caption = f"<b>üé¨ –°–µ—Ä–∏—è {episode}</b>\n<b>–°–µ–∑–æ–Ω {season}</b>\n{title_show}"
                    markup = _make_reply_markup(show, season, episode)
                    if episode_data.get('type') == 'video':
                        res = InlineQueryResultCachedVideo(
                            id=rid,
                            video_file_id=episode_data['file_id'],
                            title=title,
                            caption=caption,
                            parse_mode="HTML",
                            reply_markup=markup
                        )
                    else:
                        res = InlineQueryResultCachedDocument(
                            id=rid,
                            document_file_id=episode_data['file_id'],
                            title=title,
                            caption=caption,
                            parse_mode="HTML",
                            reply_markup=markup
                        )
                    try:
                        await query.answer([res], cache_time=1, is_personal=True)
                    except Exception:
                        # –ú–æ–ª—á–∞ –Ω–µ –æ—Ç–¥–∞—ë–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ file_id –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
                        await query.answer([], cache_time=1, is_personal=True)
                    return
            else:
                # –í—ã–≤–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–∏–∏ —Å–µ–∑–æ–Ω–∞ –∫–∞–∫ cached media (–ª–∏–º–∏—Ç 50)
                for ep_data in season_episodes[:50]:  # –õ–∏–º–∏—Ç 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    e = ep_data['episode']
                    if not ep_data.get('file_id') or ep_data.get('type') == 'stub' or not _is_valid_file_id(ep_data.get('file_id', '')):
                        continue
                    rid = f"{show}_{season}_{e}"
                    title = f"{title_show} ‚Ä¢ —Å–µ—Ä–∏–∞–ª: –°–µ–∑–æ–Ω {season}, –°–µ—Ä–∏—è {e}"
                    caption = f"<b>üé¨ –°–µ—Ä–∏—è {e}</b>\n<b>–°–µ–∑–æ–Ω {season}</b>\n{title_show}"
                    if ep_data.get('type') == 'video':
                        results.append(InlineQueryResultCachedVideo(
                            id=rid,
                            video_file_id=ep_data['file_id'],
                            title=title,
                            caption=caption,
                            parse_mode="HTML"
                        ))
                    else:
                        results.append(InlineQueryResultCachedDocument(
                            id=rid,
                            document_file_id=ep_data['file_id'],
                            title=title,
                            caption=caption,
                            parse_mode="HTML"
                        ))
                    if len(results) >= 50:
                        break
                try:
                    await query.answer(results, cache_time=1, is_personal=True)
                except Exception:
                    await query.answer([], cache_time=1, is_personal=True)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–ª—è {show}: {e}")
            await query.answer([], cache_time=1, is_personal=True)
            return

    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ —à–æ—É –±–µ–∑ —Å–µ–∑–æ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Å–µ–∑–æ–Ω–æ–≤ (–¥–ª—è RM/LBSC/PHF)
    if show and show in show_map and not season:
        if show == 'rm':
            text = "<b>–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from db import load_all_seasons
            try:
                seasons = load_all_seasons('rm')
                max_season = max([s['season'] for s in seasons]) if seasons else 1
                thumb = SERIES_POSTERS.get('rm', {}).get(max_season)
            except:
                thumb = None
            art = InlineQueryResultArticle(
                id="rm_seasons",
                title="–†–∏–∫ –∏ –ú–æ—Ä—Ç–∏ ‚Äî —Å–µ–∑–æ–Ω—ã",
                input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
                reply_markup=get_seasons_keyboard(),
                description="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤",
                thumb_url=thumb
            )
            await query.answer([art], cache_time=1, is_personal=True)
            return
        if show == 'lbsc':
            text = "<b>–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä‚Äë–ö–æ—Ç</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
            thumb = SERIES_POSTERS.get('lbsc', {}).get('show')
            art = InlineQueryResultArticle(
                id="lbsc_seasons",
                title="–õ–µ–¥–∏ –ë–∞–≥ –∏ –°—É–ø–µ—Ä‚Äë–ö–æ—Ç ‚Äî —Å–µ–∑–æ–Ω—ã",
                input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
                reply_markup=get_lbsc_seasons_keyboard(),
                description="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤",
                thumb_url=thumb
            )
            await query.answer([art], cache_time=1, is_personal=True)
            return
        if show == 'phf':
            text = "<b>–§–∏–Ω–µ—Å –∏ –§–µ—Ä–±</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
            art = InlineQueryResultArticle(
                id="phf_seasons",
                title="–§–∏–Ω–µ—Å –∏ –§–µ—Ä–± ‚Äî —Å–µ–∑–æ–Ω—ã",
                input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
                reply_markup=get_phf_seasons_keyboard(),
                description="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤"
            )
            await query.answer([art], cache_time=1, is_personal=True)
            return
        if show == 'loki':
            text = "<b>–õ–æ–∫–∏ (2021)</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
            thumb = SERIES_POSTERS.get('loki', {}).get('show')
            art = InlineQueryResultArticle(
                id="loki_seasons",
                title="–õ–æ–∫–∏ (2021) ‚Äî —Å–µ–∑–æ–Ω—ã",
                input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
                reply_markup=get_loki_seasons_keyboard(),
                description="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤",
                thumb_url=thumb
            )
            await query.answer([art], cache_time=1, is_personal=True)
            return
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if show in show_map:
            title = show_map[show]
            text = f"<b>{title}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω:"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–µ—Ä –∏–∑ SERIES_POSTERS
            thumb = None
            if show in SERIES_POSTERS:
                poster_data = SERIES_POSTERS[show]
                if isinstance(poster_data, dict):
                    thumb = poster_data.get('show') or poster_data.get(max(poster_data.keys()) if poster_data else None)
                else:
                    thumb = poster_data
            
            try:
                from keyboards import get_dynamic_seasons_keyboard
                keyboard = get_dynamic_seasons_keyboard(show)
                art = InlineQueryResultArticle(
                    id=f"{show}_seasons",
                    title=f"{title} ‚Äî —Å–µ–∑–æ–Ω—ã",
                    input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
                    reply_markup=keyboard,
                    description="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤",
                    thumb_url=thumb
                )
                await query.answer([art], cache_time=1, is_personal=True)
                return
            except Exception as e:
                logging.error(f"[INLINE_QUERY] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {show}: {e}")

    # –ù–µ–ø–∞—Ä—Å–∏—Ä—É–µ–º—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if q:  # –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        not_found = InlineQueryResultArticle(
            id="not_found",
            title="–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            input_message_content=InputTextMessageContent(
                message_text=(
                    f"‚ùå <b>–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª <b>\"{q}\"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                    f"üëâ /start ‚Üí üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"
                ),
                parse_mode="HTML"
            ),
            description=f"–§–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª \"{q}\" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin_start")]
            ])
        )
        await query.answer([not_found], cache_time=1, is_personal=True)
    else:
        # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.answer([], cache_time=1, is_personal=True)

def get_phf_episodes_keyboard(season):
    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ storage
    from db import load_all_episodes
    buttons = []
    row = []
    
    try:
        episodes = load_all_episodes("phf")
        season_episodes = [ep for ep in episodes if ep['season'] == season]
        season_episodes.sort(key=lambda x: x['episode'])
        
        for ep in season_episodes:
            episode = ep['episode']
            row.append(InlineKeyboardButton(text=f"üé¨ –°–µ—Ä–∏—è {episode}", callback_data=f"phf_episode_{season}_{episode}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–∏–π PHF —Å–µ–∑–æ–Ω–∞ {season}: {e}")
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–∞–º", callback_data="choose_phf")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars ===

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç
        payload = pre_checkout_query.invoice_payload
        
        if payload in ["premium_2months", "premium_1year"]:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        else:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=False, 
                error_message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
            )
    except Exception as e:
        logging.error(f"Error in pre_checkout_handler: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id, 
            ok=False, 
            error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        user_id = message.from_user.id
        payment = message.successful_payment
        payload = payment.invoice_payload
        payment_charge_id = payment.telegram_payment_charge_id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç payload
        if payload == "premium_2months":
            days = 60
            period_text = "2 –º–µ—Å—è—Ü–∞"
        elif payload == "premium_1year":
            days = 365
            period_text = "1 –≥–æ–¥"
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–º–∏—É–º–∞")
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º
        success = activate_premium(user_id, days, payment_charge_id)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{period_text}</b>\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n"
                f"‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                f"‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∏\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
                parse_mode="HTML"
            )
            logging.info(f"Premium activated for user {user_id} for {days} days (payment_id: {payment_charge_id})")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            logging.error(f"Failed to activate premium for user {user_id}")
            
    except Exception as e:
        logging.error(f"Error in successful_payment_handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ file_id (–ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ–Ω–µ—Ü –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞) ===
@router.message(F.video | F.document | F.photo)
async def show_media_file_id(message: Message):
    """–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç —Å file_id –Ω–∞ –ª—é–±–æ–µ –º–µ–¥–∏–∞ –æ—Ç –∞–¥–º–∏–Ω–∞."""
    logging.info(f"[show_media_file_id] ‚ö†Ô∏è TRIGGERED! User {message.from_user.id} sent media")
    try:
        if message.from_user.id not in ADMIN_IDS:
            logging.info(f"[show_media_file_id] skip: sender is not ADMIN_ID ({message.from_user.id} not in {ADMIN_IDS})")
            return
    except Exception as e:
        logging.exception(f"[show_media_file_id] exception checking ADMIN_ID: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if message.from_user.id in broadcast_state:
        state = broadcast_state[message.from_user.id]
        if state.get("step") in ["content", "custom_button"]:
            logging.info(f"[show_media_file_id] skip: admin {message.from_user.id} is creating broadcast")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Ç–æ–ª—å–∫–æ –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    if message.from_user.id in tech_support_state:
        logging.info(f"[show_media_file_id] skip: admin {message.from_user.id} is in tech support state")
        return
    
    fid = None
    media_type = None
    try:
        if message.video:
            fid = message.video.file_id
            media_type = 'video'
        elif message.document:
            fid = message.document.file_id
            media_type = 'document'
        elif message.photo:
            # –ë–µ—Ä—ë–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø—Ä–µ–≤—å—é
            fid = message.photo[-1].file_id
            media_type = 'photo'
    except Exception:
        fid = None
    if fid:
        await message.reply(f"–¢–∏–ø: <b>{media_type}</b>\nfile_id:\n<code>{fid}</code>", parse_mode="HTML") 