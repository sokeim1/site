// API Configuration
const API_CONFIG = {
    baseUrl: 'https://vibix.org/api/v1',
    apiKey: 'K5S0n92g87qeScnSrtqxOEpx4SswFFPV1sv5C68465469908',
    headers: {
        'Authorization': 'Bearer K5S0n92g87qeScnSrtqxOEpx4SswFFPV1sv5C68465469908',
        'Content-Type': 'application/json'
    }
};

// API Service Class
class MovieAPI {
    constructor() {
        this.baseUrl = API_CONFIG.baseUrl;
        this.headers = API_CONFIG.headers;
        
        // –ö—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞
        this.searchCache = new Map();
        this.moviesIndex = new Map(); // –ò–Ω–¥–µ–∫—Å —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        this.isIndexBuilding = false;
        this.indexProgress = 0;
        this.totalPages = 20000; // –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        
        // –ö—ç—à —Å—Ç—Ä–∞–Ω–∏—Ü
        this.pagesCache = new Map();
        this.maxCacheSize = 1000; // –ú–∞–∫—Å–∏–º—É–º 1000 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫—ç—à–µ
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        this.searchStats = {
            totalSearches: 0,
            cacheHits: 0,
            avgSearchTime: 0
        };
        
        // –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        this.dbCacheKey = 'cinehub_movies_db_v2';
        this.dbCacheExpiry = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É
        // –ù–ï —Å—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        this.loadPrebuiltIndex() || this.loadCachedDatabase();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ node build-index.js –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    }

    // Generic API request method (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    async makeRequest(endpoint, options = {}) {
        try {
            const url = `${this.baseUrl}${endpoint}`;
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
            if (window.DEBUG_API) {
                console.log('Making API request to:', url);
            }
            
            const response = await fetch(url, {
                headers: this.headers,
                ...options
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('API Error Response:', errorText);
                throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
            if (window.DEBUG_API) {
                console.log('API Response data:', data);
            }
            
            return data;
        } catch (error) {
            console.error('API Request Error:', error);
            throw error;
        }
    }

    // Get list of movies/serials with pagination
    async getMoviesList(params = {}) {
        const queryParams = new URLSearchParams();
        
        // Add parameters to query string
        Object.keys(params).forEach(key => {
            if (params[key] !== undefined && params[key] !== null) {
                if (Array.isArray(params[key])) {
                    params[key].forEach(value => {
                        queryParams.append(`${key}[]`, value);
                    });
                } else {
                    queryParams.append(key, params[key]);
                }
            }
        });

        const endpoint = `/publisher/videos/links?${queryParams.toString()}`;
        return await this.makeRequest(endpoint);
    }

    // Get movie by internal Vibix ID
    // NOTE: This endpoint may not exist in API, keeping for compatibility
    async getMovieById(id) {
        // Try to get by id, but this might fail
        try {
            const endpoint = `/publisher/videos/${id}`;
            return await this.makeRequest(endpoint);
        } catch (error) {
            console.warn(`‚ö†Ô∏è Failed to get movie by id ${id}, endpoint may not exist`);
            throw error;
        }
    }

    // Get movie by Kinopoisk ID
    async getMovieByKpId(kpId) {
        const endpoint = `/publisher/videos/kp/${kpId}`;
        return await this.makeRequest(endpoint);
    }

    // Get movie by IMDB ID
    async getMovieByImdbId(imdbId) {
        const endpoint = `/publisher/videos/imdb/${imdbId}`;
        return await this.makeRequest(endpoint);
    }

    // Get list of Kinopoisk IDs
    async getKpIds(params = {}) {
        const queryParams = new URLSearchParams();
        
        Object.keys(params).forEach(key => {
            if (params[key] !== undefined && params[key] !== null) {
                if (Array.isArray(params[key])) {
                    params[key].forEach(value => {
                        queryParams.append(`${key}[]`, value);
                    });
                } else {
                    queryParams.append(key, params[key]);
                }
            }
        });

        const endpoint = `/publisher/videos/get_kpids${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
        return await this.makeRequest(endpoint);
    }

    // Get categories
    async getCategories() {
        const endpoint = '/publisher/videos/categories';
        return await this.makeRequest(endpoint);
    }

    // Get genres
    async getGenres() {
        const endpoint = '/publisher/videos/genres';
        return await this.makeRequest(endpoint);
    }

    // Get countries
    async getCountries() {
        const endpoint = '/publisher/videos/countries';
        return await this.makeRequest(endpoint);
    }

    // Get tags
    async getTags() {
        const endpoint = '/publisher/videos/tags';
        return await this.makeRequest(endpoint);
    }

    // Get voiceovers
    async getVoiceovers() {
        const endpoint = '/publisher/videos/voiceovers';
        return await this.makeRequest(endpoint);
    }

    // Get serial seasons and episodes by Kinopoisk ID
    async getSerialByKpId(kpId) {
        const endpoint = `/serials/kp/${kpId}`;
        return await this.makeRequest(endpoint);
    }

    // Get serial seasons and episodes by IMDB ID
    async getSerialByImdbId(imdbId) {
        const endpoint = `/serials/imdb/${imdbId}`;
        return await this.makeRequest(endpoint);
    }

    // Helper method to filter movies by search query (–£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –° –ü–û–ò–°–ö–û–ú –ü–û –°–õ–û–í–ê–ú)
    filterMoviesByQuery(movies, searchQuery) {
        const normalizeText = (text) => {
            return (text || '')
                .toLowerCase()
                .replace(/—ë/g, '–µ')
                // –£–¥–∞–ª—è–µ–º –í–°–ï –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–¥–≤–æ–µ—Ç–æ—á–∏—è, –∑–∞–ø—è—Ç—ã–µ, —Ç–∏—Ä–µ –∏ —Ç.–¥.)
                .replace(/[^\w–∞-—èa-z0-9\s]/gi, ' ')
                .replace(/\s+/g, ' ')
                .trim();
        };

        const q = normalizeText(searchQuery);
        
        if (!q) {
            return movies; // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
        }
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const searchWords = q.split(' ').filter(word => word.length > 1);
        
        console.log(`üîç ENHANCED SEARCH for: "${searchQuery}" -> words: [${searchWords.join(', ')}]`);
        
        const results = movies.filter(movie => {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
            const nameRus = normalizeText(movie.name_rus || '');
            const nameEng = normalizeText(movie.name_eng || '');
            const name = normalizeText(movie.name || '');
            const nameOriginal = normalizeText(movie.name_original || '');
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            const allTitles = [nameRus, nameEng, name, nameOriginal].join(' ');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            const exactMatch = nameRus.includes(q) || 
                              nameEng.includes(q) || 
                              name.includes(q) ||
                              nameOriginal.includes(q);
            
            if (exactMatch) {
                return true;
            }
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º (–ë–û–õ–ï–ï –ì–ò–ë–ö–û)
            if (searchWords.length > 1) {
                // –î–ª—è –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã 70% —Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã
                const foundWords = searchWords.filter(word => allTitles.includes(word));
                const wordMatchRatio = foundWords.length / searchWords.length;
                
                if (wordMatchRatio >= 0.7) {
                    return true;
                }
            } else if (searchWords.length === 1) {
                // –î–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if (allTitles.includes(searchWords[0])) {
                    return true;
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            const description = normalizeText(movie.description || '');
            const descriptionShort = normalizeText(movie.description_short || '');
            const allDescriptions = [description, descriptionShort].join(' ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            const descriptionExactMatch = description.includes(q) || descriptionShort.includes(q);
            
            if (descriptionExactMatch) {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–ë–û–õ–ï–ï –ì–ò–ë–ö–û)
            if (searchWords.length > 1) {
                const foundWordsInDesc = searchWords.filter(word => allDescriptions.includes(word));
                const descWordMatchRatio = foundWordsInDesc.length / searchWords.length;
                
                if (descWordMatchRatio >= 0.5) {
                    return true;
                }
            } else if (searchWords.length === 1) {
                if (allDescriptions.includes(searchWords[0])) {
                    return true;
                }
            }
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for (const word of searchWords) {
                if (word.length >= 4) { // –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–≤ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
                    const partialMatch = [nameRus, nameEng, name, nameOriginal].some(title => 
                        title && title.toLowerCase().includes(word)
                    );
                    if (partialMatch) {
                        return true;
                    }
                }
            }
            
            return false;
        });
        
        console.log(`üéØ Enhanced search "${searchQuery}": found ${results.length} results from ${movies.length} movies (words: [${searchWords.join(', ')}])`);
        
        if (results.length > 0) {
            console.log('üìã Sample found movies:', results.slice(0, 3).map(m => ({
                title: m.name_rus || m.name || 'Unknown',
                year: m.year
            })));
        }
        
        return results;
    }

    // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async searchMovies(query, params = {}) {
        const startTime = Date.now();
        this.searchStats.totalSearches++;
        
        console.log('üîç API searchMovies called with:', { query, params });
        
        if (!query) {
            console.log('üîç Empty query, returning all movies');
            return await this.getMoviesList(params);
        }

        console.log('üîç Fast search for:', query);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const searchQuery = this.normalizeSearchQuery(query);
        const cacheKey = `${searchQuery}_${JSON.stringify(params)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.searchCache.has(cacheKey)) {
            console.log('‚úÖ Cache hit for:', searchQuery);
            this.searchStats.cacheHits++;
            return this.searchCache.get(cacheKey);
        }
        
        try {
            let results;
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∏–Ω–¥–µ–∫—Å, –ø–æ—Ç–æ–º batch search
            if (this.moviesIndex.size > 1000) {
                console.log('üöÄ Using fast search index (' + this.moviesIndex.size + ' movies)');
                results = await this.searchInIndex(searchQuery, params);
            } else {
                console.log('‚ö° Using optimized batch search (index not ready: ' + this.moviesIndex.size + ' movies)');
                results = await this.optimizedBatchSearch(searchQuery, params);
            }
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.searchCache.set(cacheKey, results);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if (this.searchCache.size > 100) {
                const firstKey = this.searchCache.keys().next().value;
                this.searchCache.delete(firstKey);
            }
            
            const searchTime = Date.now() - startTime;
            this.searchStats.avgSearchTime = (this.searchStats.avgSearchTime + searchTime) / 2;
            
            console.log(`üéØ Search completed in ${searchTime}ms: ${results.data.length} results`);
            console.log('üìä Search stats:', this.searchStats);
            
            return results;
            
        } catch (error) {
            console.error('‚ùå Search error:', error);
            throw error;
        }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API
    async tryDirectAPISearch(searchQuery, params = {}) {
        try {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã search endpoints
            const searchEndpoints = [
                `/publisher/videos/search?q=${encodeURIComponent(searchQuery)}`,
                `/movies/search?query=${encodeURIComponent(searchQuery)}`,
                `/search?q=${encodeURIComponent(searchQuery)}`,
                `/publisher/videos/links?search=${encodeURIComponent(searchQuery)}`
            ];
            
            for (const endpoint of searchEndpoints) {
                try {
                    console.log(`üîç Trying endpoint: ${endpoint}`);
                    const response = await this.makeRequest(endpoint);
                    
                    if (response && response.data && Array.isArray(response.data) && response.data.length > 0) {
                        console.log(`‚úÖ Direct API search successful via ${endpoint}: ${response.data.length} results`);
                        return {
                            data: response.data,
                            meta: {
                                total: response.data.length,
                                current_page: 1,
                                last_page: 1,
                                search_method: 'direct_api'
                            }
                        };
                    }
                } catch (endpointError) {
                    console.log(`‚ö†Ô∏è Endpoint ${endpoint} failed:`, endpointError.message);
                    continue;
                }
            }
            
            console.log('‚ö†Ô∏è All direct API search endpoints failed');
            return null;
            
        } catch (error) {
            console.error('‚ùå Direct API search error:', error);
            return null;
        }
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    normalizeSearchQuery(query) {
        return query.toLowerCase().trim()
            .replace(/—ë/g, '–µ')
            .replace(/[^\w–∞-—èa-z\s]/gi, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }
    
    // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–ò–°–ö: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ 20000 —Å—Ç—Ä–∞–Ω–∏—Ü
    async optimizedBatchSearch(searchQuery, params = {}) {
        console.log(`üîç ULTRA SEARCH: Starting distributed search across 20K pages for "${searchQuery}"`);
        
        const totalPages = 20000; // –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        const limit = 100;
        const targetResults = 30; // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const minResults = 10; // –ú–∏–Ω–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
        
        let foundResults = [];
        let processedPages = 0;
        let totalProcessed = 0;
        let emptyPages = 0;
        
        // –§–ê–ó–ê 1: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö (–ø–µ—Ä–≤—ã–µ 500 —Å—Ç—Ä–∞–Ω–∏—Ü)
        console.log('üöÄ PHASE 1: Quick search in popular range (1-500)');
        const phase1Pages = this.generateSmartSample(1, 500, 50); // 50 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –ø–µ—Ä–≤—ã—Ö 500
        const phase1Results = await this.searchInPages(phase1Pages, searchQuery, limit, params);
        foundResults.push(...phase1Results.results);
        processedPages += phase1Results.processed;
        totalProcessed += phase1Results.totalMovies;
        emptyPages += phase1Results.empty;
        
        console.log(`üìä Phase 1: ${foundResults.length} results from ${phase1Results.processed} pages`);
        
        // –§–ê–ó–ê 2: –ï—Å–ª–∏ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (500-5000)
        if (foundResults.length < minResults) {
            console.log('üîç PHASE 2: Expanding to medium range (500-5000)');
            const phase2Pages = this.generateSmartSample(500, 5000, 100); // 100 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ 500-5000
            const phase2Results = await this.searchInPages(phase2Pages, searchQuery, limit, params);
            foundResults.push(...phase2Results.results);
            processedPages += phase2Results.processed;
            totalProcessed += phase2Results.totalMovies;
            emptyPages += phase2Results.empty;
            
            console.log(`üìä Phase 2: ${foundResults.length} total results from ${processedPages} pages`);
        }
        
        // –§–ê–ó–ê 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å—é –±–∞–∑—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π
        if (foundResults.length < minResults) {
            console.log('üåê PHASE 3: Full database distributed search (1-20000)');
            const phase3Pages = this.generateSmartSample(1, totalPages, 200); // 200 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –≤—Å–µ–π –±–∞–∑–µ
            const phase3Results = await this.searchInPages(phase3Pages, searchQuery, limit, params);
            foundResults.push(...phase3Results.results);
            processedPages += phase3Results.processed;
            totalProcessed += phase3Results.totalMovies;
            emptyPages += phase3Results.empty;
            
            console.log(`üìä Phase 3: ${foundResults.length} total results from ${processedPages} pages`);
        }
        
        console.log(`üéØ SEARCH COMPLETE: Found ${foundResults.length} results from ${totalProcessed} movies (${processedPages} pages, ${emptyPages} empty)`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        if (foundResults.length > 0) {
            console.log('üé¨ Sample found movies:');
            foundResults.slice(0, 5).forEach((movie, i) => {
                console.log(`${i+1}. ${movie.name_rus || movie.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${movie.year || '?'})`);
            });
        } else {
            console.log('‚ùå No movies found matching the search query');
        }
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const uniqueResults = this.removeDuplicates(foundResults);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        const sortedResults = this.sortByRelevance(uniqueResults, searchQuery);
        
        const result = {
            data: sortedResults.slice(0, 50),
            meta: {
                total: sortedResults.length,
                current_page: 1,
                last_page: Math.ceil(sortedResults.length / 20),
                search_stats: {
                    processed_pages: processedPages,
                    processed_movies: totalProcessed,
                    found_results: sortedResults.length,
                    empty_pages: emptyPages,
                    database_coverage: `${((processedPages / totalPages) * 100).toFixed(2)}%`
                }
            }
        };
        
        return result;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö)
    generateSmartSample(startPage, endPage, sampleSize) {
        const totalRange = endPage - startPage + 1;
        const step = Math.floor(totalRange / sampleSize);
        const pages = [];
        
        // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        for (let i = 0; i < sampleSize; i++) {
            const page = startPage + (i * step);
            if (page <= endPage) {
                pages.push(page);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        const randomPages = Math.floor(sampleSize * 0.2); // 20% —Å–ª—É—á–∞–π–Ω—ã—Ö
        for (let i = 0; i < randomPages; i++) {
            const randomPage = startPage + Math.floor(Math.random() * totalRange);
            if (!pages.includes(randomPage)) {
                pages.push(randomPage);
            }
        }
        
        return pages.sort((a, b) => a - b);
    }
    
    // –ü–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    async searchInPages(pages, searchQuery, limit, params) {
        const batchSize = 20; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        let results = [];
        let processed = 0;
        let totalMovies = 0;
        let empty = 0;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        for (let i = 0; i < pages.length; i += batchSize) {
            const batch = pages.slice(i, i + batchSize);
            const promises = batch.map(page => this.getPageWithCache(page, limit, params));
            
            try {
                const responses = await Promise.all(promises);
                
                for (const response of responses) {
                    if (response && response.data && Array.isArray(response.data)) {
                        if (response.data.length === 0) {
                            empty++;
                            continue;
                        }
                        
                        const filtered = this.filterMoviesByQuery(response.data, searchQuery);
                        results.push(...filtered);
                        totalMovies += response.data.length;
                        processed++;
                    }
                }
                
                // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                if (i + batchSize < pages.length) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                
            } catch (error) {
                console.error('‚ùå Batch error:', error);
                continue;
            }
        }
        
        return {
            results,
            processed,
            totalMovies,
            empty
        };
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ ID
    removeDuplicates(movies) {
        const seen = new Set();
        return movies.filter(movie => {
            if (seen.has(movie.id)) {
                return false;
            }
            seen.add(movie.id);
            return true;
        });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getPageWithCache(page, limit, params) {
        const cacheKey = `page_${page}_${limit}_${JSON.stringify(params)}`;
        
        if (this.pagesCache.has(cacheKey)) {
            return this.pagesCache.get(cacheKey);
        }
        
        try {
            const response = await this.getMoviesList({
                ...params,
                page: page,
                limit: limit
            });
            
            // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            this.pagesCache.set(cacheKey, response);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            if (this.pagesCache.size > this.maxCacheSize) {
                const firstKey = this.pagesCache.keys().next().value;
                this.pagesCache.delete(firstKey);
            }
            
            return response;
        } catch (error) {
            console.error(`‚ùå Error loading page ${page}:`, error);
            return null;
        }
    }
    
    // –£–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    getSearchStrategy(searchQuery) {
        // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        return [
            { start: 1, end: 50, priority: 'high' },
            { start: 51, end: 100, priority: 'medium' },
            { start: 101, end: 140, priority: 'low' }
        ];
    }
    
    // –ü–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ (–µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω)
    async searchInIndex(searchQuery, params) {
        const results = [];
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        const normalizedQuery = searchQuery.toLowerCase()
            .replace(/—ë/g, '–µ')
            .replace(/[^\w–∞-—èa-z\s]/gi, ' ')
            .replace(/\s+/g, ' ')
            .trim();
            
        const searchWords = normalizedQuery.split(' ').filter(word => word.length > 1);
        
        console.log(`üîç Index search for: "${searchQuery}" -> normalized: "${normalizedQuery}" -> words: [${searchWords.join(', ')}]`);
        
        // –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        for (const [movieId, movieData] of this.moviesIndex) {
            if (this.matchesQuery(movieData, normalizedQuery, searchWords)) {
                results.push(movieData);
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (results.length >= 100) break;
        }
        
        console.log(`üéØ Index search found ${results.length} results`);
        
        const sortedResults = this.sortByRelevance(results, searchQuery);
        
        return {
            data: sortedResults.slice(0, 50),
            meta: {
                total: sortedResults.length,
                current_page: 1,
                last_page: 1,
                search_method: 'index'
            }
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å—É (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –° –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô)
    matchesQuery(movie, searchQuery, searchWords) {
        if (!movie || !searchQuery) return false;
        
        const normalizeText = (text) => {
            return (text || '')
                .toLowerCase()
                .replace(/—ë/g, '–µ')
                // –£–¥–∞–ª—è–µ–º –í–°–ï –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                .replace(/[^\w–∞-—èa-z0-9\s]/gi, ' ')
                .replace(/\s+/g, ' ')
                .trim();
        };
        
        const query = normalizeText(searchQuery);
        
        // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchableFields = [
            movie.name_rus,
            movie.name_eng, 
            movie.name,
            movie.name_original,
            movie.title,
            movie.original_title,
            movie.description,
            movie.description_short,
            movie.overview
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        for (const field of searchableFields) {
            if (field && typeof field === 'string') {
                const normalizedField = normalizeText(field);
                if (normalizedField.includes(query)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    getSearchableText(movie) {
        const texts = [
            movie.name_rus,
            movie.name_eng,
            movie.name,
            movie.name_original,
            movie.description_short
        ];
        
        return texts
            .filter(text => text)
            .join(' ')
            .toLowerCase()
            .replace(/—ë/g, '–µ')
            // –£–¥–∞–ª—è–µ–º –í–°–ï –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            .replace(/[^\w–∞-—èa-z0-9\s]/gi, ' ')
            .replace(/\s+/g, ' ')
            .trim();
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    sortByRelevance(movies, searchQuery) {
        return movies.sort((a, b) => {
            const aText = this.getSearchableText(a);
            const bText = this.getSearchableText(b);
            
            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            const aExact = this.isExactTitleMatch(a, searchQuery);
            const bExact = this.isExactTitleMatch(b, searchQuery);
            
            if (aExact && !bExact) return -1;
            if (!aExact && bExact) return 1;
            
            // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
            const aStarts = this.titleStartsWith(a, searchQuery);
            const bStarts = this.titleStartsWith(b, searchQuery);
            
            if (aStarts && !bStarts) return -1;
            if (!aStarts && bStarts) return 1;
            
            // –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            const aRating = parseFloat(a.kp_rating) || parseFloat(a.imdb_rating) || 0;
            const bRating = parseFloat(b.kp_rating) || parseFloat(b.imdb_rating) || 0;
            
            return bRating - aRating;
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    isExactTitleMatch(movie, searchQuery) {
        const titles = [movie.name_rus, movie.name_eng, movie.name, movie.name_original]
            .filter(title => title)
            .map(title => this.normalizeSearchQuery(title));
            
        return titles.some(title => title === searchQuery);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    titleStartsWith(movie, searchQuery) {
        const titles = [movie.name_rus, movie.name_eng, movie.name, movie.name_original]
            .filter(title => title)
            .map(title => this.normalizeSearchQuery(title));
            
        return titles.some(title => title.startsWith(searchQuery));
    }
    
    // –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ï –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: —Å–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –ø–æ—Ç–æ–º —Ñ–æ–Ω–æ–º –≤—Å—è –±–∞–∑–∞
    async buildSearchIndex() {
        if (this.isIndexBuilding) {
            console.log('üîÑ Index is already being built');
            return;
        }
        
        console.log('üèóÔ∏è Building progressive search index...');
        this.isIndexBuilding = true;
        this.indexProgress = 0;
        
        const limit = 100;
        
        try {
            // –§–ê–ó–ê 1: –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö 500 —Å—Ç—Ä–∞–Ω–∏—Ü (50000 —Ñ–∏–ª—å–º–æ–≤)
            console.log('üöÄ Phase 1: Fast indexing first 500 pages...');
            const phase1Pages = 500;
            const phase1BatchSize = 50;
            
            for (let page = 1; page <= phase1Pages; page += phase1BatchSize) {
                const batchPromises = [];
                const endPage = Math.min(page + phase1BatchSize - 1, phase1Pages);
                
                for (let p = page; p <= endPage; p++) {
                    batchPromises.push(this.getPageWithCache(p, limit, {}));
                }
                
                const responses = await Promise.all(batchPromises);
                
                responses.forEach(response => {
                    if (response && response.data && Array.isArray(response.data)) {
                        response.data.forEach(movie => {
                            if (movie.id) {
                                this.moviesIndex.set(movie.id, movie);
                            }
                        });
                    }
                });
                
                this.indexProgress = Math.round((page / phase1Pages) * 50); // 50% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                console.log(`üìä Phase 1 progress: ${this.indexProgress}% (${this.moviesIndex.size} movies)`);
                
                // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            console.log(`‚úÖ Phase 1 complete: ${this.moviesIndex.size} movies indexed`);
            
            // –°–û–•–†–ê–ù–Ø–ï–ú –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.saveDatabaseToCache();
            
            // –§–ê–ó–ê 2: –§–æ–Ω–æ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –±–∞–∑—ã (–≤—ã–±–æ—Ä–æ—á–Ω–æ)
            console.log('üåê Phase 2: Background indexing of remaining database (sampling)...');
            const phase2Sample = this.generateSmartSample(501, 20000, 500); // 500 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
            
            let phase2Processed = 0;
            const phase2Total = phase2Sample.length;
            
            for (let i = 0; i < phase2Sample.length; i += 20) {
                const batch = phase2Sample.slice(i, i + 20);
                const promises = batch.map(page => this.getPageWithCache(page, limit, {}));
                
                try {
                    const responses = await Promise.all(promises);
                    
                    responses.forEach(response => {
                        if (response && response.data && Array.isArray(response.data)) {
                            response.data.forEach(movie => {
                                if (movie.id) {
                                    this.moviesIndex.set(movie.id, movie);
                                }
                            });
                        }
                    });
                    
                    phase2Processed += batch.length;
                    this.indexProgress = 50 + Math.round((phase2Processed / phase2Total) * 50);
                    
                    if (phase2Processed % 100 === 0) {
                        console.log(`üìä Phase 2 progress: ${this.indexProgress}% (${this.moviesIndex.size} movies)`);
                    }
                    
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                } catch (error) {
                    console.error('‚ùå Phase 2 batch error:', error);
                    continue;
                }
            }
            
            this.indexProgress = 100;
            console.log(`‚úÖ FULL INDEX READY! ${this.moviesIndex.size} movies indexed`);
            
            // –°–û–•–†–ê–ù–Ø–ï–ú –ø–æ–ª–Ω—É—é –±–∞–∑—É
            this.saveDatabaseToCache();
            
        } catch (error) {
            console.error('‚ùå Error building index:', error);
        } finally {
            this.isIndexBuilding = false;
        }
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    stopIndexBuilding() {
        this.isIndexBuilding = false;
        console.log('üö´ Search index building stopped');
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
    getSearchStats() {
        return {
            ...this.searchStats,
            cacheSize: this.searchCache.size,
            pagesCacheSize: this.pagesCache.size,
            indexSize: this.moviesIndex.size,
            indexProgress: this.indexProgress,
            isIndexBuilding: this.isIndexBuilding
        };
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
    getAllMoviesFromIndex() {
        return Array.from(this.moviesIndex.values());
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    clearCache() {
        this.searchCache.clear();
        this.pagesCache.clear();
        console.log('üßπ Cache cleared');
    }
    
    // –ó–ê–ì–†–£–ó–ö–ê –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    loadPrebuiltIndex() {
        try {
            if (typeof window.PREBUILT_MOVIE_INDEX !== 'undefined') {
                const data = window.PREBUILT_MOVIE_INDEX;
                
                console.log('üöÄ LOADING PREBUILT INDEX...');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∏–ª—å–º–æ–≤
                this.moviesIndex = new Map(data.moviesIndex);
                this.indexProgress = 100;
                
                const ageMinutes = Math.round((Date.now() - data.timestamp) / (60 * 1000));
                
                console.log(`‚úÖ PREBUILT INDEX LOADED: ${this.moviesIndex.size} movies!`);
                console.log(`‚ö° Index age: ${ageMinutes} minutes`);
                console.log(`üéØ Search will be INSTANT!`);
                
                return true;
            }
            
            return false;
            
        } catch (error) {
            console.error('‚ùå Error loading prebuilt index:', error);
            return false;
        }
    }
    
    // –ó–ê–ì–†–£–ó–ö–ê –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadCachedDatabase() {
        try {
            const cached = localStorage.getItem(this.dbCacheKey);
            if (!cached) {
                console.log('üì¶ No cached database found');
                return false;
            }
            
            const data = JSON.parse(cached);
            const now = Date.now();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
            if (now - data.timestamp > this.dbCacheExpiry) {
                console.log('‚è∞ Cached database expired, removing...');
                localStorage.removeItem(this.dbCacheKey);
                return false;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∏–ª—å–º–æ–≤
            this.moviesIndex = new Map(data.moviesIndex);
            this.indexProgress = 100;
            
            console.log(`‚úÖ LOADED CACHED DATABASE: ${this.moviesIndex.size} movies from localStorage!`);
            console.log(`‚ö° Cache age: ${Math.round((now - data.timestamp) / (60 * 1000))} minutes`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error loading cached database:', error);
            localStorage.removeItem(this.dbCacheKey);
            return false;
        }
    }
    
    // –°–û–•–†–ê–ù–ï–ù–ò–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
    saveDatabaseToCache() {
        try {
            if (this.moviesIndex.size === 0) {
                console.log('‚ö†Ô∏è No movies to cache');
                return false;
            }
            
            const data = {
                timestamp: Date.now(),
                moviesIndex: Array.from(this.moviesIndex.entries()),
                version: 2
            };
            
            const jsonData = JSON.stringify(data);
            const sizeInMB = (jsonData.length / (1024 * 1024)).toFixed(2);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (localStorage –æ–±—ã—á–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 5-10MB)
            if (jsonData.length > 8 * 1024 * 1024) { // 8MB –ª–∏–º–∏—Ç
                console.warn('‚ö†Ô∏è Database too large for localStorage cache');
                return false;
            }
            
            localStorage.setItem(this.dbCacheKey, jsonData);
            console.log(`üíæ DATABASE SAVED TO CACHE: ${this.moviesIndex.size} movies (${sizeInMB}MB)`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error saving database to cache:', error);
            return false;
        }
    }
    
    // –û–ß–ò–°–¢–ö–ê –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    clearDatabaseCache() {
        localStorage.removeItem(this.dbCacheKey);
        console.log('üóëÔ∏è Cached database cleared from localStorage');
    }

    // Get movies by type (movie or serial)
    async getMoviesByType(type, page = 1, limit = 20) {
        return await this.getMoviesList({
            type: type,
            page: page,
            limit: limit
        });
    }

    // Get movies by year
    async getMoviesByYear(year, page = 1, limit = 20) {
        return await this.getMoviesList({
            year: [year],
            page: page,
            limit: limit
        });
    }

    // Get movies by genre
    async getMoviesByGenre(genreIds, page = 1, limit = 20) {
        return await this.getMoviesList({
            genre: Array.isArray(genreIds) ? genreIds : [genreIds],
            page: page,
            limit: limit
        });
    }

    // Get movies by country
    async getMoviesByCountry(countryIds, page = 1, limit = 20) {
        return await this.getMoviesList({
            country: Array.isArray(countryIds) ? countryIds : [countryIds],
            page: page,
            limit: limit
        });
    }
}

// Create global API instance
const movieAPI = new MovieAPI();

// Export for use in other files
window.movieAPI = movieAPI;

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–ò–°–ö–ê "–ò–ì–†–ê –í –ö–ê–õ–¨–ú–ê–†–ê"
window.testSquidGame = async function() {
    console.log('üß™ TESTING SQUID GAME SEARCH...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
    const queries = [
        '–∏–≥—Ä–∞ –≤ –∫–∞–ª—å–º–∞—Ä–∞',
        '–∏–≥—Ä–∞ –∫–∞–ª—å–º–∞—Ä–∞',
        'squid game',
        'squid',
        '–∫–∞–ª—å–º–∞—Ä'
    ];
    
    for (const query of queries) {
        console.log(`\nüîç Testing query: "${query}"`);
        try {
            const result = await movieAPI.searchMovies(query);
            console.log(`‚úÖ Results: ${result.data.length} movies found`);
            if (result.data.length > 0) {
                console.log('üìã Found movies:', result.data.slice(0, 5).map(m => ({
                    title: m.name_rus || m.name || 'Unknown',
                    year: m.year,
                    id: m.id
                })));
            }
        } catch (error) {
            console.error(`‚ùå Error:`, error);
        }
    }
    
    console.log('\nüß™ TEST COMPLETE');
};

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ö–û–ù–ö–†–ï–¢–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
window.checkPage = async function(pageNum) {
    console.log(`üìÑ Checking page ${pageNum}...`);
    try {
        const result = await movieAPI.getMoviesList({ page: pageNum, limit: 100 });
        console.log(`‚úÖ Page ${pageNum}: ${result.data.length} movies`);
        
        // –ò—â–µ–º "–ò–≥—Ä–∞ –≤ –∫–∞–ª—å–º–∞—Ä–∞" –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const squidGames = result.data.filter(m => {
            const title = (m.name_rus || m.name || '').toLowerCase();
            return title.includes('–∏–≥—Ä–∞') || title.includes('–∫–∞–ª—å–º–∞—Ä') || title.includes('squid');
        });
        
        if (squidGames.length > 0) {
            console.log('üéØ FOUND SQUID GAME ON THIS PAGE:');
            squidGames.forEach(m => {
                console.log(`  - ${m.name_rus || m.name} (${m.year})`);
            });
        }
        
        return result.data;
    } catch (error) {
        console.error(`‚ùå Error:`, error);
    }
};

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ë–´–°–¢–†–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–í–´–• 100 –°–¢–†–ê–ù–ò–¶
window.scanForSquidGame = async function() {
    console.log('üîç SCANNING FIRST 100 PAGES FOR SQUID GAME...');
    
    for (let page = 1; page <= 100; page++) {
        const movies = await window.checkPage(page);
        await new Promise(resolve => setTimeout(resolve, 100)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
    
    console.log('‚úÖ SCAN COMPLETE');
};
